{"v":"5.12.1","fr":60,"ip":30,"op":188,"w":2000,"h":2000,"nm":"Etape10_Environnement","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"Etape 10 - temps 4","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[1090.999,457.036,0],"ix":2,"l":2},"a":{"a":0,"k":[1090.999,457.036,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.028,-0.099],[0,0],[0,0]],"o":[[0,0],[0,0],[-0.039,0.096]],"v":[[2.161,122.213],[1.53,121.814],[2.256,121.918]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[0.063,2.035],[0.494,0.177],[-0.04,0.133],[0.611,0.296],[0.693,0.341],[0.139,0.071],[3.396,0.999],[1.263,0.372],[1.776,0.515],[0,0],[0,0],[-0.176,0.389],[-0.132,0.444],[0.29,-0.227],[-0.239,0.637],[0.142,0.114],[-0.071,0.181],[1.176,1.411],[3.049,1.191],[0.513,0.308],[3.438,1.334],[0.027,0.056],[-0.672,2.145],[0.035,0.165],[-2.509,8.031],[-0.667,2.249],[-0.361,1.138],[0.762,0.718],[-0.074,0.495],[1.132,1.084],[0.083,0.228],[1.567,0.874],[1.051,0.379],[0.078,0.484],[-0.425,1.653],[0.041,0.3],[-0.446,1.395],[0.127,1.828],[0.627,0.348],[0.286,0.322],[0.047,0.047],[5.532,32.572],[-15.339,30.016],[-0.027,0.055],[0.691,-1.393],[0,0],[0,0],[0.724,-1.45],[-7.181,-42.31],[3.244,-31.49],[0.504,-0.379],[-0.034,-0.157],[0.125,0.044],[1.128,-3.025],[1.92,-6.789],[0.066,0.046],[1.18,0.126],[2.989,-1.625],[0.497,-0.968],[0.404,-0.69],[0.087,-0.484],[0.134,0.048],[0.807,-1.995],[0.603,-1.219],[0.286,-0.971],[0.61,-1.5],[0.803,-2.957],[4.057,-12.282],[0.351,-1.662],[0.292,-0.652],[-0.007,-0.248],[0.226,-0.899],[-0.298,-2.918],[-2.719,-2.703],[-2.646,-1.203],[-0.325,-0.208],[-0.939,-0.382],[-1.946,-0.942],[-0.908,-0.41],[-0.468,-0.303],[-1.845,-0.749],[-0.054,-0.112],[-0.758,-0.043],[-0.625,-0.089],[-2.698,1.206],[-0.131,0.376],[-6.811,-2.318],[-0.095,0.019],[-1.341,-0.35],[-0.314,-0.039],[-0.888,-0.24],[-1.026,-0.042],[-0.575,-0.096],[0.111,0.502],[-0.151,-0.047],[-0.392,0.302],[-1.017,3.162],[0,0],[0,0],[-1.626,-0.585],[-0.959,-0.101],[-1.099,-0.354],[-0.851,-0.144],[-1.486,-0.42],[-0.675,-0.176],[-1.144,3.432],[0.508,-0.116],[-0.073,0.226],[0.119,0.047],[0.189,0.36],[9.379,2.897],[0.675,0.178],[0.442,0.124],[-0.136,-0.176],[0.83,0.266],[0.811,-0.027],[-1.635,4.518],[-0.552,1.681],[-0.196,0.095],[-3.614,-0.981],[-3.91,-0.481],[-1.646,0.794]],"o":[[-0.038,-1.248],[-0.195,-0.064],[0.095,-0.255],[-0.203,-0.099],[-0.692,-0.352],[-0.143,-0.062],[-3.397,-0.997],[-1.251,-0.366],[0,0],[0,0],[-0.035,-0.505],[0.173,-0.397],[0.172,-0.614],[-0.269,0.216],[0.19,-0.489],[-0.152,-0.118],[0.189,-0.56],[-1.175,-1.427],[-3.686,-1.439],[-0.734,-0.425],[-1.626,-0.636],[-0.024,-0.068],[0.673,-2.148],[-0.079,-0.362],[0.293,-0.957],[0.657,-2.251],[0.867,-2.75],[-0.396,-0.37],[0.14,-1.004],[-0.485,-0.467],[-0.135,-0.386],[-0.335,-0.193],[-1.574,-0.566],[-0.051,-0.322],[0.422,-1.662],[-0.031,-0.298],[1.083,-3.367],[-0.105,-1.442],[-0.167,-0.093],[-0.044,-0.049],[3.858,-34.118],[-7.172,-42.237],[0.031,-0.059],[0.51,-1.35],[0,0],[0,0],[0.745,-1.436],[-17.729,34.692],[5.466,32.202],[-1.345,0.236],[-0.505,0.375],[0.039,0.154],[-0.48,-0.168],[-2.101,5.637],[-0.26,0.916],[-0.065,-0.046],[-3.558,-0.364],[-2.972,1.609],[-0.198,0.382],[-0.4,0.68],[-0.094,0.49],[-0.293,-0.101],[-0.792,1.952],[-0.464,0.926],[-0.059,0.219],[-1.937,4.725],[-0.844,3.088],[-2.532,7.657],[-0.318,1.497],[-0.162,0.349],[0.008,0.247],[-1.267,4.871],[0.299,2.847],[1.768,1.758],[0.705,0.31],[0.33,0.196],[0.935,0.373],[1.957,0.948],[0.917,0.408],[0.46,0.309],[1.845,0.749],[0.102,0.211],[0.243,0.021],[1.349,0.191],[1.28,-0.582],[0.271,-0.788],[3.048,1.034],[0.103,-0.016],[1.336,0.361],[0.311,0.032],[1.66,0.44],[0.322,0.018],[1.106,0.188],[-0.034,-0.157],[0.15,0.058],[0.615,-0.47],[0,0],[0,0],[0.425,-0.016],[1.651,0.582],[0.941,0.101],[1.1,0.355],[0.846,0.138],[1.479,0.421],[5.741,1.542],[0.486,-1.423],[-0.172,0.039],[0.083,-0.222],[-0.115,-0.04],[-0.998,-1.87],[-2.344,-0.725],[-0.669,-0.181],[-0.463,-0.132],[0.124,0.165],[-2.561,-0.847],[-1.43,0.057],[0.832,-2.302],[1.387,-4.278],[0.31,-0.15],[8.023,2.19],[2.484,0.311],[1.345,-0.649]],"v":[[63.134,146.683],[61.989,143.611],[61.714,143.257],[59.771,141.175],[58.139,140.359],[56.621,139.608],[50.192,137.679],[41.721,135.191],[36.216,133.58],[32.993,132.637],[32.923,131.718],[33.169,130.089],[33.719,128.567],[33.568,128.058],[33.526,127.469],[33.602,126.367],[33.454,125.823],[31.573,122.036],[26.65,118.991],[17.233,115.077],[9.897,111.973],[6.893,110.709],[8.07,106.697],[9.23,102.502],[13.855,86.528],[15.596,80.7],[17.451,74.53],[17.578,70.297],[17.058,68.935],[14.825,64.183],[13.796,62.91],[10.852,60.731],[8.326,59.703],[6.327,58.438],[7.004,54.842],[7.697,51.281],[8.449,48.202],[10.121,39.085],[8.476,35.065],[7.644,34.311],[7.502,34.17],[-0.392,-67.13],[1.997,-177.974],[2.281,-178.448],[-0.137,-179.069],[-0.138,-179.068],[-6.547,-182.343],[-8.689,-183.434],[-12.228,-65.122],[-4.326,31.514],[-7.007,32.404],[-7.86,33.37],[-8.023,33.571],[-10.601,38.155],[-15.093,52.033],[-15.688,53.622],[-17.951,53.317],[-26.592,54.971],[-30.288,57.719],[-31.381,59.661],[-32.271,61.789],[-32.682,62.587],[-34.689,66.036],[-37.349,72.065],[-38.848,75.842],[-40.072,78.967],[-46.826,97.936],[-54.389,121.668],[-58.895,136.238],[-61.145,144.193],[-61.419,145.28],[-61.828,147.361],[-63.026,157.031],[-59.559,163.423],[-53.5,167.492],[-51.624,168.434],[-49.322,169.484],[-44.079,171.879],[-38.866,174.343],[-36.35,175.635],[-32.153,177.541],[-28.695,179.098],[-23.586,180.623],[-22.02,180.813],[-16.9,179.522],[-14.675,178.022],[-7.128,179.656],[-1.406,181.5],[1.216,182.116],[4.225,182.833],[6.416,183.328],[9.482,183.879],[11.118,184.086],[14.51,183.005],[14.717,182.809],[15.713,182.355],[17.615,178.133],[18.802,174.462],[19.581,174.444],[23.319,175.466],[27.987,176.691],[31.697,177.512],[35.232,178.418],[39.466,179.446],[43.378,180.541],[52.96,177.913],[52.903,175.26],[52.737,174.914],[52.666,174.428],[52.109,173.7],[39.36,167.847],[33.865,166.204],[31.844,165.645],[31.275,165.711],[30.004,165.518],[23.933,164.049],[24.157,159.266],[26.657,152.022],[29.382,144.495],[40.056,146.77],[56.476,150.451],[61.624,149.85]],"c":true},"ix":2},"nm":"Path 2","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[1823.143,487.885],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":3,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.016,-0.209],[0.036,0.221]],"o":[[0.009,-0.216],[0.048,0.23]],"v":[[45.635,17.761],[45.586,17.103]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[0.021,-0.066],[-0.008,0.07]],"o":[[0.014,-0.068],[-0.013,0.068]],"v":[[45.562,18.191],[45.617,17.991]],"c":true},"ix":2},"nm":"Path 2","mn":"ADBE Vector Shape - Group","hd":false},{"ind":2,"ty":"sh","ix":3,"ks":{"a":0,"k":{"i":[[-0.18,0.394],[0.265,-0.528]],"o":[[-0.083,0.238],[0.184,-0.399]],"v":[[89.174,132.982],[88.629,134.173]],"c":true},"ix":2},"nm":"Path 3","mn":"ADBE Vector Shape - Group","hd":false},{"ind":3,"ty":"sh","ix":4,"ks":{"a":0,"k":{"i":[[-0.53,0.251],[0.388,-0.284]],"o":[[-0.398,0.267],[0.275,-0.316]],"v":[[-14.425,22.701],[-15.608,23.521]],"c":true},"ix":2},"nm":"Path 4","mn":"ADBE Vector Shape - Group","hd":false},{"ind":4,"ty":"sh","ix":5,"ks":{"a":0,"k":{"i":[[0.079,0.012],[-0.088,0.111],[0.035,-0.106]],"o":[[0.12,-0.104],[-0.017,0.121],[-0.078,-0.012]],"v":[[38.026,10.025],[38.339,9.703],[38.273,10.053]],"c":true},"ix":2},"nm":"Path 5","mn":"ADBE Vector Shape - Group","hd":false},{"ind":5,"ty":"sh","ix":6,"ks":{"a":0,"k":{"i":[[0.159,0.087],[0.129,-0.059],[-0.045,0.012],[-0.362,-0.339]],"o":[[-0.178,0.027],[0.037,-0.231],[0.09,-0.025],[-0.156,-0.093]],"v":[[21.883,99.239],[21.462,99.395],[21.585,98.983],[22.349,99.524]],"c":true},"ix":2},"nm":"Path 6","mn":"ADBE Vector Shape - Group","hd":false},{"ind":6,"ty":"sh","ix":7,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0]],"v":[[-27.281,-105.34],[-27.281,-105.339],[-27.282,-105.34]],"c":true},"ix":2},"nm":"Path 7","mn":"ADBE Vector Shape - Group","hd":false},{"ind":7,"ty":"sh","ix":8,"ks":{"a":0,"k":{"i":[[-0.156,0.038],[0.054,-0.172],[0.064,-0.022],[0.038,0.15]],"o":[[0.156,-0.048],[-0.048,0.18],[-0.07,0.016],[-0.048,-0.148]],"v":[[-21.969,-84.845],[-21.773,-84.611],[-21.985,-84.253],[-22.179,-84.495]],"c":true},"ix":2},"nm":"Path 8","mn":"ADBE Vector Shape - Group","hd":false},{"ind":8,"ty":"sh","ix":9,"ks":{"a":0,"k":{"i":[[0.032,0],[0,0],[0.126,0.212],[-0.07,0.016],[0.11,-0.188]],"o":[[0,0],[-0.078,-0.016],[-0.164,-0.288],[0.188,-0.054],[-0.016,0.024]],"v":[[-20.961,-81.697],[-20.961,-81.705],[-21.297,-82.073],[-21.477,-82.627],[-20.899,-81.729]],"c":true},"ix":2},"nm":"Path 9","mn":"ADBE Vector Shape - Group","hd":false},{"ind":9,"ty":"sh","ix":10,"ks":{"a":0,"k":{"i":[[0.546,0.64],[0.196,0.194],[0.054,0.18],[0.834,0.984],[0.016,0.07],[0.704,0.828],[1.336,2.064],[0.382,0.462],[0.366,0.626],[0.788,1.242],[0.702,1.968],[0.462,1.25],[0.242,1.586],[-0.586,2.016],[-1.32,1.374],[-2.344,-0.484],[-0.022,-0.914],[-0.272,-0.376],[-0.492,-1.43],[-0.368,-0.79],[-0.296,-0.376],[-0.11,-0.212],[-0.688,-1.272],[-0.75,-1.572],[-0.812,-1.556],[-0.5,-1.17],[-0.172,-0.342],[-0.282,-0.65],[-0.242,-0.258],[0.016,-0.038],[-0.032,-0.038],[-0.54,-1.156],[-0.188,-0.352],[-0.226,-0.422],[-0.774,-1.882],[-0.212,-0.204],[-1.726,-4],[-0.876,-1.422],[-0.134,-0.288],[-0.524,-0.984],[-0.04,-0.156],[0.008,-0.008],[0.672,0.788],[0.274,0.134],[0.07,0.258],[0.156,-0.04],[0.056,0.188],[0.876,0.57],[0.032,0.126],[0.672,0.704],[1.522,1.664],[0.71,-0.164],[-0.36,0.282]],"o":[[-0.336,-0.392],[-0.616,-0.602],[-0.024,-0.094],[-0.844,-0.978],[-0.022,-0.072],[-0.696,-0.828],[-1.336,-2.062],[-0.39,-0.46],[-0.376,-0.624],[-1.906,-3.008],[-0.314,-0.884],[-0.5,-1.336],[-0.358,-2.398],[0.704,-2.374],[1.242,-1.304],[2.734,0.556],[0.008,0.382],[0.282,0.374],[0.494,1.438],[1.18,2.522],[0.156,0.194],[0.108,0.21],[0.688,1.266],[1.258,2.648],[0.18,0.35],[0.5,1.172],[0.17,0.352],[0.28,0.656],[0.242,0.258],[-0.016,0.048],[0.024,0.032],[0.53,1.148],[0.188,0.352],[0.46,0.868],[0.96,2.32],[0.312,0.28],[1.868,4.314],[0.508,0.828],[0.132,0.282],[0.532,0.992],[0,0.016],[-0.126,0.07],[-0.484,-0.564],[-0.39,-0.202],[-0.04,-0.148],[-0.148,0.038],[-0.094,-0.312],[-0.21,-0.14],[-0.038,-0.124],[-0.672,-0.696],[-2.938,-3.22],[-0.384,0.094],[0.36,-0.272]],"v":[[-53.999,-47.783],[-54.969,-48.845],[-58.093,-52.495],[-59.663,-54.447],[-61.227,-56.353],[-62.539,-57.995],[-66.235,-63.253],[-69.367,-67.839],[-70.749,-69.815],[-72.851,-73.213],[-77.163,-81.447],[-78.571,-85.331],[-79.821,-90.291],[-79.563,-95.237],[-76.929,-100.127],[-71.703,-101.323],[-66.993,-98.807],[-66.477,-97.431],[-65.079,-94.151],[-63.516,-90.103],[-61.149,-85.455],[-60.663,-84.705],[-59.219,-82.011],[-56.601,-76.845],[-52.969,-69.447],[-51.727,-66.675],[-50.499,-63.925],[-49.679,-62.111],[-48.727,-60.455],[-48.313,-59.909],[-48.289,-59.761],[-47.273,-57.611],[-45.961,-54.885],[-45.203,-53.471],[-43.789,-50.331],[-41.507,-45.447],[-39.117,-40.425],[-35.257,-32.353],[-34.093,-30.315],[-32.891,-28.003],[-31.851,-25.925],[-31.859,-25.893],[-34.179,-27.931],[-35.773,-29.409],[-38.585,-32.167],[-38.937,-32.361],[-39.313,-32.627],[-43.625,-36.573],[-44.071,-37.057],[-45.351,-38.557],[-49.343,-42.853],[-53.757,-46.549],[-53.789,-46.761]],"c":true},"ix":2},"nm":"Path 10","mn":"ADBE Vector Shape - Group","hd":false},{"ind":10,"ty":"sh","ix":11,"ks":{"a":0,"k":{"i":[[0.164,-0.056],[0.118,0.36],[0.21,0.594],[0.968,2.968],[0.116,0.148],[0.008,0.158],[0.304,1.298],[-0.702,0.954],[-0.788,-1.226],[-1.352,-4.962],[-0.226,-1.156],[-0.406,-1.836],[-0.186,-1.492],[-0.132,-0.484]],"o":[[-0.092,0.046],[-0.108,-0.344],[-1.134,-3.094],[-1.43,-4.374],[-0.056,-0.072],[-0.016,-0.164],[-1.164,-4.968],[0.562,-0.766],[0.594,0.922],[0.97,3.538],[0.226,1.15],[0.406,1.828],[0.188,1.492],[0.172,0.624]],"v":[[-2.907,-64.603],[-3.243,-65.049],[-3.835,-66.745],[-8.461,-80.057],[-10.663,-86.517],[-10.781,-86.925],[-11.351,-89.573],[-11.977,-97.573],[-10.329,-97.011],[-7.806,-89.377],[-5.633,-80.839],[-4.485,-75.409],[-3.407,-69.369],[-2.829,-65.783]],"c":true},"ix":2},"nm":"Path 11","mn":"ADBE Vector Shape - Group","hd":false},{"ind":11,"ty":"sh","ix":12,"ks":{"a":0,"k":{"i":[[0.118,0.852],[-0.21,1.328],[-0.172,1.1],[-1.688,1.61],[-0.21,-0.118],[-0.702,0.094],[-0.376,-0.546],[-0.118,0.124],[-0.07,-0.234],[-0.344,-0.196],[-2.273,-3.266],[-0.148,-0.204],[-0.086,-0.218],[-0.126,0.126],[-0.234,-0.686],[-0.25,-0.414],[-0.32,-1.032],[-0.202,-0.21],[-0.132,-0.514],[-1.304,-4.258],[-3.47,-13.258],[-0.96,-4.312],[-1.016,-5.5],[-0.648,-2.744],[0.156,-0.086],[1.54,4.578],[0.202,0.212],[-0.054,0.094],[0.484,0.906],[0.454,1.25],[0.116,0.11],[0.484,1.21],[0.266,0.352],[1.188,2.25],[0.148,0.204],[0.164,0.28],[0.64,1.04],[0.172,0.344],[0.608,0.718],[0.422,0.71],[1.624,1.922],[0.032,0.094],[0.242,0.118],[0.554,1.022],[0.312,3.33],[0.062,0.228],[0.016,0.322]],"o":[[-0.202,-1.476],[0.054,-0.336],[0.336,-2.258],[1.156,-1.118],[0.062,0.03],[1.68,-0.212],[0.164,0.242],[0.116,-0.126],[0.062,0.234],[0.656,0.382],[0.806,1.156],[0.156,0.202],[0.556,1.43],[0.07,-0.084],[0.242,0.688],[0.25,0.422],[0.32,1.03],[0.204,0.212],[0.14,0.516],[2.594,8.524],[2.664,10.21],[0.618,2.82],[0.312,1.696],[0.882,3.694],[-0.18,0.086],[-0.546,-1.624],[-0.204,-0.21],[0.048,-0.094],[-0.486,-0.9],[-0.46,-1.25],[-0.274,-0.25],[-0.196,-0.484],[-0.532,-0.702],[-0.406,-0.774],[-0.158,-0.202],[-0.156,-0.274],[-0.64,-1.038],[-0.172,-0.352],[-0.602,-0.718],[-1.32,-2.226],[-0.876,-1.024],[-0.062,-0.234],[-0.508,-0.226],[-1.384,-2.54],[-0.164,-1.742],[-0.054,-0.226],[-0.014,-0.32]],"v":[[-58.149,-126.377],[-58.133,-132.151],[-57.727,-134.767],[-55.093,-139.791],[-52.477,-141.681],[-51.079,-141.783],[-47.203,-141.151],[-46.695,-140.939],[-46.367,-140.745],[-45.633,-139.963],[-42.306,-135.815],[-40.571,-133.345],[-40.141,-132.581],[-38.585,-129.597],[-38.023,-128.495],[-37.141,-126.487],[-36.101,-123.845],[-35.149,-121.581],[-34.531,-120.261],[-31.915,-111.573],[-26.007,-90.361],[-20.571,-68.581],[-18.859,-59.909],[-17.109,-51.845],[-16.016,-46.175],[-18.579,-52.901],[-19.937,-56.245],[-20.211,-56.799],[-20.999,-58.611],[-22.711,-62.525],[-23.757,-65.003],[-26.766,-70.799],[-27.609,-72.331],[-31.321,-78.713],[-32.335,-80.495],[-32.907,-81.369],[-34.359,-83.761],[-35.835,-86.275],[-37.249,-88.213],[-39.117,-90.807],[-42.437,-95.471],[-44.079,-97.503],[-48.766,-102.761],[-54.421,-109.439],[-57.375,-119.675],[-57.781,-123.253],[-57.907,-124.253]],"c":true},"ix":2},"nm":"Path 12","mn":"ADBE Vector Shape - Group","hd":false},{"ind":12,"ty":"sh","ix":13,"ks":{"a":0,"k":{"i":[[-0.204,-0.468],[0,0],[0,0],[0.772,2.056],[0.11,0.11],[-0.422,0.212],[-0.398,0.196],[-0.274,-0.976],[-0.288,-0.376]],"o":[[0,0],[0,0],[-1.884,0.532],[-0.314,-0.85],[-0.118,-0.102],[0.43,-0.218],[0.882,-0.438],[0.118,0.422],[0.282,0.382]],"v":[[13.251,-1.245],[13.633,-0.385],[12.141,0.021],[8.915,-1.839],[8.133,-3.573],[8.694,-4.151],[10.203,-4.901],[11.633,-4.229],[12.359,-2.783]],"c":true},"ix":2},"nm":"Path 13","mn":"ADBE Vector Shape - Group","hd":false},{"ind":13,"ty":"sh","ix":14,"ks":{"a":0,"k":{"i":[[0.229,0.109],[-0.135,-0.007],[-0.087,-0.098]],"o":[[0.143,0.012],[0.096,0.103],[-0.218,-0.129]],"v":[[41.025,22.617],[41.445,22.639],[41.714,22.937]],"c":true},"ix":2},"nm":"Path 14","mn":"ADBE Vector Shape - Group","hd":false},{"ind":14,"ty":"sh","ix":15,"ks":{"a":0,"k":{"i":[[-1.936,-0.132],[-0.11,0.032],[-0.626,0.078],[-3.64,3.118],[-0.522,3.626],[-0.102,0.03],[-0.32,-2.704],[0.102,-1.234],[0.118,-1.336],[0.946,-1.204],[0.304,-0.438],[1.578,-0.494],[0.196,-0.032],[0.398,0.546],[0.234,-0.062],[0.038,0.156],[0.844,0.616],[1.986,3.484],[0,0.11],[0.242,0.328],[0.336,0.858],[0.242,0.538]],"o":[[0.688,0.048],[0.118,-0.032],[7.398,-0.976],[2.148,-1.844],[0.142,-0.952],[0.304,-0.086],[0.164,1.344],[-0.108,1.236],[-0.266,2.994],[-0.39,0.5],[-0.664,0.954],[-0.22,0.078],[-1.452,0.25],[-0.148,-0.196],[-0.226,0.062],[-0.046,-0.156],[-2.086,-1.524],[-0.914,-1.608],[0,-0.118],[-0.244,-0.328],[-0.336,-0.852],[-0.5,-1.14]],"v":[[55.843,120.997],[57.289,121.029],[58.633,120.833],[73.391,115.365],[77.273,107.435],[77.719,105.639],[80.921,119.209],[81.023,123.903],[80.609,128.575],[78.429,136.139],[77.157,137.841],[72.821,140.569],[72.187,140.725],[67.227,139.951],[66.539,139.709],[66.047,139.545],[64.437,138.147],[58.429,130.755],[56.765,127.623],[56.329,126.811],[55.281,124.655],[54.234,122.123]],"c":true},"ix":2},"nm":"Path 15","mn":"ADBE Vector Shape - Group","hd":false},{"ind":15,"ty":"sh","ix":16,"ks":{"a":0,"k":{"i":[[0.374,0.36],[0.626,1.648],[1.164,2.704],[0.306,0.968],[0.374,0.954],[0.32,0.882],[0.686,1.384],[0.304,1.054],[0.454,1.078],[-0.038,0.078],[-0.078,-0.28],[-1.158,-0.96],[-0.024,-0.1],[-1.086,-0.664],[-0.164,-0.25],[-0.366,-0.228],[-0.406,-0.438],[-0.664,-0.344],[-0.898,-0.876],[-0.124,0.038],[0.04,-0.14],[-0.634,-0.538],[-0.03,-0.126],[-0.806,-0.936],[-0.422,-0.53],[-0.336,-0.344],[-0.046,-0.11],[-0.85,-1.212],[-1.516,-4.524],[1.946,-3.406],[2.65,-0.782],[3.5,0.656],[1.648,1.25],[1.234,4.602]],"o":[[-0.094,-0.094],[-2.21,-5.852],[-0.5,-1.156],[-0.304,-0.97],[-0.368,-0.952],[-0.946,-2.602],[-0.36,-0.71],[-0.304,-1.048],[-0.444,-1.078],[0.086,-0.15],[0.024,0.102],[1.156,0.954],[0.078,0.274],[0.522,0.312],[0.164,0.25],[0.368,0.226],[0.758,0.82],[0.532,0.282],[0.414,0.414],[0.134,-0.032],[-0.038,0.142],[0.624,0.548],[0.04,0.124],[0.804,0.938],[0.43,0.532],[0.344,0.352],[0.164,0.414],[4.064,5.788],[1.656,4.914],[-1.14,2],[-2.71,0.796],[-2.632,-0.492],[-0.798,-0.602],[-1.226,-4.594]],"v":[[41.993,86.607],[40.679,83.435],[36.665,73.263],[35.195,69.397],[33.969,65.903],[32.719,62.569],[30.337,56.739],[29.133,53.537],[27.765,49.669],[27.031,47.569],[28.765,48.911],[30.915,50.833],[33.071,52.755],[37.321,56.177],[38.571,57.209],[39.531,58.069],[40.937,59.279],[44.007,61.787],[48.953,65.795],[49.937,66.475],[50.093,66.677],[51.165,67.927],[52.367,69.147],[53.899,71.075],[56.125,73.755],[57.507,75.349],[58.211,76.185],[59.429,78.139],[66.203,90.655],[65.773,102.747],[61.171,106.123],[53.585,106.303],[47.993,104.029],[45.867,98.583]],"c":true},"ix":2},"nm":"Path 16","mn":"ADBE Vector Shape - Group","hd":false},{"ind":16,"ty":"sh","ix":17,"ks":{"a":0,"k":{"i":[[0.057,0.121],[-0.046,0.012],[0.234,-0.258],[0.013,-0.016]],"o":[[0.058,0.017],[0.266,-0.07],[-0.014,0.016],[-0.057,-0.121]],"v":[[22.563,43.915],[22.734,43.967],[22.773,44.225],[22.738,44.276]],"c":true},"ix":2},"nm":"Path 17","mn":"ADBE Vector Shape - Group","hd":false},{"ind":17,"ty":"sh","ix":18,"ks":{"a":0,"k":{"i":[[-0.992,-1.102],[-0.43,-0.444],[-3.022,-4.75],[-0.336,-0.048],[-0.078,-0.266],[-0.562,-0.86],[0.152,-0.068],[1.185,1.147],[0.39,0.242],[0.094,0.312],[0.282,0.126],[0.07,0.25],[1.078,0.67],[0.452,0.5],[1.188,0.914],[0.048,0.164],[0.484,0.296],[0.054,0.18],[0.25,0.148],[0.984,0.946],[0.57,0.406],[0.038,0.14],[0.656,0.602],[0.016,0.056],[-2.454,0.524],[-0.758,0.102],[-0.688,-0.016]],"o":[[0.898,1.008],[3.64,3.774],[2.11,3.306],[0.132,0.016],[0.07,0.272],[0.857,1.293],[-0.164,0.05],[-0.858,-0.836],[-0.946,-0.586],[-0.032,-0.142],[-0.524,-0.234],[-0.038,-0.156],[-0.406,-0.258],[-0.454,-0.5],[-1.18,-0.922],[-0.046,-0.164],[-0.492,-0.304],[-0.048,-0.178],[-0.242,-0.142],[-0.978,-0.944],[-0.564,-0.406],[-0.04,-0.134],[-0.648,-0.61],[-0.07,-0.258],[1.17,-0.25],[0.688,-0.022],[0.976,0.202]],"v":[[30.469,22.873],[32.891,25.513],[42.265,37.497],[47.337,44.451],[47.711,44.967],[48.867,47.021],[49.929,49.059],[47.921,47.411],[45.641,45.443],[42.703,42.881],[42.125,42.403],[39.273,40.075],[37.571,38.819],[36.001,37.435],[33.023,34.857],[30.789,32.881],[29.821,32.037],[28.837,31.161],[28.297,30.569],[26.063,28.591],[23.251,26.139],[22.157,25.147],[20.891,23.795],[19.671,22.583],[22.915,21.521],[25.765,20.997],[27.829,20.983]],"c":true},"ix":2},"nm":"Path 18","mn":"ADBE Vector Shape - Group","hd":false},{"ind":18,"ty":"sh","ix":19,"ks":{"a":0,"k":{"i":[[0.094,0.032],[0.438,0.524],[2.376,7.782],[-0.928,-2.038],[-0.422,-1.266],[-1.578,-3.82],[-0.148,-0.93]],"o":[[-0.094,-0.032],[-1.164,-1.406],[-1.836,-6.016],[0.212,0.47],[0.828,2.43],[1.454,3.53],[0.072,0.406]],"v":[[28.265,86.771],[27.515,85.959],[22.875,73.927],[21.585,68.239],[22.751,71.389],[25.671,78.975],[28.265,86.193]],"c":true},"ix":2},"nm":"Path 19","mn":"ADBE Vector Shape - Group","hd":false},{"ind":19,"ty":"sh","ix":20,"ks":{"a":0,"k":{"i":[[0.134,-3.008],[-0.008,-1.132],[0.229,-0.516],[-0.046,-0.704],[0.218,-0.28],[-0.038,-0.342],[0.078,-0.132],[-0.078,-0.29],[0.11,-0.53],[-0.04,-0.414],[0.124,-0.086],[-0.04,-0.124],[0.156,-0.992],[-0.016,-0.21],[0.21,-0.54],[0.132,-1.5],[0.336,-0.274],[-0.04,-0.14],[0.852,-0.696],[0.43,-0.14],[1.36,1.468],[0.36,1.836],[-0.39,1.414],[0.008,0.164],[-0.078,1],[0.03,0.556],[-0.14,1.664],[-0.04,0.734],[-0.048,0.336],[0.038,1.35],[-0.07,0.32],[-0.038,1.546],[-0.078,0.36],[0.016,1.492],[-0.118,2.226],[0,1.82],[-0.07,1.478],[0.032,0.968],[-0.048,0.336],[0.016,1.616],[-0.07,0.508],[-0.602,-2.062],[-3.376,-8.164],[-0.812,-1.188]],"o":[[-0.078,1.726],[0,2.476],[-0.094,0.202],[0.094,1.546],[-0.086,0.118],[0.046,0.344],[-0.07,0.132],[0.078,0.282],[-0.108,0.524],[0.04,0.422],[-0.126,0.094],[0.032,0.118],[-0.158,1],[0.054,0.634],[-0.229,0.586],[-0.102,1.07],[-0.102,0.086],[0.1,0.39],[-0.43,0.35],[-1.296,0.422],[-0.61,-0.664],[-0.96,-4.804],[0.048,-0.18],[-0.014,-0.156],[0.086,-0.992],[-0.04,-0.562],[0.134,-1.656],[0.038,-0.742],[0.046,-0.336],[-0.032,-1.352],[0.078,-0.32],[0.048,-1.548],[0.086,-0.35],[-0.008,-1.492],[0.368,-6.806],[0,-0.976],[0.07,-1.476],[-0.032,-0.962],[0.046,-0.336],[-0.008,-1.618],[0.142,-0.874],[2.876,9.812],[1.218,2.952],[0.696,1]],"v":[[19.194,97.725],[19.063,102.927],[18.609,108.983],[18.531,110.631],[18.125,116.911],[18.039,117.739],[17.977,118.607],[17.984,119.365],[17.929,120.841],[17.797,122.553],[17.641,123.475],[17.469,123.857],[17.243,125.881],[16.993,128.075],[16.337,133.029],[15.477,137.983],[14.023,142.467],[13.915,142.873],[11.727,146.061],[10.437,146.795],[6.461,145.225],[5.273,142.161],[4.194,130.357],[4.265,129.747],[4.391,127.647],[4.484,124.825],[4.671,120.787],[4.993,116.427],[5.141,114.467],[5.157,111.397],[5.219,108.349],[5.429,104.951],[5.649,101.489],[5.773,98.139],[5.969,91.381],[6.351,82.287],[6.477,77.825],[6.547,73.381],[6.579,71.013],[6.641,67.459],[6.757,63.591],[7.539,64.849],[14.883,85.959],[18.609,93.545]],"c":true},"ix":2},"nm":"Path 20","mn":"ADBE Vector Shape - Group","hd":false},{"ind":20,"ty":"sh","ix":21,"ks":{"a":0,"k":{"i":[[-0.092,0.061],[0.044,-0.044],[0.095,0.135]],"o":[[-0.019,0.159],[-0.025,0.028],[0.1,-0.027]],"v":[[6.624,-45.195],[6.531,-44.869],[6.338,-45.059]],"c":true},"ix":2},"nm":"Path 21","mn":"ADBE Vector Shape - Group","hd":false},{"ind":21,"ty":"sh","ix":22,"ks":{"a":0,"k":{"i":[[-0.05,0.16],[-0.056,0.056],[0.042,-0.232]],"o":[[0.016,-0.052],[-0.081,0.208],[0.005,-0.158]],"v":[[-6.306,29.943],[-6.193,29.782],[-6.382,30.439]],"c":true},"ix":2},"nm":"Path 22","mn":"ADBE Vector Shape - Group","hd":false},{"ind":22,"ty":"sh","ix":23,"ks":{"a":0,"k":{"i":[[0.57,2.314],[-0.056,0.172],[0.164,0.476],[-0.134,0.038],[0.422,0.158],[-0.218,0.054],[0.11,0.108],[0.524,1.788],[0.134,0.124],[0.32,1.048],[0.882,1.68],[0.29,0.906],[0.336,0.65],[0.774,1.726],[0.25,0.336],[0.21,0.516],[0.376,0.258],[0.204,0.406],[0.108,0.148],[0.062,0.148],[0.142,-0.148],[0.094,0.352],[1.82,2.296],[0.234,0.524],[0.444,0.686],[0.694,1.188],[1.172,1.102],[0.204,0.446],[0.242,0.242],[-0.164,0.046],[0.296,0.172],[0.336,0.57],[0.844,1.078],[1.234,1.64],[-0.64,0.618],[0.602,1.764],[3.836,1.094],[0,0],[2.07,1.938],[0.102,-0.03],[0.562,0.29],[0.288,-0.078],[0.062,0.21],[1.054,1.196],[0.36,1.078],[0,0],[0,0],[-0.492,1.102],[1.118,0.952],[0.312,0.352],[1.148,0.352],[0,0],[0,0],[1.008,1.788],[0.234,0.07],[0.062,0.212],[0.312,0.008],[0.14,0.202],[0.288,-0.086],[0.492,0.108],[0.672,-0.024],[0.516,1.196],[0.306,0.282],[0.116,0.406],[0.414,0.798],[-0.07,1.228],[0.11,0.406],[-0.07,0.608],[0.054,1],[-0.022,0.9],[0.118,0.866],[-0.116,0.554],[0.062,-0.022],[0.046,0.922],[0.054,0.226],[-0.063,0.75],[0.116,1.186],[0.048,1.048],[0.188,0.938],[-0.07,0.234],[1.116,2.438],[0.664,1.438],[0.406,1.024],[0.272,0.274],[0.126,0.444],[0.258,0.116],[0.844,1.6],[0.172,0.008],[0.056,0.196],[1.5,0.78],[0.344,0.328],[1.328,-0.29],[0.1,0.056],[0.554,1.766],[0.594,1.296],[0.538,1.556],[0.64,0.86],[0.04,0.118],[0.25,-0.07],[-0.062,0.108],[2.046,1.086],[0.688,-0.188],[0.116,0.11],[0.664,-0.08],[0.194,0.086],[0.718,-0.024],[0.39,-0.562],[0.634,-0.272],[0.508,-0.374],[0.21,-0.054],[1.172,-1.196],[0.772,-1.882],[0.064,-0.102],[0.187,-0.656],[0.14,-0.038],[0.064,-0.46],[0.132,-0.444],[0.118,-0.93],[0.102,-0.686],[-0.164,-2.202],[0.008,-1.054],[-0.07,-0.624],[0.274,-0.202],[0.906,0.25],[0.148,-0.038],[1,0.054],[1.79,-0.5],[1.68,-0.968],[1.143,-3],[0.07,-0.094],[0.218,-0.624],[0.078,-0.1],[0.032,-2.75],[-3.944,-7.734],[-0.648,-0.704],[-1.172,-1.71],[-0.314,-0.398],[-0.124,-0.25],[-0.452,-0.476],[-0.038,-0.156],[-1.15,-1.462],[-0.296,-0.398],[-0.164,-0.054],[-0.014,-0.102],[-0.288,-0.226],[-0.358,-0.546],[-0.446,-0.148],[0.07,-0.124],[-2.118,-2.258],[-0.492,-0.656],[-0.086,-0.142],[-0.814,-0.812],[-2.532,-2.804],[-0.094,0.1],[0.024,-0.258],[-0.172,0.054],[0.054,-0.172],[-0.148,0.038],[-0.414,-0.438],[-1.828,-1.172],[-0.046,-0.156],[-0.874,-0.522],[-0.03,-0.134],[-0.288,-0.132],[-0.75,-0.656],[-0.124,0.04],[-0.156,-0.242],[-0.86,-0.61],[-0.664,-0.696],[0,0],[0,0],[-0.39,-1.398],[-1.828,-0.53],[0.134,-0.186],[-0.116,-0.774],[-1.172,-0.586],[0.11,-0.61],[-0.062,-0.228],[-0.014,-0.39],[-1.414,-0.29],[0.398,-1.406],[-0.906,-1.048],[-0.282,-0.32],[-3.462,0.58],[0,0],[0,0],[-0.242,-5.016],[-0.07,-1.36],[-0.118,-6.414],[0.188,-2.454],[-0.046,-0.546],[0.078,-0.344],[0.04,-1.07],[0.21,-3.382],[-0.046,-0.476],[0.078,-0.18],[-0.048,-1.204],[0.078,-0.188],[0.094,-1.814],[0.148,-1.134],[-0.304,-3.196],[-0.422,-0.57],[0.07,-0.118],[-0.812,-1.656],[-0.218,-0.062],[-0.734,-0.814],[-0.75,-0.422],[-0.39,-0.374],[-0.874,0.25],[-0.15,-0.086],[-0.102,0.014],[-0.484,0.022],[-0.242,0.204],[-0.828,0.266],[0.14,0.5],[-0.336,0.288],[0.078,0.328],[-0.484,0.626],[-0.196,0.548],[-0.28,0.484],[0.11,0.398],[-0.126,0.04],[-0.14,0.892],[-0.25,0.758],[-0.048,0.694],[-0.078,0.196],[0.078,0.874],[-0.126,0.4],[0.062,0.43],[-0.164,1.016],[0.14,2.524],[-0.078,0.352],[-0.086,0.992],[-0.07,0.15],[-0.822,-0.634],[-3.446,-7.532],[-0.524,-0.914],[-0.678,-1.304],[-0.562,-0.812],[-0.078,-0.274],[-0.156,-0.11],[-0.376,-0.54],[-0.36,0.102],[-0.062,-0.226],[-0.244,-0.022],[-0.164,-0.266],[-0.21,0.054],[-0.046,-0.172],[-0.382,0.11],[-0.462,-0.282],[-0.586,0.164],[-0.352,-0.204],[-3.836,1.118],[-0.936,0.774],[-0.124,0.038],[-0.298,0.484],[-0.14,0.038],[0.156,0.25],[-0.15,-0.038],[0.148,0.522],[-0.186,0.054],[-0.072,1.836],[-0.258,0.702],[0.056,0.906],[-0.062,0.304]],"o":[[-0.164,-0.686],[0.046,-0.18],[-0.172,-0.486],[0.344,-0.094],[-0.194,-0.078],[0.196,-0.054],[-0.118,-0.102],[-0.524,-1.79],[-0.132,-0.126],[-1,-3.266],[-0.47,-0.89],[-0.288,-0.914],[-0.726,-1.414],[-0.328,-0.726],[-0.25,-0.336],[-0.782,-1.922],[-0.21,-0.148],[-0.468,-0.952],[-0.056,-0.07],[-0.61,-1.408],[-0.102,0.11],[-0.148,-0.53],[-0.718,-0.908],[-0.132,-0.288],[-0.446,-0.688],[-2.712,-4.632],[-0.398,-0.374],[-0.202,-0.446],[-0.704,-0.726],[0.086,-0.024],[-0.296,-0.164],[-0.336,-0.57],[-1.296,-1.672],[0.938,-0.298],[1.29,-1.264],[-0.772,-2.274],[0.008,-0.008],[0.522,-1.468],[-0.43,-0.406],[-0.102,0.032],[-0.892,-0.454],[-0.384,0.11],[-0.038,-0.134],[-1.406,-1.602],[0,0],[0,0],[2.03,-0.664],[0.572,-1.266],[-0.414,-0.352],[-0.312,-0.344],[0,0],[0,0],[1.57,-1.696],[-0.374,-0.664],[-0.236,-0.064],[-0.054,-0.21],[-0.312,-0.016],[-0.148,-0.196],[-0.298,0.078],[-0.484,-0.11],[-1.18,0.038],[-0.304,-0.688],[-0.304,-0.274],[-0.118,-0.414],[-0.626,-1.226],[0.038,-0.804],[-0.116,-0.406],[0.078,-0.61],[-0.048,-0.992],[0.016,-0.898],[-0.108,-0.868],[0.118,-0.556],[-0.07,0.016],[-0.048,-0.922],[-0.056,-0.226],[0.063,-0.742],[-0.11,-1.18],[-0.046,-1.038],[-0.194,-0.93],[0.226,-0.782],[-0.564,-1.22],[-0.672,-1.43],[-0.398,-1.022],[-0.274,-0.282],[-0.124,-0.446],[-0.406,-0.18],[-0.108,-0.212],[-0.172,-0.006],[-0.202,-0.726],[-0.202,-0.102],[-0.772,-0.71],[-0.516,0.108],[-0.11,-0.054],[-3.353,-10.686],[-0.36,-0.79],[-1.158,-3.344],[-0.25,-0.336],[-0.242,-0.844],[-0.172,0.048],[0.314,-0.562],[-1.164,-0.618],[-0.264,0.078],[-0.118,-0.102],[-0.664,0.07],[-0.196,-0.086],[-1.586,0.07],[-0.156,0.218],[-0.64,0.266],[-0.508,0.376],[-0.438,0.124],[-1.024,1.04],[-0.336,0.828],[-0.062,0.094],[-0.188,0.664],[-0.14,0.04],[-0.062,0.462],[-0.142,0.446],[-0.108,0.92],[-0.344,2.25],[0.094,1.188],[-0.008,1.056],[0.274,2.446],[-0.156,0.118],[-0.906,-0.242],[-0.147,0.048],[-1.296,-0.064],[-2.5,0.696],[-1.828,1.048],[-0.452,1.18],[-0.064,0.102],[-0.22,0.634],[-0.344,0.47],[-0.07,5.572],[0.61,1.204],[0.352,0.374],[1.18,1.718],[0.312,0.398],[0.126,0.25],[0.462,0.484],[0.048,0.156],[1.148,1.468],[0.29,0.406],[0.164,0.054],[0.032,0.32],[0.158,0.124],[0.814,1.234],[0.187,0.064],[-0.108,0.204],[1.804,1.93],[0.296,0.408],[0.414,0.686],[1.484,1.484],[0.664,0.734],[0.1,-0.11],[-0.024,0.258],[0.178,-0.048],[-0.048,0.18],[0.148,-0.04],[0.828,0.86],[0.642,0.414],[0.048,0.156],[0.876,0.532],[0.04,0.132],[0.29,0.126],[0.758,0.656],[0.126,-0.03],[0.156,0.242],[0.858,0.608],[0,0],[0,0],[-1.678,3.186],[0.57,2.048],[0.39,0.11],[-0.758,1.072],[0.25,1.57],[0.914,0.444],[-0.07,0.382],[0.062,0.226],[0.056,1.164],[1.398,0.282],[-0.446,1.578],[0.414,0.484],[0.562,0.664],[0,0],[0,0],[0.922,3.858],[0.054,1.116],[0.142,2.86],[0.1,5.874],[-0.14,1.952],[0.016,0.156],[-0.086,0.352],[-0.03,1.064],[-0.212,3.384],[0.04,0.47],[-0.07,0.188],[0.046,1.202],[-0.078,0.18],[-0.094,1.804],[-0.422,3.304],[0.5,5.32],[0.226,0.312],[-0.172,0.304],[1.61,3.298],[0.124,0.04],[1.72,1.882],[0.328,0.18],[0.704,0.672],[0.25,-0.07],[0.14,0.078],[0.11,-0.016],[0.844,-0.048],[0.062,-0.054],[1.452,-0.46],[-0.032,-0.126],[0.9,-0.75],[-0.03,-0.148],[0.494,-0.624],[0.186,-0.538],[0.75,-1.32],[-0.054,-0.188],[0.124,-0.032],[0.14,-0.89],[0.25,-0.758],[0.046,-0.688],[0.242,-0.632],[-0.048,-0.462],[0.124,-0.39],[-0.064,-0.436],[0.274,-1.718],[-0.032,-0.562],[0.078,-0.344],[0.078,-1],[0.07,-0.148],[1.592,1.234],[1.648,3.602],[0.156,0.282],[0.68,1.314],[0.562,0.82],[0.07,0.266],[0.164,0.11],[1.264,1.858],[0.132,-0.038],[0.07,0.234],[0.242,0.024],[0.17,0.258],[0.22,-0.064],[0.11,0.4],[0.164,-0.038],[0.756,0.46],[0.134,-0.038],[1.39,0.788],[2.984,-0.866],[0.618,-0.508],[0.126,-0.032],[0.304,-0.492],[0.406,-0.118],[-0.086,-0.132],[0.39,0.118],[-0.062,-0.236],[0.578,-0.164],[0.008,-0.358],[0.266,-0.704],[-0.046,-0.906],[0.11,-0.562]],"v":[[93.195,114.903],[92.993,113.341],[92.781,112.147],[92.719,111.201],[90.523,104.075],[90.555,103.849],[90.711,103.553],[89.555,100.115],[88.359,96.639],[87.531,94.505],[84.571,86.701],[83.195,83.427],[82.055,80.583],[80.359,77.045],[79.305,75.123],[78.469,73.583],[76.351,69.591],[75.601,68.583],[74.743,66.959],[74.539,66.569],[70.773,60.279],[70.421,59.841],[67.437,55.569],[64.773,51.591],[63.727,49.819],[61.657,46.411],[55.687,37.607],[54.593,36.115],[53.797,34.865],[52.015,32.287],[51.633,31.935],[50.484,30.599],[48.343,27.599],[44.305,22.303],[46.687,20.919],[47.843,15.975],[40.993,10.639],[40.993,10.615],[37.329,2.529],[36.359,1.841],[35.149,1.365],[30.579,-0.089],[27.617,-0.791],[25.625,-3.221],[23.219,-6.869],[22.727,-8.331],[24.079,-8.761],[28.093,-11.557],[26.633,-17.455],[25.313,-18.729],[22.649,-20.003],[20.555,-20.651],[21.203,-21.353],[22.101,-26.853],[20.993,-28.181],[20.453,-28.675],[19.781,-29.073],[18.953,-29.455],[18.157,-29.659],[16.727,-29.705],[14.617,-29.861],[12.851,-31.065],[11.757,-32.815],[11.001,-34.057],[10.047,-36.253],[9.391,-39.159],[9.265,-41.361],[9.195,-43.205],[9.243,-46.135],[9.187,-49.581],[9.015,-52.783],[9.023,-55.369],[9.117,-56.339],[8.907,-57.979],[8.727,-60.065],[8.734,-61.839],[8.641,-65.353],[8.351,-69.401],[7.921,-72.995],[7.695,-75.111],[2.071,-95.369],[-0.163,-100.205],[-2.109,-104.675],[-3.335,-107.041],[-4.056,-108.353],[-4.743,-109.369],[-6.313,-111.611],[-6.821,-112.011],[-7.235,-112.377],[-13.329,-117.775],[-14.329,-118.557],[-20.719,-119.853],[-21.843,-119.761],[-23.039,-123.081],[-27.695,-137.221],[-29.335,-141.487],[-32.937,-149.917],[-33.461,-150.737],[-34.711,-152.667],[-34.907,-152.783],[-41.289,-158.853],[-45.829,-159.901],[-46.531,-159.963],[-47.953,-160.017],[-49.507,-160.041],[-51.171,-160.143],[-56.969,-158.299],[-58.407,-157.409],[-60.485,-156.245],[-61.789,-155.463],[-65.023,-152.807],[-68.085,-147.815],[-68.813,-146.135],[-69.266,-144.761],[-69.859,-143.487],[-70.235,-142.573],[-70.593,-140.925],[-71.063,-138.431],[-71.453,-135.503],[-71.703,-129.409],[-71.547,-125.323],[-71.437,-122.261],[-71.445,-116.901],[-73.383,-117.135],[-75.306,-117.503],[-77.392,-117.525],[-81.711,-116.925],[-86.399,-115.065],[-90.806,-109.057],[-91.749,-106.737],[-92.257,-105.417],[-92.789,-104.089],[-94.056,-93.417],[-88.321,-73.729],[-85.149,-68.931],[-82.383,-65.135],[-79.679,-61.291],[-78.883,-60.111],[-77.829,-58.791],[-76.915,-57.635],[-74.749,-54.697],[-72.133,-51.299],[-71.306,-50.463],[-70.985,-50.181],[-69.915,-48.377],[-68.985,-47.159],[-66.266,-44.175],[-66.063,-43.831],[-63.007,-40.081],[-60.203,-36.925],[-59.499,-35.931],[-55.757,-31.377],[-48.375,-23.495],[-46.999,-22.345],[-46.867,-22.065],[-46.593,-21.689],[-46.367,-21.455],[-46.195,-21.205],[-45.171,-20.487],[-41.391,-17.603],[-40.141,-16.565],[-38.469,-15.323],[-36.813,-14.119],[-36.219,-13.643],[-34.321,-12.221],[-32.719,-11.097],[-32.203,-10.721],[-30.351,-9.181],[-27.579,-6.807],[-26.359,-5.533],[-27.915,-2.603],[-29.891,4.403],[-26.297,8.263],[-25.883,8.739],[-27.047,12.115],[-24.055,16.647],[-23.125,17.865],[-23.141,18.975],[-22.993,20.099],[-19.945,23.115],[-18.875,24.919],[-18.101,29.311],[-16.835,30.779],[-11.171,30.903],[-9.203,30.583],[-8.711,32.655],[-6.461,49.873],[-6.235,54.373],[-5.929,65.053],[-6.023,74.959],[-6.306,82.263],[-6.421,83.177],[-6.641,85.747],[-7.085,93.833],[-7.391,100.849],[-7.453,102.037],[-7.499,104.561],[-7.555,107.091],[-7.867,110.717],[-8.305,116.061],[-8.625,133.857],[-7.461,141.263],[-7.171,142.037],[-5.453,147.341],[-2.453,152.857],[-0.883,154.397],[2.805,157.833],[4.117,158.849],[8.367,160.005],[9.079,160.037],[9.523,160.147],[10.585,160.069],[14.609,159.161],[16.227,158.583],[20.375,155.529],[20.929,154.787],[24.265,150.427],[25.085,149.021],[26.329,146.903],[27.179,145.045],[28.367,141.849],[28.501,141.435],[28.977,139.755],[29.679,136.763],[30.219,134.131],[30.437,132.521],[30.984,127.311],[31.133,125.747],[31.243,124.247],[31.421,121.607],[31.617,115.505],[31.711,113.857],[32.015,111.419],[32.297,109.333],[33.915,110.209],[38.711,118.553],[43.149,127.779],[44.679,130.669],[46.944,134.537],[48.109,136.521],[48.531,137.209],[49.501,138.397],[56.751,146.263],[57.101,146.615],[57.665,147.075],[58.415,147.599],[59.117,147.967],[59.601,148.161],[62.617,149.935],[63.751,150.365],[68.179,151.341],[69.063,151.639],[76.555,151.169],[81.273,149.201],[82.625,148.209],[83.399,147.263],[84.203,146.303],[86.711,142.591],[86.837,142.435],[89.867,137.225],[90.093,136.701],[93.157,127.239],[93.649,125.319],[94.023,122.389],[94.039,120.185]],"c":true},"ix":2},"nm":"Path 23","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[1155.859,191.979],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 3","np":24,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0.203,0.088],[0.057,0.077],[-0.282,-0.075]],"o":[[-0.057,-0.024],[0.242,0.128],[-0.169,-0.002]],"v":[[31.287,320.904],[31.117,320.745],[31.907,321.043]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ind":1,"ty":"sh","ix":2,"ks":{"a":0,"k":{"i":[[0.194,0.554],[-0.242,-0.416]],"o":[[0.224,0.424],[-0.285,-0.307]],"v":[[23.231,328.218],[23.922,329.48]],"c":true},"ix":2},"nm":"Path 2","mn":"ADBE Vector Shape - Group","hd":false},{"ind":2,"ty":"sh","ix":3,"ks":{"a":0,"k":{"i":[[0.144,-0.08],[0.051,0.097],[-0.039,-0.048]],"o":[[-0.017,-0.103],[0.156,0.035],[0.025,0.027]],"v":[[-41.97,300.447],[-42.076,300.148],[-41.761,300.275]],"c":true},"ix":2},"nm":"Path 3","mn":"ADBE Vector Shape - Group","hd":false},{"ind":3,"ty":"sh","ix":4,"ks":{"a":0,"k":{"i":[[0.02,-0.077],[0.102,0.099],[-0.102,-0.046]],"o":[[-0.09,-0.13],[0.119,0.03],[-0.021,0.076]],"v":[[16.139,274.725],[15.851,274.379],[16.193,274.482]],"c":true},"ix":2},"nm":"Path 4","mn":"ADBE Vector Shape - Group","hd":false},{"ind":4,"ty":"sh","ix":5,"ks":{"a":0,"k":{"i":[[-0.063,-0.027],[0.068,0.016]],"o":[[-0.066,-0.021],[0.066,0.02]],"v":[[25.051,268.088],[24.859,268.013]],"c":true},"ix":2},"nm":"Path 5","mn":"ADBE Vector Shape - Group","hd":false},{"ind":5,"ty":"sh","ix":6,"ks":{"a":0,"k":{"i":[[-0.206,-0.038],[0.224,-0.012]],"o":[[-0.214,-0.031],[0.234,-0.024]],"v":[[24.632,267.971],[23.972,267.951]],"c":true},"ix":2},"nm":"Path 6","mn":"ADBE Vector Shape - Group","hd":false},{"ind":6,"ty":"sh","ix":7,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0]],"o":[[0,0],[0,0],[0,0]],"v":[[-105.451,327.544],[-105.452,327.543],[-105.451,327.543]],"c":true},"ix":2},"nm":"Path 7","mn":"ADBE Vector Shape - Group","hd":false},{"ind":7,"ty":"sh","ix":8,"ks":{"a":0,"k":{"i":[[0.37,-0.079],[0.613,-0.146],[3.054,-0.651],[0.159,-0.1],[0.158,0.009],[1.322,-0.166],[0.875,0.798],[-1.302,0.655],[-5.077,0.823],[-1.173,0.103],[-1.869,0.211],[-1.503,0.028],[-0.495,0.08],[-0.039,-0.169]],"o":[[-0.354,0.071],[-3.196,0.802],[-4.5,0.962],[-0.078,0.048],[-0.165,-0.001],[-5.063,0.635],[-0.703,-0.639],[0.979,-0.494],[3.621,-0.593],[1.167,-0.104],[1.86,-0.212],[1.504,-0.03],[0.639,-0.105],[0.036,0.096]],"v":[[-62.857,307.874],[-64.606,308.284],[-78.331,311.485],[-84.986,312.996],[-85.404,313.07],[-88.097,313.359],[-96.119,313.141],[-95.387,311.561],[-87.53,309.853],[-78.811,308.591],[-73.29,308.02],[-67.171,307.583],[-63.544,307.385],[-62.378,307.586]],"c":true},"ix":2},"nm":"Path 8","mn":"ADBE Vector Shape - Group","hd":false},{"ind":8,"ty":"sh","ix":9,"ks":{"a":0,"k":{"i":[[-0.016,-0.066],[0.153,-0.022],[0.021,0.159],[-0.166,-0.072]],"o":[[0.008,0.071],[-0.152,0.032],[-0.031,-0.16],[0.174,0.067]],"v":[[-83.924,324.493],[-84.186,324.661],[-84.512,324.415],[-84.258,324.245]],"c":true},"ix":2},"nm":"Path 9","mn":"ADBE Vector Shape - Group","hd":false},{"ind":9,"ty":"sh","ix":10,"ks":{"a":0,"k":{"i":[[0.003,-0.032],[0,0],[0.224,-0.103],[0.009,0.071],[-0.184,-0.13]],"o":[[0,0],[-0.024,0.076],[-0.303,0.133],[-0.034,-0.193],[0.022,0.018]],"v":[[-81.275,323.744],[-81.283,323.743],[-81.685,324.038],[-82.255,324.159],[-81.3,323.679]],"c":true},"ix":2},"nm":"Path 10","mn":"ADBE Vector Shape - Group","hd":false},{"ind":10,"ty":"sh","ix":11,"ks":{"a":0,"k":{"i":[[4.714,-1.05],[0.232,-0.179],[0.088,0.063],[0.952,-0.386],[1.291,-0.32],[0.121,-0.104],[1.254,-0.354],[0.378,-0.228],[2.363,-0.945],[0.218,-0.126],[0.296,-0.134],[1.102,-0.527],[0.36,-0.135],[0.778,-0.529],[0.75,-0.345],[2.083,-1.413],[0.097,-0.022],[0.143,-0.228],[1.074,-0.443],[3.345,0.04],[0.233,-0.038],[0.322,0.018],[0.86,-0.028],[1.298,0.348],[1.076,0.287],[1.424,1.848],[-0.14,0.196],[0.02,0.708],[-0.583,0.316],[0.111,0.13],[-0.24,0.045],[-0.231,0.321],[-3.487,1.918],[-0.219,0.126],[-0.226,0.063],[0.112,0.138],[-0.707,0.161],[-0.438,0.205],[-1.06,0.21],[-0.23,0.179],[-0.524,0.077],[-4.371,0.849],[-13.549,2.057],[-4.389,0.501],[-5.577,0.432],[-2.797,0.356],[-0.069,-0.164]],"o":[[-1.673,0.372],[-0.23,0.181],[-0.089,-0.058],[-0.946,0.389],[-1.292,0.326],[-0.278,0.246],[-0.502,0.144],[-0.754,0.455],[-0.812,0.322],[-0.217,0.136],[-0.289,0.126],[-1.1,0.527],[-0.368,0.134],[-0.777,0.523],[-2.353,1.079],[-1.11,0.764],[-0.239,0.037],[-0.278,0.481],[-2.672,1.109],[-1.75,-0.02],[-0.23,0.03],[-0.32,-0.02],[-1.489,0.046],[-0.329,-0.089],[-2.21,-0.571],[-0.99,-1.267],[0.036,-0.058],[-0.034,-1.693],[0.258,-0.138],[-0.113,-0.129],[0.239,-0.037],[0.449,-0.612],[1.234,-0.68],[0.217,-0.134],[1.48,-0.403],[-0.076,-0.078],[0.709,-0.168],[0.446,-0.204],[1.058,-0.21],[0.232,-0.181],[0.528,-0.085],[8.75,-1.684],[10.433,-1.576],[2.869,-0.318],[1.719,-0.132],[3.766,-0.489],[0.067,0.188]],"v":[[-52.388,324.402],[-55.857,325.401],[-56.436,325.615],[-58.321,326.208],[-62.393,327.499],[-64.967,328.279],[-71.048,330.661],[-72.66,331.339],[-79.397,334.36],[-81.276,335.181],[-82.205,335.658],[-84.736,336.85],[-87.391,338.054],[-89.467,339.256],[-92.243,340.841],[-97.231,343.653],[-99.424,345.072],[-105.145,349.179],[-112.381,354.102],[-122.871,355.964],[-126.471,355.991],[-127.479,356.012],[-129.617,356.029],[-135.357,355.406],[-137.916,354.727],[-142.635,351.58],[-144.24,348.78],[-144.194,347.379],[-143.158,343.591],[-142.894,343.108],[-142.667,342.802],[-141.812,342.154],[-137.337,339.281],[-134.698,337.816],[-133.893,337.469],[-130.762,336.235],[-129.608,335.792],[-127.518,335.126],[-124.781,334.369],[-122.43,333.661],[-121.052,333.185],[-112.137,331.496],[-90.422,327.851],[-68.191,324.735],[-59.387,323.944],[-51.184,323.051],[-45.43,322.559]],"c":true},"ix":2},"nm":"Path 11","mn":"ADBE Vector Shape - Group","hd":false},{"ind":11,"ty":"sh","ix":12,"ks":{"a":0,"k":{"i":[[0.243,0.388],[0.694,-0.476],[0.214,-0.175],[0.185,-0.035],[1.066,-0.726],[0.071,-0.009],[0.897,-0.613],[2.193,-1.112],[0.5,-0.331],[0.661,-0.298],[1.318,-0.653],[2.031,-0.491],[1.292,-0.328],[1.603,-0.074],[1.943,0.795],[1.228,1.457],[-0.728,2.28],[-0.911,-0.074],[-0.402,0.231],[-1.474,0.339],[-0.824,0.283],[-0.405,0.255],[-0.222,0.087],[-1.337,0.551],[-1.642,0.581],[-1.633,0.644],[-1.216,0.374],[-0.358,0.135],[-0.676,0.212],[-0.282,0.214],[-0.036,-0.02],[-0.041,0.028],[-1.207,0.416],[-0.37,0.15],[-0.443,0.18],[-1.953,0.572],[-0.225,0.189],[-4.159,1.296],[-1.506,0.722],[-0.301,0.103],[-1.034,0.418],[-0.159,0.023],[-0.007,-0.009],[0.854,-0.585],[0.162,-0.258],[0.264,-0.042],[-0.023,-0.159],[0.193,-0.036],[0.659,-0.811],[0.128,-0.019],[0.771,-0.594],[1.815,-1.339],[-0.089,-0.723]],"o":[[-0.233,-0.387],[-0.425,0.293],[-0.663,0.549],[-0.096,0.014],[-1.061,0.736],[-0.074,0.014],[-0.896,0.605],[-2.191,1.112],[-0.498,0.339],[-0.66,0.308],[-3.192,1.579],[-0.912,0.219],[-1.381,0.357],[-2.422,0.104],[-2.287,-0.95],[-1.166,-1.372],[0.841,-2.661],[0.381,0.032],[0.401,-0.241],[1.482,-0.34],[2.624,-0.909],[0.209,-0.135],[0.22,-0.085],[1.331,-0.551],[2.766,-0.973],[0.367,-0.142],[1.218,-0.374],[0.368,-0.132],[0.682,-0.209],[0.282,-0.214],[0.046,0.021],[0.035,-0.021],[1.197,-0.406],[0.37,-0.15],[0.912,-0.366],[2.408,-0.711],[0.311,-0.281],[4.486,-1.404],[0.877,-0.418],[0.294,-0.102],[1.042,-0.425],[0.016,0.002],[0.056,0.133],[-0.612,0.422],[-0.242,0.367],[-0.151,0.024],[0.022,0.151],[-0.32,0.061],[-0.161,0.194],[-0.127,0.025],[-0.763,0.595],[-3.511,2.583],[0.053,0.392]],"v":[[-49.984,360.062],[-51.022,360.163],[-52.18,361.017],[-56.138,363.74],[-58.245,365.096],[-60.304,366.451],[-62.075,367.583],[-67.693,370.706],[-72.583,373.338],[-74.693,374.505],[-78.293,376.238],[-86.934,379.661],[-90.945,380.652],[-96.009,381.374],[-100.901,380.598],[-105.486,377.464],[-106.127,372.142],[-103.13,367.722],[-101.707,367.353],[-98.298,366.308],[-94.108,365.178],[-89.237,363.314],[-88.44,362.909],[-85.609,361.757],[-80.196,359.696],[-72.458,356.862],[-69.57,355.918],[-66.707,354.986],[-64.817,354.361],[-63.069,353.589],[-62.483,353.234],[-62.334,353.226],[-60.089,352.442],[-57.24,351.423],[-55.754,350.818],[-52.483,349.742],[-47.386,347.986],[-42.14,346.137],[-33.708,343.147],[-31.558,342.204],[-29.132,341.252],[-26.957,340.436],[-26.926,340.447],[-29.196,342.54],[-30.834,343.97],[-33.872,346.476],[-34.102,346.806],[-34.406,347.152],[-38.784,351.025],[-39.312,351.418],[-40.938,352.533],[-45.63,356.052],[-49.769,360.053]],"c":true},"ix":2},"nm":"Path 12","mn":"ADBE Vector Shape - Group","hd":false},{"ind":12,"ty":"sh","ix":13,"ks":{"a":0,"k":{"i":[[0.373,0.22],[-0.498,-0.319]],"o":[[0.228,0.107],[-0.378,-0.225]],"v":[[143.791,236.784],[144.919,237.452]],"c":true},"ix":2},"nm":"Path 13","mn":"ADBE Vector Shape - Group","hd":false},{"ind":13,"ty":"sh","ix":14,"ks":{"a":0,"k":{"i":[[-2.381,4.98],[-2.382,1.184],[-0.083,0.329],[-0.273,0.05],[-0.914,0.468],[-0.052,-0.158],[1.266,-1.058],[0.281,-0.362],[0.32,-0.061],[0.155,-0.267],[0.256,-0.043],[0.779,-1.002],[0.544,-0.397],[1.034,-1.085],[0.168,-0.031],[0.346,-0.45],[0.185,-0.035],[0.173,-0.233],[1.044,-0.879],[0.464,-0.524],[0.213,-0.183]],"o":[[1.976,-1.219],[3.509,-1.751],[0.03,-0.13],[0.278,-0.041],[1.376,-0.716],[0.033,0.168],[-0.921,0.765],[-0.683,0.879],[-0.145,0.017],[-0.288,0.497],[-0.159,0.021],[-0.299,0.377],[-0.545,0.399],[-1.041,1.077],[-0.168,0.028],[-0.354,0.457],[-0.182,0.029],[-0.167,0.226],[-1.042,0.873],[-0.272,0.299],[2.698,-4.958]],"v":[[37.463,276.947],[43.905,273.397],[51.353,269.084],[51.906,268.767],[54.07,267.833],[56.207,266.991],[54.358,268.815],[52.161,270.875],[49.305,273.527],[48.768,274.052],[46.154,276.643],[44.726,278.204],[43.184,279.62],[40.307,282.31],[38.108,284.324],[37.166,285.198],[36.192,286.085],[35.547,286.559],[33.345,288.573],[30.611,291.112],[29.856,291.856]],"c":true},"ix":2},"nm":"Path 14","mn":"ADBE Vector Shape - Group","hd":false},{"ind":14,"ty":"sh","ix":15,"ks":{"a":0,"k":{"i":[[0.701,-0.775],[3.673,-1.609],[0.109,0.012],[0.352,-0.206],[0.889,-0.244],[0.561,-0.184],[-0.334,1.911],[0.02,0.113],[0.02,0.631],[2.718,3.948],[3.551,0.9],[0.019,0.105],[-2.723,0.034],[-1.216,-0.231],[-1.316,-0.258],[-1.098,-1.067],[-0.404,-0.348],[-0.326,-1.621],[-0.011,-0.198],[0.584,-0.338],[-0.037,-0.239],[0.159,-0.021]],"o":[[-1.735,1.914],[-1.695,0.74],[-0.118,-0.012],[-0.352,0.208],[-0.882,0.245],[-1.186,0.377],[0.12,-0.679],[-0.02,-0.121],[-0.185,-7.459],[-1.607,-2.33],[-0.94,-0.242],[-0.054,-0.311],[1.354,-0.022],[1.218,0.237],[2.95,0.579],[0.457,0.44],[0.879,0.761],[0.054,0.227],[0.096,1.47],[-0.21,0.127],[0.038,0.231],[-0.16,0.029]],"v":[[146.327,261.928],[138.345,267.126],[135.056,268.451],[134.202,268.799],[131.948,269.615],[129.32,270.389],[128.369,268.672],[128.553,267.237],[128.492,265.879],[124.613,250.629],[117.135,245.935],[115.396,245.302],[129.227,243.545],[133.906,243.937],[138.508,244.839],[145.801,247.802],[147.36,249.246],[149.618,253.845],[149.706,254.492],[148.415,259.343],[148.102,260.002],[147.887,260.474]],"c":true},"ix":2},"nm":"Path 15","mn":"ADBE Vector Shape - Group","hd":false},{"ind":15,"ty":"sh","ix":16,"ks":{"a":0,"k":{"i":[[-0.046,-0.135],[0.007,0.046],[-0.375,0.324],[0.103,-0.149]],"o":[[-0.226,-0.061],[-0.015,-0.093],[-0.109,0.146],[0.008,0.179]],"v":[[103.273,300.591],[102.876,300.426],[103.494,299.722],[103.162,300.156]],"c":true},"ix":2},"nm":"Path 16","mn":"ADBE Vector Shape - Group","hd":false},{"ind":16,"ty":"sh","ix":17,"ks":{"a":0,"k":{"i":[[-2.114,0.382],[-8.474,2.499],[-1.267,0.683],[-2.977,-0.449],[-1.126,-0.111],[-0.489,-0.281],[-0.705,-0.028],[-0.256,-0.246],[-0.344,0.002],[-0.123,-0.091],[-0.297,0.047],[-0.516,-0.165],[-0.416,-0.004],[-0.072,-0.132],[-0.127,0.027],[-0.97,-0.259],[-0.21,-0.006],[-0.515,-0.266],[-1.478,-0.289],[-0.237,-0.363],[-0.144,0.025],[-0.603,-0.921],[-0.094,-0.442],[1.603,-1.198],[1.864,-0.165],[1.365,0.536],[0.164,0.009],[0.986,0.183],[0.562,0.029],[1.64,0.314],[0.726,0.117],[0.329,0.083],[1.347,0.104],[0.311,0.103],[1.533,0.2],[0.35,0.115],[1.485,0.141],[2.201,0.351],[1.817,0.192],[1.462,0.225],[0.966,0.07],[0.329,0.083],[1.609,0.154],[0.498,0.123]],"o":[[10.06,-1.829],[3.064,-0.901],[1.067,-0.587],[1.708,0.259],[2.462,0.26],[0.191,0.115],[1.547,0.069],[0.108,0.098],[0.347,-0.01],[0.124,0.084],[0.288,-0.048],[0.509,0.162],[0.424,0.005],[0.08,0.135],[0.121,-0.02],[0.978,0.262],[0.636,0.013],[0.559,0.288],[1.053,0.214],[0.075,0.11],[0.398,-0.058],[0.303,0.464],[0.283,1.333],[-0.724,0.537],[-4.878,0.45],[-0.174,-0.067],[-0.156,-0.003],[-0.977,-0.19],[-0.557,-0.019],[-1.632,-0.307],[-0.734,-0.116],[-0.33,-0.081],[-1.348,-0.11],[-0.311,-0.111],[-1.534,-0.21],[-0.339,-0.122],[-1.484,-0.149],[-6.729,-1.081],[-0.963,-0.102],[-1.461,-0.225],[-0.96,-0.069],[-0.33,-0.081],[-1.61,-0.162],[-0.854,-0.233]],"v":[[67.454,310.806],[89.22,305.722],[97.156,302.814],[101.373,302.67],[106.533,303.348],[112.508,304.436],[114.139,304.687],[120.341,305.751],[121.156,305.924],[122.012,306.077],[122.767,306.148],[124.229,306.359],[125.917,306.67],[126.818,306.922],[127.18,307.134],[129.168,307.571],[131.324,308.05],[136.182,309.224],[141.018,310.6],[145.324,312.517],[145.717,312.667],[148.657,315.178],[149.251,316.538],[147.272,320.327],[144.1,321.186],[132.248,321.017],[131.649,320.884],[129.574,320.538],[126.771,320.147],[122.781,319.538],[118.479,318.76],[116.546,318.406],[113.494,318.068],[110.47,317.686],[107.113,317.12],[103.693,316.537],[100.374,316.061],[93.675,315.156],[84.663,313.819],[80.247,313.226],[75.835,312.689],[73.484,312.408],[69.956,311.973],[66.121,311.451]],"c":true},"ix":2},"nm":"Path 17","mn":"ADBE Vector Shape - Group","hd":false},{"ind":17,"ty":"sh","ix":18,"ks":{"a":0,"k":{"i":[[4.706,-0.743],[0.397,-0.334],[1.705,-0.449],[2.812,-0.873],[0.995,-0.203],[0.988,-0.272],[0.911,-0.225],[1.449,-0.537],[1.081,-0.192],[1.12,-0.338],[0.074,0.046],[-0.287,0.048],[-1.077,1.051],[-0.102,0.013],[-0.774,1.01],[-0.266,0.137],[-0.265,0.34],[-0.479,0.358],[-0.412,0.624],[-0.966,0.801],[0.024,0.127],[-0.135,-0.055],[-0.602,0.574],[-0.128,0.017],[-1.016,0.703],[-0.571,0.364],[-0.377,0.298],[-0.114,0.034],[-1.294,0.718],[-4.659,1.032],[-3.183,-2.293],[-0.499,-2.718],[1.021,-3.412],[1.417,-1.507]],"o":[[-4.697,0.736],[-0.103,0.084],[-6.052,1.583],[-1.202,0.376],[-0.997,0.2],[-0.985,0.266],[-2.688,0.667],[-0.744,0.283],[-1.074,0.192],[-1.119,0.328],[-0.14,-0.101],[0.104,-0.013],[1.07,-1.049],[0.28,-0.049],[0.365,-0.486],[0.266,-0.137],[0.263,-0.342],[0.895,-0.667],[0.336,-0.499],[0.455,-0.368],[-0.018,-0.137],[0.138,0.053],[0.61,-0.563],[0.128,-0.027],[1.017,-0.701],[0.574,-0.372],[0.386,-0.305],[0.429,-0.12],[6.183,-3.433],[5.061,-1.13],[1.869,1.344],[0.507,2.779],[-0.766,2.566],[-0.682,0.73]],"v":[[105.031,276.236],[92.714,278.83],[89.421,279.803],[78.884,282.726],[74.885,283.781],[71.281,284.633],[67.834,285.526],[61.786,287.282],[58.475,288.142],[54.485,289.096],[52.319,289.605],[53.836,288.022],[55.973,286.086],[58.112,284.144],[61.961,280.277],[63.119,279.143],[64.075,278.278],[65.426,277.007],[68.243,274.218],[72.749,269.721],[73.529,268.814],[73.745,268.68],[75.101,267.745],[76.441,266.678],[78.519,265.357],[81.418,263.425],[83.149,262.218],[84.054,261.606],[86.125,260.6],[99.285,255.18],[111.264,256.878],[114.138,261.81],[113.519,269.372],[110.67,274.694]],"c":true},"ix":2},"nm":"Path 18","mn":"ADBE Vector Shape - Group","hd":false},{"ind":18,"ty":"sh","ix":19,"ks":{"a":0,"k":{"i":[[0.125,-0.044],[0.007,0.047],[-0.232,-0.26],[-0.015,-0.014]],"o":[[0.022,-0.055],[-0.042,-0.272],[0.014,0.015],[-0.126,0.044]],"v":[[48.217,293.663],[48.286,293.499],[48.546,293.488],[48.592,293.527]],"c":true},"ix":2},"nm":"Path 19","mn":"ADBE Vector Shape - Group","hd":false},{"ind":19,"ty":"sh","ix":20,"ks":{"a":0,"k":{"i":[[0.042,-0.09],[0.567,-0.38],[7.989,-1.545],[-2.124,0.709],[-1.303,0.287],[-3.965,1.168],[-0.94,0.049]],"o":[[-0.042,0.09],[-1.521,1.01],[-6.176,1.193],[0.49,-0.161],[2.503,-0.568],[3.663,-1.075],[0.411,-0.029]],"v":[[91.434,292.499],[90.547,293.16],[78.095,296.509],[72.302,297.194],[75.557,296.366],[83.409,294.259],[90.859,292.438]],"c":true},"ix":2},"nm":"Path 20","mn":"ADBE Vector Shape - Group","hd":false},{"ind":20,"ty":"sh","ix":21,"ks":{"a":0,"k":{"i":[[-1,0.17],[-0.404,0.247],[-0.487,0.154],[0,0],[0,0],[2.126,-0.552],[0.121,-0.098],[0.167,0.442],[0.153,0.417]],"o":[[0.432,-0.073],[0.41,-0.24],[0,0],[0,0],[0.331,1.93],[-0.878,0.223],[-0.114,0.107],[-0.171,-0.451],[-0.343,-0.923]],"v":[[-0.81,299.473],[0.704,298.903],[2.327,298.178],[3.223,297.889],[3.47,299.415],[1.281,302.428],[-0.526,303.023],[-1.042,302.403],[-1.629,300.825]],"c":true},"ix":2},"nm":"Path 21","mn":"ADBE Vector Shape - Group","hd":false},{"ind":21,"ty":"sh","ix":22,"ks":{"a":0,"k":{"i":[[-0.029,0.484],[0.178,0.262],[0.178,0.851],[0.512,-0.087],[0.251,0.364],[0.334,-0.043],[0.572,0.547],[0.524,0.252],[0.452,0.329],[0.407,-0.068],[0.026,0.13],[0.873,0.233],[0.728,0.328],[0.686,0.121],[0.187,0.098],[0.877,0.014],[0.385,0.167],[0.435,-0.016],[0.993,0.27],[2.524,0.126],[0.342,0.115],[0.978,0.19],[0.142,0.085],[-0.717,0.751],[-7.853,2.635],[-0.964,0.425],[-1.368,0.537],[-0.867,0.474],[-0.281,0.049],[-0.125,0.144],[-0.577,0.317],[0.063,0.369],[-0.231,0.038],[-0.047,0.24],[-0.282,0.135],[0.032,0.214],[-0.176,0.028],[0.069,0.391],[-0.329,0.43],[0.102,0.6],[-0.24,0.329],[0.708,3.932],[0.671,1.012],[0.025,0.127],[0.45,0.347],[0.023,0.143],[0.265,-0.129],[-0.053,0.145],[0.535,-0.092],[0.034,0.191],[1.818,0.265],[0.671,0.33],[0.907,0.04],[0.296,0.094],[2.361,-0.324],[0.165,0.074],[0.491,-0.113],[0.023,0.137],[0.202,-0.403],[0.03,0.222],[0.119,-0.098],[1.833,-0.333],[0.138,-0.12],[1.076,-0.208],[1.763,-0.701],[0.932,-0.193],[0.682,-0.266],[1.798,-0.588],[0.36,-0.213],[0.535,-0.155],[0.296,-0.347],[0.425,-0.16],[0.159,-0.092],[0.154,-0.046],[-0.132,-0.157],[0.36,-0.057],[2.475,-1.569],[0.545,-0.177],[0.729,-0.37],[1.254,-0.565],[1.219,-1.05],[0.254,-0.154],[21.038,102.638],[-0.178,56.098],[-38.103,48.546],[0.521,0.417],[0,0],[0.417,-0.523],[5.726,-42.5],[0.052,-14.475],[-12.516,-61.068],[48.006,-103.866],[0.199,0.255],[1.817,-0.413],[1.491,-3.7],[0,0],[2.145,-1.855],[-0.019,-0.104],[0.348,-0.528],[-0.047,-0.295],[0.215,-0.04],[1.3,-0.922],[1.11,-0.245],[0,0],[0,0],[1.044,0.605],[1.064,-1.012],[0.383,-0.273],[0.471,-1.105],[0,0],[0,0],[1.884,-0.814],[0.094,-0.225],[0.218,-0.039],[0.041,-0.309],[0.215,-0.118],[-0.055,-0.295],[0.159,-0.478],[0.046,-0.671],[1.244,-0.387],[0.312,-0.275],[0.416,-0.073],[0.837,-0.328],[1.214,0.199],[0.416,-0.067],[0.598,0.134],[1.001,0.051],[0.893,0.116],[0.874,-0.026],[0.539,0.174],[-0.015,-0.064],[0.921,0.051],[0.23,-0.03],[0.739,0.142],[1.192,0.009],[1.047,0.062],[0.953,-0.088],[0.226,0.094],[2.542,-0.854],[1.5,-0.509],[1.061,-0.296],[0.301,-0.242],[0.455,-0.079],[0.143,-0.245],[1.68,-0.671],[0.026,-0.17],[0.201,-0.035],[0.934,-1.41],[0.362,-0.308],[-0.149,-1.351],[0.066,-0.094],[1.814,-0.365],[1.352,-0.454],[1.604,-0.371],[0.922,-0.546],[0.122,-0.027],[-0.043,-0.256],[0.101,0.073],[1.295,-1.92],[-0.115,-0.704],[0.122,-0.104],[-0.01,-0.669],[0.106,-0.184],[0.052,-0.717],[-0.518,-0.447],[-0.204,-0.659],[-0.318,-0.545],[-0.031,-0.214],[-1.066,-1.291],[-1.791,-0.966],[-0.095,-0.074],[-0.633,-0.254],[-0.023,-0.143],[-0.45,-0.112],[-0.428,-0.178],[-0.912,-0.215],[-0.672,-0.174],[-2.207,-0.068],[-1.047,-0.119],[-0.628,0.004],[-0.172,-0.294],[0.344,-0.875],[-0.022,-0.151],[0.159,-0.989],[-0.309,-1.833],[-0.786,-1.772],[-2.864,-1.451],[-0.086,-0.079],[-0.598,-0.282],[-0.091,-0.088],[-2.731,-0.321],[-8.105,3.109],[-0.768,0.57],[-1.824,0.986],[-0.429,0.271],[-0.262,0.097],[-0.521,0.399],[-0.159,0.021],[-1.575,0.99],[-0.427,0.253],[-0.071,0.157],[-0.103,0.003],[-0.255,0.263],[-0.581,0.299],[-0.194,0.428],[-0.116,-0.083],[-2.468,1.869],[-0.704,0.42],[-0.15,0.071],[-0.893,0.724],[-3.055,2.223],[0.089,0.104],[-0.254,-0.051],[0.036,0.177],[-0.165,-0.072],[0.022,0.151],[-0.479,0.366],[-1.357,1.695],[-0.16,0.029],[-0.611,0.814],[-0.137,0.016],[-0.162,0.272],[-0.731,0.677],[0.027,0.127],[-0.257,0.13],[-0.697,0.791],[-0.762,0.587],[0,0],[0,0],[-1.431,0.241],[-0.719,1.762],[-0.171,-0.153],[-0.782,0.034],[-0.706,1.104],[-0.595,-0.174],[-0.233,0.038],[-0.389,-0.027],[-0.437,1.376],[-1.356,-0.544],[-1.137,0.791],[-0.348,0.247],[0.213,3.504],[0,0],[0,0],[-5.014,-0.287],[-1.36,-0.073],[-6.391,-0.557],[-2.421,-0.445],[-0.548,-0.012],[-0.334,-0.114],[-1.06,-0.152],[-3.341,-0.564],[-0.479,-0.004],[-0.171,-0.097],[-1.203,-0.079],[-0.179,-0.097],[-1.794,-0.284],[-1.112,-0.266],[-3.21,-0.034],[-0.611,0.36],[-0.11,-0.082],[-1.732,0.634],[-0.084,0.21],[-0.887,0.644],[-0.499,0.701],[-0.413,0.349],[0.157,0.895],[-0.101,0.14],[0.003,0.103]],"o":[[0.041,-0.844],[-0.047,-0.067],[-0.305,-1.492],[-0.129,0.019],[-0.651,-0.974],[-0.15,0.014],[-0.569,-0.557],[-0.515,-0.242],[-1.234,-0.885],[-0.193,0.034],[-0.019,-0.127],[-0.87,-0.233],[-0.728,-0.328],[-0.679,-0.118],[-0.603,-0.307],[-0.464,-0.001],[-0.375,-0.164],[-0.44,0.018],[-1.68,-0.453],[-0.562,-0.027],[-0.333,-0.114],[-0.986,-0.183],[-0.14,-0.085],[1.395,-1.453],[3.755,-1.26],[0.297,-0.125],[1.378,-0.538],[0.875,-0.473],[0.271,-0.042],[0.127,-0.152],[1.98,-1.062],[-0.024,-0.135],[0.24,-0.045],[0.049,-0.238],[0.274,-0.142],[-0.041,-0.226],[0.409,-0.067],[-0.021,-0.167],[0.537,-0.703],[-0.023,-0.137],[0.93,-1.299],[-0.547,-3.059],[-0.44,-0.668],[-0.019,-0.129],[-0.457,-0.354],[-0.075,-0.416],[-0.141,0.072],[0.159,-0.375],[-0.241,0.037],[-0.102,-0.592],[-0.355,-0.046],[-0.672,-0.339],[-0.906,-0.049],[-0.547,-0.168],[-0.7,0.091],[-0.174,-0.065],[-0.501,0.12],[-0.057,-0.352],[-0.098,0.185],[-0.033,-0.201],[-0.114,0.107],[-1.835,0.333],[-0.139,0.118],[-3.353,0.651],[-0.935,0.374],[-0.939,0.19],[-1.482,0.573],[-0.756,0.25],[-0.361,0.213],[-1.993,0.576],[-0.169,0.193],[-0.996,0.365],[-0.075,0.048],[-1.464,0.459],[0.099,0.113],[-0.543,0.091],[-0.979,0.619],[-0.3,0.101],[-0.731,0.371],[-4.891,2.21],[-0.183,0.157],[42.487,-103.73],[-12.527,-61.117],[0.188,-56.103],[0.409,-0.522],[0,0],[-0.522,-0.409],[-29.933,38.135],[-1.906,14.168],[-0.19,57.909],[21.88,106.728],[-0.154,-0.293],[-1.122,-1.416],[-2.343,0.529],[-0.007,-0.009],[-1.405,-0.673],[-0.449,0.385],[0.021,0.105],[-0.553,0.839],[0.069,0.393],[-0.137,0.024],[-1.741,1.23],[0,0],[0,0],[-0.447,-2.089],[-1.199,-0.702],[-0.394,0.375],[-0.375,0.274],[0,0],[0,0],[-1.521,-1.74],[-0.7,0.302],[-0.088,0.228],[-0.214,0.031],[-0.048,0.309],[-0.21,0.127],[0.046,0.305],[-0.161,0.47],[-0.086,1.177],[-0.716,0.23],[-0.305,0.274],[-0.424,0.074],[-1.285,0.494],[-0.795,-0.122],[-0.416,0.073],[-0.598,-0.142],[-0.992,-0.057],[-0.892,-0.11],[-0.874,0.016],[-0.541,-0.176],[0.009,0.071],[-0.922,-0.049],[-0.231,0.032],[-0.731,-0.14],[-1.185,-0.015],[-1.037,-0.063],[-0.945,0.095],[-0.754,-0.307],[-1.273,0.433],[-1.492,0.518],[-1.059,0.288],[-0.309,0.243],[-0.457,0.076],[-0.222,0.385],[-0.222,0.085],[-0.024,0.17],[-0.743,0.125],[-0.123,0.19],[-0.787,0.693],[0.053,0.525],[-0.065,0.104],[-10.979,2.21],[-0.823,0.275],[-3.447,0.8],[-0.36,0.213],[-0.865,0.152],[0.03,0.176],[-0.526,-0.371],[-0.737,1.093],[0.05,0.271],[-0.114,0.107],[0,0.668],[-0.106,0.186],[-0.097,1.585],[0.2,0.178],[0.197,0.664],[0.321,0.545],[0.077,0.449],[0.927,1.128],[0.788,0.421],[0.087,0.071],[0.641,0.257],[0.025,0.143],[0.453,0.11],[0.429,0.188],[0.903,0.204],[2.201,0.579],[1.191,0.031],[1.049,0.119],[2.461,-0.015],[0.101,0.168],[-0.336,0.875],[0.032,0.152],[-0.2,1.282],[0.43,2.559],[0.85,1.928],[1.126,0.573],[0.095,0.074],[0.607,0.285],[0.431,0.391],[5.534,0.655],[1.262,-0.48],[0.409,-0.311],[1.833,-0.993],[0.429,-0.268],[0.262,-0.099],[0.53,-0.409],[0.16,-0.031],[1.581,-0.987],[0.434,-0.246],[0.071,-0.157],[0.321,0.002],[0.14,-0.144],[1.312,-0.68],[0.083,-0.178],[0.191,0.129],[2.109,-1.591],[0.437,-0.251],[0.726,-0.34],[1.632,-1.32],[0.8,-0.583],[-0.099,-0.111],[0.254,0.051],[-0.029,-0.182],[0.174,0.067],[-0.024,-0.151],[0.942,-0.733],[0.479,-0.595],[0.16,-0.031],[0.621,-0.815],[0.135,-0.026],[0.156,-0.275],[0.732,-0.685],[-0.017,-0.129],[0.257,-0.13],[0.695,-0.789],[0,0],[0,0],[2.992,2.004],[2.096,-0.351],[0.15,-0.376],[0.986,0.866],[1.587,-0.083],[0.538,-0.862],[0.373,0.11],[0.231,-0.038],[1.164,0.067],[0.427,-1.36],[1.522,0.609],[0.525,-0.361],[0.72,-0.489],[0,0],[0,0],[3.934,-0.511],[1.115,0.064],[2.859,0.16],[5.853,0.518],[1.926,0.344],[0.157,0],[0.341,0.123],[1.055,0.142],[3.343,0.567],[0.472,0.01],[0.18,0.089],[1.2,0.081],[0.17,0.096],[1.784,0.283],[3.241,0.767],[5.343,0.062],[0.334,-0.192],[0.284,0.203],[3.449,-1.254],[0.053,-0.119],[2.052,-1.513],[0.213,-0.307],[0.742,-0.629],[-0.043,-0.256],[0.092,-0.131],[-0.004,-0.111]],"v":[[162.467,317.786],[161.987,313.689],[161.582,312.019],[158.982,307.573],[158.302,306.944],[154.317,303.168],[153.005,302.205],[151.029,300.745],[149.271,299.705],[146.218,298.187],[145.82,298.011],[144.199,297.361],[141.298,296.348],[138.737,295.534],[137.159,295.148],[132.035,294.056],[130.495,293.744],[129.015,293.477],[126.409,293.022],[120.361,292.186],[118.732,291.919],[116.339,291.361],[114.295,290.861],[115.336,289.344],[124.138,285.452],[133.779,282.008],[136.814,280.79],[140.899,278.944],[142.994,277.995],[143.723,277.647],[145.006,276.808],[153.591,270.424],[153.977,270.113],[154.494,269.601],[155.094,268.91],[155.534,268.251],[155.778,267.79],[157.859,264.977],[158.406,263.894],[159.842,259.594],[160.231,258.746],[160.551,251.246],[159.09,246.347],[158.245,244.898],[157.386,244.029],[156.516,243.129],[153.088,240.245],[152.946,240.103],[148.084,236.542],[147.586,236.262],[138.499,232.22],[136.641,231.529],[133.767,230.849],[131.577,230.602],[126.235,230.886],[124.661,230.923],[123.451,231.008],[122.504,230.97],[115.186,232.405],[114.965,232.349],[114.687,232.163],[111.147,232.951],[107.564,233.775],[105.355,234.374],[97.283,236.498],[93.882,237.522],[90.934,238.357],[87.238,239.671],[85.216,240.517],[83.596,241.187],[79.404,242.874],[78.323,243.513],[76.617,244.196],[76.208,244.358],[69.557,247.442],[69.084,247.746],[64.522,250.264],[60.286,252.495],[58.414,253.349],[54.807,255.05],[45.425,260.061],[44.743,260.54],[45.302,-53.612],[20.389,-230.336],[71.373,-387.511],[71.175,-389.197],[63.622,-395.118],[61.935,-394.918],[11.221,-273.366],[8.391,-230.377],[33.546,-51.202],[28.389,268.101],[27.883,267.257],[23.088,265.588],[17.061,271.839],[17.037,271.836],[8.611,274.63],[7.825,275.522],[7.224,276.676],[5.298,281.067],[4.289,283.939],[1.663,285.665],[-2.218,287.674],[-3.723,288.01],[-4.009,286.62],[-6.367,282.334],[-12.386,283.166],[-13.792,284.345],[-15.339,286.86],[-16.203,288.875],[-16.834,288.156],[-22.209,286.685],[-23.646,287.647],[-24.194,288.133],[-24.66,288.759],[-25.127,289.542],[-25.414,290.312],[-25.61,291.73],[-25.986,293.812],[-27.37,295.441],[-29.225,296.345],[-30.54,296.966],[-32.824,297.684],[-35.782,298.031],[-37.985,297.925],[-39.827,297.801],[-42.736,297.445],[-46.168,297.139],[-49.371,296.973],[-51.941,296.693],[-52.896,296.498],[-54.549,296.534],[-56.642,296.494],[-58.406,296.299],[-61.91,296.024],[-65.966,295.887],[-69.586,295.936],[-71.714,295.939],[-92.45,299.402],[-97.495,301.115],[-102.144,302.581],[-104.626,303.551],[-106.006,304.129],[-107.089,304.707],[-109.484,306.032],[-109.935,306.495],[-110.342,306.869],[-116.351,312.361],[-117.234,313.274],[-119.194,319.492],[-119.221,320.62],[-122.649,321.46],[-137.2,324.604],[-141.614,325.786],[-150.376,328.482],[-151.247,328.917],[-153.298,329.957],[-153.433,330.14],[-160.141,335.849],[-161.66,340.253],[-161.796,340.945],[-161.999,342.353],[-162.186,343.896],[-162.463,345.54],[-161.238,351.5],[-160.504,353.024],[-159.565,355.212],[-158.924,356.591],[-156.623,360.087],[-151.981,363.656],[-150.386,364.557],[-149.068,365.151],[-147.863,365.876],[-146.994,366.345],[-145.392,366.875],[-142.962,367.604],[-140.09,368.3],[-134.057,369.189],[-129.977,369.464],[-126.921,369.676],[-121.591,370.247],[-122.027,372.15],[-122.595,374.023],[-122.837,376.095],[-122.694,380.454],[-121.337,385.311],[-115.825,390.325],[-113.618,391.507],[-112.358,392.151],[-111.093,392.82],[-100.614,395.201],[-80.432,391.568],[-75.327,388.918],[-71.261,386.566],[-67.155,384.281],[-65.898,383.614],[-64.474,382.704],[-63.228,381.917],[-60.079,380.072],[-56.424,377.827],[-55.506,377.092],[-55.192,376.803],[-53.286,375.929],[-51.977,375.132],[-48.723,372.741],[-48.36,372.576],[-44.31,369.931],[-40.877,367.474],[-39.814,366.879],[-34.892,363.636],[-26.277,357.124],[-24.989,355.876],[-24.697,355.774],[-24.294,355.541],[-24.038,355.341],[-23.771,355.196],[-22.949,354.254],[-19.684,350.798],[-18.52,349.664],[-17.11,348.132],[-15.738,346.611],[-15.202,346.071],[-13.589,344.333],[-12.302,342.858],[-11.874,342.384],[-10.148,340.704],[-7.496,338.197],[-6.101,337.118],[-3.35,338.973],[3.409,341.675],[7.625,338.506],[8.142,338.145],[11.377,339.657],[16.199,337.158],[17.508,336.361],[18.61,336.494],[19.743,336.465],[23.063,333.751],[24.969,332.876],[29.418,332.568],[31.011,331.464],[31.73,325.844],[31.619,323.853],[33.731,323.582],[51.09,323.154],[55.589,323.402],[66.242,324.221],[76.083,325.355],[83.317,326.404],[84.214,326.615],[86.746,327.104],[94.741,328.396],[101.686,329.437],[102.861,329.624],[105.366,329.935],[107.876,330.257],[111.449,330.948],[116.718,331.945],[134.381,334.134],[141.869,333.755],[142.669,333.548],[148.124,332.397],[153.925,329.994],[155.621,328.594],[159.426,325.288],[160.574,324.09],[162.17,319.985],[162.277,319.28],[162.433,318.85]],"c":true},"ix":2},"nm":"Path 22","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[1890.47,484.624],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 4","np":23,"cix":2,"bm":0,"ix":3,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[2.29,26.648],[0,0.016],[0.656,-0.016],[0.022,0],[0,0],[-0.062,-0.664],[4.204,-7.366],[8.4,-6.32],[23.228,-19.96],[3.978,-33.04],[-0.054,-33.602],[46.006,-27.538],[33.398,0.72],[5.758,0.328],[9.062,0.288],[25.398,-1.696],[31.666,-30.962],[2.196,-26.952],[-14.382,-22.538],[-0.86,-55.142],[20.046,-44.204],[0.43,-50.078],[-0.656,-0.008],[0,0],[0,0.664],[-19.922,43.938],[0.484,30.796],[27.546,43.164],[-1.9,23.43],[-32.868,32.148],[-49.75,3.336],[-17.86,-0.564],[-3.634,0.054],[-49.282,29.508],[0.164,109.61],[-3.828,31.834],[-16.702,14.352],[-18.132,13.64]],"o":[[-0.008,-0.016],[-0.016,-0.656],[-0.024,0],[0,0],[-0.664,0.062],[1,11.438],[-4.21,7.368],[-16.788,12.618],[-20.43,17.554],[-3.976,33.04],[0.148,106.82],[-45.994,27.54],[-1.782,0.11],[-5.758,-0.336],[-18.118,-0.57],[-50.79,3.398],[-34.062,33.32],[-2.187,26.946],[28.758,45.048],[0.39,25.218],[-20.048,44.21],[-0.008,0.664],[0,0],[0.656,0],[0.406,-46.946],[19.914,-43.92],[-0.946,-61.024],[-13.782,-21.586],[1.906,-23.422],[27.438,-26.836],[24.876,-1.664],[17.86,0.562],[33.976,-0.492],[49.296,-29.508],[-0.046,-33.75],[3.836,-31.83],[21.962,-18.874],[18.134,-13.634]],"v":[[322.693,-546.609],[322.684,-546.649],[321.458,-547.813],[321.388,-547.805],[312.302,-547.015],[311.209,-545.711],[306.098,-518.313],[286.926,-498.453],[222.926,-453.875],[189.919,-373.789],[186.77,-270.109],[102.904,-82.579],[-31.44,-54.313],[-41.745,-54.921],[-64.362,-55.937],[-131.674,-54.945],[-271.504,-10.421],[-322.667,79.007],[-299.902,152.343],[-226.619,293.813],[-265.431,402.415],[-306.541,546.523],[-305.354,547.735],[-296.23,547.813],[-295.026,546.617],[-254.931,407.171],[-215.104,293.641],[-290.19,146.141],[-311.181,79.937],[-263.448,-2.179],[-130.902,-43.453],[-64.721,-44.421],[-31.69,-42.797],[108.819,-72.695],[198.286,-270.133],[201.348,-372.413],[230.434,-445.141],[293.848,-489.249]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[242.954,595.813],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 5","np":2,"cix":2,"bm":0,"ix":4,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-65.458],[65.458,0],[0,65.458],[-65.458,0]],"o":[[0,65.458],[-65.458,0],[0,-65.458],[65.458,0]],"v":[[118.522,0],[0,118.522],[-118.522,0],[0,-118.522]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[94.677,276.478],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 6","np":2,"cix":2,"bm":0,"ix":5,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-55.804],[55.804,0],[0,55.804],[-55.804,0]],"o":[[0,55.804],[-55.804,0],[0,-55.804],[55.804,0]],"v":[[101.042,0],[0,101.042],[-101.042,0],[0,-101.042]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[1578.958,42.958],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 7","np":2,"cix":2,"bm":0,"ix":6,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-55.804],[55.804,0],[0,55.804],[-55.804,0]],"o":[[0,55.804],[-55.804,0],[0,-55.804],[55.804,0]],"v":[[101.042,0],[0,101.042],[-101.042,0],[0,-101.042]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[510.658,36.478],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 8","np":2,"cix":2,"bm":0,"ix":7,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-80.268],[80.268,0],[0,80.268],[-80.268,0]],"o":[[0,80.268],[-80.268,0],[0,-80.268],[80.268,0]],"v":[[145.338,0],[0,145.338],[-145.338,0],[0,-145.338]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[1295.658,59.957],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 9","np":2,"cix":2,"bm":0,"ix":8,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-60.574],[60.574,0],[0,60.574],[-60.574,0]],"o":[[0,60.574],[-60.574,0],[0,-60.574],[60.574,0]],"v":[[109.68,0],[0,109.68],[-109.68,0],[0,-109.68]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[1140.259,60.32],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 10","np":2,"cix":2,"bm":0,"ix":9,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-114.474],[114.474,0],[0,114.474],[-114.474,0]],"o":[[0,114.474],[-114.474,0],[0,-114.474],[114.474,0]],"v":[[207.274,0],[0,207.274],[-207.274,0],[0,-207.274]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[961.692,36.478],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 11","np":2,"cix":2,"bm":0,"ix":10,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-89.276],[89.276,0],[0,89.276],[-89.276,0]],"o":[[0,89.276],[-89.276,0],[0,-89.276],[89.276,0]],"v":[[161.648,0],[0,161.648],[-161.648,0],[0,-161.648]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[463.912,133.978],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 12","np":2,"cix":2,"bm":0,"ix":11,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-10.613],[10.613,0],[0,10.613],[-10.613,0]],"o":[[0,10.613],[-10.613,0],[0,-10.613],[10.613,0]],"v":[[19.216,0],[0,19.216],[-19.216,0],[0,-19.216]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[730.784,267.527],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 13","np":2,"cix":2,"bm":0,"ix":12,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-18.665],[18.665,0],[0,18.665],[-18.665,0]],"o":[[0,18.665],[-18.665,0],[0,-18.665],[18.665,0]],"v":[[33.797,0],[0,33.797],[-33.797,0],[0,-33.797]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[707.012,293.727],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 14","np":2,"cix":2,"bm":0,"ix":13,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-20.377],[20.377,0],[0,20.377],[-20.377,0]],"o":[[0,20.377],[-20.377,0],[0,-20.377],[20.377,0]],"v":[[36.896,0],[0,36.896],[-36.896,0],[0,-36.896]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[289.739,421.185],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 15","np":2,"cix":2,"bm":0,"ix":14,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-28.818],[28.818,0],[0,28.818],[-28.818,0]],"o":[[0,28.818],[-28.818,0],[0,-28.818],[28.818,0]],"v":[[52.179,0],[0,52.179],[-52.179,0],[0,-52.179]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[1440.996,257.474],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 16","np":2,"cix":2,"bm":0,"ix":15,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-77.711],[77.711,0],[0,77.711],[-77.711,0]],"o":[[0,77.711],[-77.711,0],[0,-77.711],[77.711,0]],"v":[[140.708,0],[0,140.708],[-140.708,0],[0,-140.708]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[1699.939,177.186],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 17","np":2,"cix":2,"bm":0,"ix":16,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-172.466],[172.466,0],[0,172.466],[-172.466,0]],"o":[[0,172.466],[-172.466,0],[0,-172.466],[172.466,0]],"v":[[312.277,0],[0,312.277],[-312.277,0],[0,-312.277]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[1949.721,82.723],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 18","np":2,"cix":2,"bm":0,"ix":17,"mn":"ADBE Vector Group","hd":false},{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,-146.926],[146.926,0],[0,146.926],[-146.926,0]],"o":[[0,146.926],[-146.926,0],[0,-146.926],[146.926,0]],"v":[[266.033,0],[0,266.033],[-266.033,0],[0,-266.033]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[244.625,70.99],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 19","np":2,"cix":2,"bm":0,"ix":18,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2000,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"prise3","parent":3,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":1,"k":[{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.475],"y":[0]},"t":30,"s":[-29]},{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.5],"y":[0]},"t":112,"s":[43]},{"t":185,"s":[-29]}],"ix":10},"p":{"a":0,"k":[52.243,43.367,0],"ix":2,"l":2},"a":{"a":0,"k":[0,-72.35,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0.25,-0.64],[-0.048,-1.078],[0.304,-2.876],[0.094,-2.07],[0.594,-6.484],[0,0],[12.038,-16.078],[0,0],[0,0],[-0.102,-1.766],[-0.521,-0.774],[-0.43,-0.164],[-0.57,-0.016],[-2.07,0.102],[0,0],[0,0],[-0.164,-3.054],[-0.118,-3.704],[-0.164,-2.556],[-0.08,-0.766],[-2.758,1.508],[-0.468,2.008],[0.264,5.118],[-0.11,3.868],[0,0],[0,0],[-1.696,-0.024],[-0.18,-0.092],[-0.132,-0.312],[-0.032,-0.266],[-0.04,-0.446],[-0.07,-1.438],[-0.062,-4.022],[-0.118,-2.938],[-0.056,-0.93],[-0.086,-0.32],[-1.312,-0.664],[-1.194,0.366],[-0.976,0.992],[0.188,4.814],[0.024,3.038],[-0.102,0.938],[0,0],[0,0],[-0.93,0.234],[-0.304,0.57],[-0.07,0.664],[-0.024,0.976],[0.07,2.492],[0.18,2.056],[0.11,0.736],[0.148,0.376],[1.132,1.22],[2.422,3.602],[0.312,0.406],[0.118,0.14],[0.15,0.094],[0.102,0.118],[0.15,0.22],[0.444,0.712],[1.086,1.866],[0.79,1.462],[0.228,0.462],[0.054,0.142],[0,-0.094],[0.054,0.158],[0.086,0.194],[0.258,0.484],[0.414,4.672],[0.234,1.586],[0.132,1.242],[0.352,2.664],[-0.008,2.134],[0.29,0.82],[0.906,0.686],[0,0],[0,0]],"o":[[0,0],[0,0],[-0.68,0.516],[-0.25,0.642],[0.172,3.726],[-0.158,1.452],[-0.242,5.492],[0,0],[-0.796,10.664],[0,0],[0,0],[0.086,3.312],[0.102,1.766],[0.258,0.39],[0.43,0.164],[1.148,0.038],[0,0],[0,0],[0.124,0.89],[0.172,3.062],[0.124,3.704],[0.084,1.272],[1.312,3.726],[1.704,-0.992],[0.47,-2.008],[-0.25,-4.866],[0,0],[0,0],[6.648,-0.524],[0.852,0.008],[0.188,0.102],[-0.008,-0.016],[0.04,0.266],[0.07,0.882],[0.14,2.874],[0.07,4.032],[0.054,1.46],[0.062,0.93],[0.306,1.172],[1.306,0.672],[0.954,-0.298],[0.922,-1.992],[-0.14,-3.616],[-0.022,-3.04],[0,0],[0,0],[2.422,-0.196],[0.93,-0.242],[0.188,-0.344],[0.072,-0.664],[0.054,-1.954],[-0.078,-2.492],[-0.086,-1.022],[-0.102,-0.734],[-0.47,-1.14],[-2.906,-3.218],[-0.352,-0.532],[-0.156,-0.202],[-0.124,-0.134],[0.07,0.04],[-0.094,-0.124],[-0.296,-0.428],[-0.892,-1.414],[-1.086,-1.868],[-0.398,-0.734],[-0.108,-0.234],[-0.064,-0.14],[0,-0.178],[-0.056,-0.148],[-0.172,-0.4],[-1.618,-3.094],[-0.226,-2.564],[-0.234,-1.556],[-0.132,-1.266],[-0.342,-2.634],[0,-1.852],[-0.288,-0.822],[0,0],[0,0],[0,0]],"v":[[-8.144,-71.808],[-10.415,-71.718],[-11.673,-70.772],[-13.063,-69.14],[-13.297,-66.67],[-13.445,-59.272],[-13.883,-52.89],[-15.243,-33.858],[-15.243,-33.842],[-35.219,7.892],[-38.821,12.704],[-38.509,24.338],[-38.313,31.822],[-37.517,35.494],[-36.461,36.33],[-34.969,36.58],[-30.251,36.36],[-25.907,36.15],[-25.469,39.204],[-25.001,45.532],[-24.555,56.048],[-24.109,65.744],[-23.859,68.838],[-16.165,71.556],[-12.939,67.532],[-12.781,57.438],[-13.031,41.54],[-12.837,34.844],[0.179,33.814],[11.875,33.056],[13.327,33.258],[13.679,33.774],[13.765,34.22],[13.883,35.29],[14.101,38.814],[14.421,49.508],[14.711,60.306],[14.883,63.946],[15.069,65.766],[17.827,68.58],[21.819,69.244],[25.117,66.97],[26.413,51.766],[26.163,41.408],[26.289,35.016],[26.647,31.728],[31.859,31.314],[36.625,30.744],[38.343,29.502],[38.647,28.056],[38.789,25.564],[38.757,18.65],[38.375,11.594],[38.077,8.93],[37.711,7.274],[34.867,3.118],[26.367,-6.788],[25.343,-8.234],[24.929,-8.748],[24.577,-9.07],[24.445,-9.226],[24.077,-9.742],[22.953,-11.476],[19.867,-16.608],[16.929,-21.82],[15.975,-23.648],[15.727,-24.226],[15.647,-24.398],[15.555,-24.82],[15.343,-25.342],[14.687,-26.718],[11.773,-37.842],[10.945,-45.35],[10.273,-50.452],[9.397,-57.576],[8.781,-66.304],[8.475,-70.006],[6.711,-72.014],[6.273,-72.35],[3.75,-72.256]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2000,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":3,"ty":3,"nm":"bout3","sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.475],"y":[0]},"t":30,"s":[751.017]},{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.5],"y":[0]},"t":94,"s":[472.001]},{"t":185,"s":[751.017]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.475],"y":[0]},"t":30,"s":[655.068]},{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.5],"y":[0]},"t":122,"s":[663.5]},{"t":185,"s":[655.068]}],"ix":4}},"a":{"a":0,"k":[50,50,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":2000,"st":0,"bm":0},{"ddd":0,"ind":4,"ty":3,"nm":"milieu3","sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.475],"y":[0]},"t":30,"s":[693.526]},{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.5],"y":[0]},"t":103,"s":[589.001]},{"t":185,"s":[693.526]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.475],"y":[0]},"t":30,"s":[419.429]},{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.5],"y":[0]},"t":126,"s":[322.5]},{"t":185,"s":[419.429]}],"ix":4}},"a":{"a":0,"k":[50,50,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":2000,"st":0,"bm":0},{"ddd":0,"ind":5,"ty":3,"nm":"debut3","sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[658.148,-101.803,0],"ix":2,"l":2},"a":{"a":0,"k":[50,50,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":2000,"st":0,"bm":0},{"ddd":0,"ind":6,"ty":4,"nm":"Chain 3","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[0,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":5,"nm":"Connect Layers Pro - Styles","np":152,"mn":"MB ConnectLayersProStyles","ix":1,"en":1,"ef":[{"ty":6,"nm":"Stroke","mn":"MB ConnectLayersProStyles-0001","ix":1,"v":0},{"ty":2,"nm":"Stroke Color","mn":"MB ConnectLayersProStyles-0002","ix":2,"v":{"a":0,"k":[0.839215755463,0.866666734219,0.898039281368,1],"ix":2}},{"ty":0,"nm":"Stroke Opacity","mn":"MB ConnectLayersProStyles-0003","ix":3,"v":{"a":0,"k":100,"ix":3}},{"ty":7,"nm":"Opacity From Distance","mn":"MB ConnectLayersProStyles-0004","ix":4,"v":{"a":0,"k":0,"ix":4}},{"ty":0,"nm":"Near (px)","mn":"MB ConnectLayersProStyles-0005","ix":5,"v":{"a":0,"k":100,"ix":5}},{"ty":0,"nm":"Far (px)","mn":"MB ConnectLayersProStyles-0006","ix":6,"v":{"a":0,"k":400,"ix":6}},{"ty":7,"nm":"Reverse Behavior","mn":"MB ConnectLayersProStyles-0007","ix":7,"v":{"a":0,"k":0,"ix":7}},{"ty":0,"nm":"Stroke Width","mn":"MB ConnectLayersProStyles-0008","ix":8,"v":{"a":0,"k":10,"ix":8}},{"ty":7,"nm":"Line Cap","mn":"MB ConnectLayersProStyles-0009","ix":9,"v":{"a":0,"k":1,"ix":9}},{"ty":7,"nm":"Line Join","mn":"MB ConnectLayersProStyles-0010","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Miter Limit","mn":"MB ConnectLayersProStyles-0011","ix":11,"v":{"a":0,"k":4,"ix":11}},{"ty":7,"nm":"Enable Gradient","mn":"MB ConnectLayersProStyles-0012","ix":12,"v":{"a":0,"k":0,"ix":12}},{"ty":7,"nm":"Gradient Type","mn":"MB ConnectLayersProStyles-0013","ix":13,"v":{"a":0,"k":1,"ix":13}},{"ty":0,"nm":"Highlight Length","mn":"MB ConnectLayersProStyles-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Highlight Angle","mn":"MB ConnectLayersProStyles-0015","ix":15,"v":{"a":0,"k":0,"ix":15}},{"ty":6,"nm":"Gradient Colors","mn":"MB ConnectLayersProStyles-0016","ix":16,"v":0},{"ty":0,"nm":"Gradient Scale (%)","mn":"MB ConnectLayersProStyles-0017","ix":17,"v":{"a":0,"k":100,"ix":17}},{"ty":7,"nm":"Reverse Path","mn":"MB ConnectLayersProStyles-0018","ix":18,"v":{"a":0,"k":0,"ix":18}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0019","ix":19,"v":0},{"ty":6,"nm":"Fill","mn":"MB ConnectLayersProStyles-0020","ix":20,"v":0},{"ty":7,"nm":"Enable Fill","mn":"MB ConnectLayersProStyles-0021","ix":21,"v":{"a":0,"k":0,"ix":21}},{"ty":7,"nm":"Fill Palette","mn":"MB ConnectLayersProStyles-0022","ix":22,"v":{"a":0,"k":1,"ix":22}},{"ty":2,"nm":"Fill Color","mn":"MB ConnectLayersProStyles-0023","ix":23,"v":{"a":0,"k":[0.78431372549,0.549019607843,0.972549019608,1],"ix":23}},{"ty":2,"nm":"End Color","mn":"MB ConnectLayersProStyles-0024","ix":24,"v":{"a":0,"k":[0.121568627451,0,0.247058823529,1],"ix":24}},{"ty":0,"nm":"Saturation","mn":"MB ConnectLayersProStyles-0025","ix":25,"v":{"a":0,"k":50,"ix":25}},{"ty":0,"nm":"Luminance","mn":"MB ConnectLayersProStyles-0026","ix":26,"v":{"a":0,"k":50,"ix":26}},{"ty":0,"nm":"Random Seed","mn":"MB ConnectLayersProStyles-0027","ix":27,"v":{"a":0,"k":1,"ix":27}},{"ty":10,"nm":"Color Layer","mn":"MB ConnectLayersProStyles-0028","ix":28,"v":{"a":0,"k":0,"ix":28}},{"ty":0,"nm":"Fill Opacity","mn":"MB ConnectLayersProStyles-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":7,"nm":"Opacity From Distance","mn":"MB ConnectLayersProStyles-0030","ix":30,"v":{"a":0,"k":0,"ix":30}},{"ty":0,"nm":"Near (px)","mn":"MB ConnectLayersProStyles-0031","ix":31,"v":{"a":0,"k":100,"ix":31}},{"ty":0,"nm":"Far (px)","mn":"MB ConnectLayersProStyles-0032","ix":32,"v":{"a":0,"k":400,"ix":32}},{"ty":7,"nm":"Reverse Behavior","mn":"MB ConnectLayersProStyles-0033","ix":33,"v":{"a":0,"k":0,"ix":33}},{"ty":7,"nm":"Enable Gradient","mn":"MB ConnectLayersProStyles-0034","ix":34,"v":{"a":0,"k":0,"ix":34}},{"ty":7,"nm":"Gradient Type","mn":"MB ConnectLayersProStyles-0035","ix":35,"v":{"a":0,"k":1,"ix":35}},{"ty":0,"nm":"Highlight Length","mn":"MB ConnectLayersProStyles-0036","ix":36,"v":{"a":0,"k":0,"ix":36}},{"ty":0,"nm":"Highlight Angle","mn":"MB ConnectLayersProStyles-0037","ix":37,"v":{"a":0,"k":0,"ix":37}},{"ty":6,"nm":"Gradient Colors","mn":"MB ConnectLayersProStyles-0038","ix":38,"v":0},{"ty":0,"nm":"Gradient Scale (%)","mn":"MB ConnectLayersProStyles-0039","ix":39,"v":{"a":0,"k":100,"ix":39}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0040","ix":40,"v":0},{},{"ty":6,"nm":"Enable Modules","mn":"MB ConnectLayersProStyles-0042","ix":42,"v":0},{"ty":7,"nm":"Arrowheads","mn":"MB ConnectLayersProStyles-0043","ix":43,"v":{"a":0,"k":0,"ix":43}},{"ty":7,"nm":"Curviness","mn":"MB ConnectLayersProStyles-0044","ix":44,"v":{"a":0,"k":1,"ix":44}},{"ty":7,"nm":"Dashes","mn":"MB ConnectLayersProStyles-0045","ix":45,"v":{"a":0,"k":0,"ix":45}},{"ty":7,"nm":"Offset","mn":"MB ConnectLayersProStyles-0046","ix":46,"v":{"a":0,"k":0,"ix":46}},{"ty":7,"nm":"Repeater","mn":"MB ConnectLayersProStyles-0047","ix":47,"v":{"a":0,"k":0,"ix":47}},{"ty":7,"nm":"Round Corners","mn":"MB ConnectLayersProStyles-0048","ix":48,"v":{"a":0,"k":0,"ix":48}},{"ty":7,"nm":"Trim","mn":"MB ConnectLayersProStyles-0049","ix":49,"v":{"a":0,"k":0,"ix":49}},{"ty":7,"nm":"Twist","mn":"MB ConnectLayersProStyles-0050","ix":50,"v":{"a":0,"k":0,"ix":50}},{"ty":7,"nm":"Wiggle","mn":"MB ConnectLayersProStyles-0051","ix":51,"v":{"a":0,"k":0,"ix":51}},{"ty":7,"nm":"Zig Zag","mn":"MB ConnectLayersProStyles-0052","ix":52,"v":{"a":0,"k":0,"ix":52}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0053","ix":53,"v":0},{"ty":6,"nm":"Arrowheads","mn":"MB ConnectLayersProStyles-0054","ix":54,"v":0},{"ty":7,"nm":"Start","mn":"MB ConnectLayersProStyles-0055","ix":55,"v":{"a":0,"k":1,"ix":55}},{"ty":7,"nm":"End","mn":"MB ConnectLayersProStyles-0056","ix":56,"v":{"a":0,"k":1,"ix":56}},{"ty":2,"nm":"Stroke Color","mn":"MB ConnectLayersProStyles-0057","ix":57,"v":{"a":0,"k":[1,1,1,1],"ix":57}},{"ty":0,"nm":"Stroke Opacity","mn":"MB ConnectLayersProStyles-0058","ix":58,"v":{"a":0,"k":100,"ix":58}},{"ty":0,"nm":"Stroke Width","mn":"MB ConnectLayersProStyles-0059","ix":59,"v":{"a":0,"k":0,"ix":59}},{"ty":2,"nm":"Fill Color","mn":"MB ConnectLayersProStyles-0060","ix":60,"v":{"a":0,"k":[1,1,1,1],"ix":60}},{"ty":0,"nm":"Fill Opacity","mn":"MB ConnectLayersProStyles-0061","ix":61,"v":{"a":0,"k":100,"ix":61}},{"ty":7,"nm":"Opacity from Path","mn":"MB ConnectLayersProStyles-0062","ix":62,"v":{"a":0,"k":1,"ix":62}},{"ty":0,"nm":"Circle/Square Size","mn":"MB ConnectLayersProStyles-0063","ix":63,"v":{"a":0,"k":15,"ix":63}},{"ty":0,"nm":"Triangle Scale","mn":"MB ConnectLayersProStyles-0064","ix":64,"v":{"a":0,"k":100,"ix":64}},{"ty":0,"nm":"Triangle Length","mn":"MB ConnectLayersProStyles-0065","ix":65,"v":{"a":0,"k":40,"ix":65}},{"ty":0,"nm":"Triangle Width","mn":"MB ConnectLayersProStyles-0066","ix":66,"v":{"a":0,"k":20,"ix":66}},{"ty":0,"nm":"Round Corners","mn":"MB ConnectLayersProStyles-0067","ix":67,"v":{"a":0,"k":0,"ix":67}},{"ty":6,"nm":"Customization","mn":"MB ConnectLayersProStyles-0068","ix":68,"v":0},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0069","ix":69,"v":0},{"ty":6,"nm":"Curviness","mn":"MB ConnectLayersProStyles-0070","ix":70,"v":0},{"ty":7,"nm":"Function","mn":"MB ConnectLayersProStyles-0071","ix":71,"v":{"a":0,"k":8,"ix":71}},{"ty":7,"nm":"Flip Direction","mn":"MB ConnectLayersProStyles-0072","ix":72,"v":{"a":0,"k":0,"ix":72}},{"ty":0,"nm":"Tension","mn":"MB ConnectLayersProStyles-0073","ix":73,"v":{"a":0,"k":33.333,"ix":73}},{"ty":7,"nm":"Preset","mn":"MB ConnectLayersProStyles-0074","ix":74,"v":{"a":0,"k":1,"ix":74}},{"ty":7,"nm":"Preset","mn":"MB ConnectLayersProStyles-0075","ix":75,"v":{"a":0,"k":1,"ix":75}},{"ty":0,"nm":"Stiffness","mn":"MB ConnectLayersProStyles-0076","ix":76,"v":{"a":0,"k":100,"ix":76}},{"ty":0,"nm":"Damping","mn":"MB ConnectLayersProStyles-0077","ix":77,"v":{"a":0,"k":50,"ix":77}},{"ty":0,"nm":"Max Tangent Length","mn":"MB ConnectLayersProStyles-0078","ix":78,"v":{"a":0,"k":33.333,"ix":78}},{"ty":0,"nm":"Start Tangent X","mn":"MB ConnectLayersProStyles-0079","ix":79,"v":{"a":0,"k":0,"ix":79}},{"ty":0,"nm":"Start Tangent Y","mn":"MB ConnectLayersProStyles-0080","ix":80,"v":{"a":0,"k":0,"ix":80}},{"ty":0,"nm":"End Tangent X","mn":"MB ConnectLayersProStyles-0081","ix":81,"v":{"a":0,"k":0,"ix":81}},{"ty":0,"nm":"End Tangent Y","mn":"MB ConnectLayersProStyles-0082","ix":82,"v":{"a":0,"k":0,"ix":82}},{"ty":0,"nm":"Stiffness","mn":"MB ConnectLayersProStyles-0083","ix":83,"v":{"a":0,"k":50,"ix":83}},{"ty":0,"nm":"Solver Steps","mn":"MB ConnectLayersProStyles-0084","ix":84,"v":{"a":0,"k":5,"ix":84}},{"ty":0,"nm":"Subsegments","mn":"MB ConnectLayersProStyles-0085","ix":85,"v":{"a":0,"k":10,"ix":85}},{"ty":0,"nm":"Gravity","mn":"MB ConnectLayersProStyles-0086","ix":86,"v":{"a":0,"k":0,"ix":86}},{"ty":0,"nm":"Dynamics Start Frame","mn":"MB ConnectLayersProStyles-0087","ix":87,"v":{"a":0,"k":0,"ix":87}},{"ty":0,"nm":"Precision","mn":"MB ConnectLayersProStyles-0088","ix":88,"v":{"a":0,"k":15,"ix":88}},{"ty":0,"nm":"Angle (3D only)","mn":"MB ConnectLayersProStyles-0089","ix":89,"v":{"a":0,"k":45,"ix":89}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0090","ix":90,"v":0},{"ty":6,"nm":"Dashes","mn":"MB ConnectLayersProStyles-0091","ix":91,"v":0},{"ty":0,"nm":"Dash","mn":"MB ConnectLayersProStyles-0092","ix":92,"v":{"a":0,"k":10,"ix":92}},{"ty":0,"nm":"Gap","mn":"MB ConnectLayersProStyles-0093","ix":93,"v":{"a":0,"k":10,"ix":93}},{"ty":0,"nm":"Offset","mn":"MB ConnectLayersProStyles-0094","ix":94,"v":{"a":0,"k":0,"ix":94}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0095","ix":95,"v":0},{"ty":6,"nm":"Offset","mn":"MB ConnectLayersProStyles-0096","ix":96,"v":0},{"ty":0,"nm":"Amount","mn":"MB ConnectLayersProStyles-0097","ix":97,"v":{"a":0,"k":0,"ix":97}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0098","ix":98,"v":0},{"ty":6,"nm":"Repeater","mn":"MB ConnectLayersProStyles-0099","ix":99,"v":0},{"ty":0,"nm":"Copies","mn":"MB ConnectLayersProStyles-0100","ix":100,"v":{"a":0,"k":3,"ix":100}},{"ty":0,"nm":"Offset","mn":"MB ConnectLayersProStyles-0101","ix":101,"v":{"a":0,"k":0,"ix":101}},{"ty":7,"nm":"Symmetric Offset","mn":"MB ConnectLayersProStyles-0102","ix":102,"v":{"a":0,"k":1,"ix":102}},{"ty":6,"nm":"Transform: Repeater","mn":"MB ConnectLayersProStyles-0103","ix":103,"v":0},{"ty":0,"nm":"Anchor Point X","mn":"MB ConnectLayersProStyles-0104","ix":104,"v":{"a":0,"k":0,"ix":104}},{"ty":0,"nm":"Anchor Point Y","mn":"MB ConnectLayersProStyles-1104","ix":105,"v":{"a":0,"k":0,"ix":105}},{"ty":7,"nm":"Center Anchor","mn":"MB ConnectLayersProStyles-0106","ix":106,"v":{"a":0,"k":1,"ix":106}},{"ty":0,"nm":"Position Offset","mn":"MB ConnectLayersProStyles-0107","ix":107,"v":{"a":0,"k":0,"ix":107}},{"ty":0,"nm":"Position X","mn":"MB ConnectLayersProStyles-0108","ix":108,"v":{"a":0,"k":0,"ix":108}},{"ty":0,"nm":"Position Y","mn":"MB ConnectLayersProStyles-0109","ix":109,"v":{"a":0,"k":0,"ix":109}},{"ty":0,"nm":"Scale","mn":"MB ConnectLayersProStyles-0110","ix":110,"v":{"a":0,"k":100,"ix":110}},{"ty":0,"nm":"Rotation","mn":"MB ConnectLayersProStyles-0111","ix":111,"v":{"a":0,"k":0,"ix":111}},{"ty":0,"nm":"Start Opacity","mn":"MB ConnectLayersProStyles-0112","ix":112,"v":{"a":0,"k":100,"ix":112}},{"ty":0,"nm":"End Opacity","mn":"MB ConnectLayersProStyles-0113","ix":113,"v":{"a":0,"k":100,"ix":113}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0114","ix":114,"v":0},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0115","ix":115,"v":0},{"ty":6,"nm":"Round Corners","mn":"MB ConnectLayersProStyles-0116","ix":116,"v":0},{"ty":0,"nm":"Radius","mn":"MB ConnectLayersProStyles-0117","ix":117,"v":{"a":0,"k":10,"ix":117}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0118","ix":118,"v":0},{"ty":6,"nm":"Trim","mn":"MB ConnectLayersProStyles-0119","ix":119,"v":0},{"ty":0,"nm":"Start","mn":"MB ConnectLayersProStyles-0120","ix":120,"v":{"a":0,"k":0,"ix":120}},{"ty":0,"nm":"End","mn":"MB ConnectLayersProStyles-0121","ix":121,"v":{"a":0,"k":100,"ix":121}},{"ty":0,"nm":"Both Ends","mn":"MB ConnectLayersProStyles-0122","ix":122,"v":{"a":0,"k":0,"ix":122}},{"ty":0,"nm":"Offset","mn":"MB ConnectLayersProStyles-0123","ix":123,"v":{"a":0,"k":0,"ix":123}},{"ty":7,"nm":"Trim Multiple Shapes","mn":"MB ConnectLayersProStyles-0124","ix":124,"v":{"a":0,"k":1,"ix":124}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0125","ix":125,"v":0},{"ty":6,"nm":"Twist","mn":"MB ConnectLayersProStyles-0126","ix":126,"v":0},{"ty":0,"nm":"Angle","mn":"MB ConnectLayersProStyles-0127","ix":127,"v":{"a":0,"k":10,"ix":127}},{"ty":0,"nm":"Center X","mn":"MB ConnectLayersProStyles-0128","ix":128,"v":{"a":0,"k":0,"ix":128}},{"ty":0,"nm":"Center Y","mn":"MB ConnectLayersProStyles-0129","ix":129,"v":{"a":0,"k":0,"ix":129}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0130","ix":130,"v":0},{"ty":6,"nm":"Wiggle","mn":"MB ConnectLayersProStyles-0131","ix":131,"v":0},{"ty":0,"nm":"Size","mn":"MB ConnectLayersProStyles-0132","ix":132,"v":{"a":0,"k":10,"ix":132}},{"ty":0,"nm":"Detail","mn":"MB ConnectLayersProStyles-0133","ix":133,"v":{"a":0,"k":10,"ix":133}},{"ty":7,"nm":"Points","mn":"MB ConnectLayersProStyles-0134","ix":134,"v":{"a":0,"k":1,"ix":134}},{"ty":0,"nm":"Wiggles/Second","mn":"MB ConnectLayersProStyles-0135","ix":135,"v":{"a":0,"k":2,"ix":135}},{"ty":0,"nm":"Correlation","mn":"MB ConnectLayersProStyles-0136","ix":136,"v":{"a":0,"k":50,"ix":136}},{"ty":0,"nm":"Temporal Phase","mn":"MB ConnectLayersProStyles-0137","ix":137,"v":{"a":0,"k":0,"ix":137}},{"ty":0,"nm":"Spatial Phase","mn":"MB ConnectLayersProStyles-0138","ix":138,"v":{"a":0,"k":0,"ix":138}},{"ty":0,"nm":"Random Seed","mn":"MB ConnectLayersProStyles-0139","ix":139,"v":{"a":0,"k":0,"ix":139}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0140","ix":140,"v":0},{"ty":6,"nm":"Zig Zag","mn":"MB ConnectLayersProStyles-0141","ix":141,"v":0},{"ty":0,"nm":"Size","mn":"MB ConnectLayersProStyles-0142","ix":142,"v":{"a":0,"k":5,"ix":142}},{"ty":0,"nm":"Ridges per segment","mn":"MB ConnectLayersProStyles-0143","ix":143,"v":{"a":0,"k":10,"ix":143}},{"ty":7,"nm":"Points","mn":"MB ConnectLayersProStyles-0144","ix":144,"v":{"a":0,"k":1,"ix":144}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0145","ix":145,"v":0},{"ty":6,"nm":"Assistant","mn":"MB ConnectLayersProStyles-0146","ix":146,"v":0},{"ty":6,"nm":"Path Expressions","mn":"MB ConnectLayersProStyles-0147","ix":147,"v":0},{"ty":6,"nm":"Style Expressions","mn":"MB ConnectLayersProStyles-0148","ix":148,"v":0},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0149","ix":149,"v":0},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0150","ix":150,"v":0}]}],"shapes":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nvar Ls, is3dB, fx, precision, flipDirB, tension, presetId, stiffness, damping, maxTanLen, iterations, subsegments, grav, uOutTan, uInTan, dynamicsStartTime, closedB, reversePathB, curveEnabB, curveId, curviness, dynamicsStartTime, curveId, flipDirB, tension, presetId, stiffness, damping, maxTanLen, uOutTan, uInTan, stiffness, iterations, subsegments, grav, precision, pts, tans, intans, outtans, intans, outtans;\nfunction getPoints() {\n    function getVerletSegmentPoints(L1, L2) {\n        function addPoint(x, y, vx, vy) {\n            points.push({\n                x: x,\n                y: y,\n                ox: x - vx,\n                oy: y - vy\n            });\n            return points[$bm_sub(points.length, 1)];\n        }\n        ;\n        function movePoint(p) {\n            var vx = $bm_mul($bm_sub(p.x, p.ox), stiffness);\n            var vy = $bm_mul($bm_sub(p.y, p.oy), stiffness);\n            p.ox = p.x;\n            p.oy = p.y;\n            p.x = $bm_sum(p.x, vx);\n            p.y = $bm_sum(p.y, vy);\n            p.y = $bm_sum(p.y, grav);\n        }\n        ;\n        function movePoints() {\n            for (var i = 0; i < points.length; i++)\n                movePoint(points[i]);\n        }\n        ;\n        function addLine(p1, p2) {\n            lines.push({\n                p1: p1,\n                p2: p2,\n                len: length([\n                    p1.x - p2.x,\n                    p1.y - p2.y\n                ])\n            });\n            return lines[$bm_sub(lines.length, 1)];\n        }\n        ;\n        function constrainLine(l) {\n            var dx = $bm_sub(l.p2.x, l.p1.x);\n            var dy = $bm_sub(l.p2.y, l.p1.y);\n            var ll = length([\n                dx,\n                dy\n            ]);\n            if (ll == 0)\n                ll = 0.001;\n            var fr = $bm_div($bm_div($bm_sub(l.len, ll), ll), 2);\n            dx *= fr;\n            dy *= fr;\n            l.p1.x = $bm_sub(l.p1.x, dx);\n            l.p1.y = $bm_sub(l.p1.y, dy);\n            l.p2.x = $bm_sum(l.p2.x, dx);\n            l.p2.y = $bm_sum(l.p2.y, dy);\n        }\n        ;\n        function constrainLines() {\n            for (var i = 0; i < lines.length; i++)\n                constrainLine(lines[i]);\n        }\n        ;\n        var points = [];\n        var lines = [];\n        var pt1 = is3dB ? fromWorld(L1.toWorld(L1.anchorPoint, dynamicsStartTime)) : L1.toComp(L1.anchorPoint, dynamicsStartTime);\n        var pt2 = is3dB ? fromWorld(L2.toWorld(L2.anchorPoint, dynamicsStartTime)) : L2.toComp(L2.anchorPoint, dynamicsStartTime);\n        var d0 = length($bm_sub(pt2, pt1));\n        var u = is3dB ? [\n            1,\n            0\n        ] : d0 != 0 ? normalize(pt2 - pt1) : [\n            0,\n            0\n        ];\n        var distance = $bm_div(d0, subsegments);\n        var p1 = addPoint(pt1[0], pt1[1], 0, 0);\n        for (var i = 1; i <= subsegments; i++) {\n            var pt = $bm_sum(pt1, $bm_mul($bm_mul(i, distance), u));\n            var p2 = addPoint(pt[0], pt[1], 0, 0);\n            addLine(p1, p2);\n            p1 = p2;\n        }\n        for (var t = dynamicsStartTime + thisComp.frameDuration; t <= time + 0.001; t += thisComp.frameDuration) {\n            movePoints();\n            var startId = 0;\n            var endId = $bm_sub(points.length, 1);\n            pt1 = is3dB ? fromWorld(L1.toWorld(L1.anchorPoint, t)) : L1.toComp(L1.anchorPoint, t);\n            pt2 = is3dB ? fromWorld(L2.toWorld(L2.anchorPoint, t)) : L2.toComp(L2.anchorPoint, t);\n            points[startId].ox = points[startId].x = pt1[0];\n            points[startId].oy = points[startId].y = pt1[1];\n            points[endId].ox = points[endId].x = pt2[0];\n            points[endId].oy = points[endId].y = pt2[1];\n            for (var i = 0; i < iterations; i++) {\n                constrainLines();\n            }\n        }\n        ;\n        var ps = [];\n        for (var i = 0; i < points.length; i++) {\n            if (i == 0)\n                ps.push([\n                    pt1[0],\n                    pt1[1]\n                ]);\n            else if (i == $bm_sub(points.length, 1))\n                ps.push([\n                    pt2[0],\n                    pt2[1]\n                ]);\n            else\n                ps.push([\n                    points[i].x,\n                    points[i].y\n                ]);\n        }\n        return ps;\n    }\n    ;\n    function QuadraticEaseIn(p) {\n        return $bm_mul(p, p);\n    }\n    function QuadraticEaseOut(p) {\n        return $bm_neg($bm_mul(p, $bm_sub(p, 2)));\n    }\n    function QuadraticEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul($bm_mul(2, p), p);\n        } else {\n            return $bm_sub($bm_sum($bm_mul($bm_mul(-2, p), p), $bm_mul(4, p)), 1);\n        }\n    }\n    function CubicEaseIn(p) {\n        return $bm_mul($bm_mul(p, p), p);\n    }\n    function CubicEaseOut(p) {\n        var f = $bm_sub(p, 1);\n        return $bm_sum($bm_mul($bm_mul(f, f), f), 1);\n    }\n    function CubicEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul($bm_mul($bm_mul(4, p), p), p);\n        } else {\n            var f = $bm_sub($bm_mul(2, p), 2);\n            return $bm_sum($bm_mul($bm_mul($bm_mul(0.5, f), f), f), 1);\n        }\n    }\n    function QuarticEaseIn(p) {\n        return $bm_mul($bm_mul($bm_mul(p, p), p), p);\n    }\n    function QuarticEaseOut(p) {\n        var f = $bm_sub(p, 1);\n        return $bm_sum($bm_mul($bm_mul($bm_mul(f, f), f), $bm_sub(1, p)), 1);\n    }\n    function QuarticEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul($bm_mul($bm_mul($bm_mul(8, p), p), p), p);\n        } else {\n            var f = $bm_sub(p, 1);\n            return $bm_sum($bm_mul($bm_mul($bm_mul($bm_mul(-8, f), f), f), f), 1);\n        }\n    }\n    function QuinticEaseIn(p) {\n        return $bm_mul($bm_mul($bm_mul($bm_mul(p, p), p), p), p);\n    }\n    function QuinticEaseOut(p) {\n        var f = $bm_sub(p, 1);\n        return $bm_sum($bm_mul($bm_mul($bm_mul($bm_mul(f, f), f), f), f), 1);\n    }\n    function QuinticEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul($bm_mul($bm_mul($bm_mul($bm_mul(16, p), p), p), p), p);\n        } else {\n            var f = $bm_sub($bm_mul(2, p), 2);\n            return $bm_sum($bm_mul($bm_mul($bm_mul($bm_mul($bm_mul(0.5, f), f), f), f), f), 1);\n        }\n    }\n    function SineEaseIn(p) {\n        return $bm_sum(Math.sin($bm_mul($bm_sub(p, 1), $bm_div(Math.PI, 2))), 1);\n    }\n    function SineEaseOut(p) {\n        return Math.sin($bm_mul(p, $bm_div(Math.PI, 2)));\n    }\n    function SineEaseInOut(p) {\n        return $bm_mul(0.5, $bm_sub(1, Math.cos($bm_mul(p, Math.PI))));\n    }\n    function CircularEaseIn(p) {\n        return $bm_sub(1, Math.sqrt($bm_sub(1, $bm_mul(p, p))));\n    }\n    function CircularEaseOut(p) {\n        return Math.sqrt($bm_mul($bm_sub(2, p), p));\n    }\n    function CircularEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul(0.5, $bm_sub(1, Math.sqrt($bm_sub(1, $bm_mul(4, $bm_mul(p, p))))));\n        } else {\n            return $bm_mul(0.5, $bm_sum(Math.sqrt($bm_mul($bm_neg($bm_sub($bm_mul(2, p), 3)), $bm_sub($bm_mul(2, p), 1))), 1));\n        }\n    }\n    function ExponentialEaseIn(p) {\n        return p == 0 ? p : Math.pow(2, 10 * (p - 1));\n    }\n    function ExponentialEaseOut(p) {\n        return p == 1 ? p : 1 - Math.pow(2, -10 * p);\n    }\n    function ExponentialEaseInOut(p) {\n        if (p == 0 || p == 1)\n            return p;\n        if (p < 0.5) {\n            return $bm_mul(0.5, Math.pow(2, $bm_sub($bm_mul(20, p), 10)));\n        } else {\n            return $bm_sum($bm_mul(-0.5, Math.pow(2, $bm_sum($bm_mul(-20, p), 10))), 1);\n        }\n    }\n    function ElasticEaseIn(p) {\n        return $bm_mul(Math.sin($bm_mul($bm_mul(13, $bm_div(Math.PI, 2)), p)), Math.pow(2, $bm_mul(10, $bm_sub(p, 1))));\n    }\n    function ElasticEaseOut(p) {\n        return $bm_sum($bm_mul(Math.sin($bm_mul($bm_mul(-13, $bm_div(Math.PI, 2)), $bm_sum(p, 1))), Math.pow(2, $bm_mul(-10, p))), 1);\n    }\n    function ElasticEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul($bm_mul(0.5, Math.sin($bm_mul($bm_mul(13, $bm_div(Math.PI, 2)), $bm_mul(2, p)))), Math.pow(2, $bm_mul(10, $bm_sub($bm_mul(2, p), 1))));\n        } else {\n            return $bm_mul(0.5, $bm_sum($bm_mul(Math.sin($bm_mul($bm_mul(-13, $bm_div(Math.PI, 2)), $bm_sum($bm_sub($bm_mul(2, p), 1), 1))), Math.pow(2, $bm_mul(-10, $bm_sub($bm_mul(2, p), 1)))), 2));\n        }\n    }\n    function BackEaseIn(p) {\n        return $bm_sub($bm_mul($bm_mul(p, p), p), $bm_mul(p, Math.sin($bm_mul(p, Math.PI))));\n    }\n    function BackEaseOut(p) {\n        var f = $bm_sub(1, p);\n        return $bm_sub(1, $bm_sub($bm_mul($bm_mul(f, f), f), $bm_mul(f, Math.sin($bm_mul(f, Math.PI)))));\n    }\n    function BackEaseInOut(p) {\n        if (p < 0.5) {\n            var f = $bm_mul(2, p);\n            return $bm_mul(0.5, $bm_sub($bm_mul($bm_mul(f, f), f), $bm_mul(f, Math.sin($bm_mul(f, Math.PI)))));\n        } else {\n            var f = $bm_sub(1, $bm_sub($bm_mul(2, p), 1));\n            return $bm_sum($bm_mul(0.5, $bm_sub(1, $bm_sub($bm_mul($bm_mul(f, f), f), $bm_mul(f, Math.sin($bm_mul(f, Math.PI)))))), 0.5);\n        }\n    }\n    function BounceEaseIn(p) {\n        return $bm_sub(1, BounceEaseOut($bm_sub(1, p)));\n    }\n    function BounceEaseOut(p) {\n        if (p < 4 / 11) {\n            return $bm_div($bm_mul($bm_mul(121, p), p), 16);\n        } else if (p < 8 / 11) {\n            return $bm_sum($bm_sub($bm_mul($bm_mul(363 / 40, p), p), $bm_mul(99 / 10, p)), 17 / 5);\n        } else if (p < 9 / 10) {\n            return $bm_sum($bm_sub($bm_mul($bm_mul(4356 / 361, p), p), $bm_mul(35442 / 1805, p)), 16061 / 1805);\n        } else {\n            return $bm_sum($bm_sub($bm_mul($bm_mul(54 / 5, p), p), $bm_mul(513 / 25, p)), 268 / 25);\n        }\n    }\n    function BounceEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul(0.5, BounceEaseIn($bm_mul(p, 2)));\n        } else {\n            return $bm_sum($bm_mul(0.5, BounceEaseOut($bm_sub($bm_mul(p, 2), 1))), 0.5);\n        }\n    }\n    function getPennerSegmentPoints(p1, p2) {\n        var vId;\n        var ps = [];\n        var startPointX = p1[0];\n        var startPointY = p1[1];\n        var endPointX = p2[0];\n        var endPointY = p2[1];\n        for (vId = 0; vId <= precision; vId++) {\n            var lambda = $bm_div(vId, precision);\n            var x = $bm_sum(startPointX, $bm_mul($bm_sub(endPointX, startPointX), lambda));\n            var y = $bm_sum(startPointY, $bm_mul($bm_sub(endPointY, startPointY), lambda));\n            switch (curveId) {\n            case curviness.IN_BACK: {\n                    y = startPointY + (endPointY - startPointY) * BackEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_BACK: {\n                    y = startPointY + (endPointY - startPointY) * BackEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_BACK: {\n                    y = startPointY + (endPointY - startPointY) * BackEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_BOUNCE: {\n                    y = startPointY + (endPointY - startPointY) * BounceEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_BOUNCE: {\n                    y = startPointY + (endPointY - startPointY) * BounceEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_BOUNCE: {\n                    y = startPointY + (endPointY - startPointY) * BounceEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_CIRCULAR: {\n                    y = startPointY + (endPointY - startPointY) * CircularEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_CIRCULAR: {\n                    y = startPointY + (endPointY - startPointY) * CircularEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_CIRCULAR: {\n                    y = startPointY + (endPointY - startPointY) * CircularEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_CUBIC: {\n                    y = startPointY + (endPointY - startPointY) * CubicEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_CUBIC: {\n                    y = startPointY + (endPointY - startPointY) * CubicEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_CUBIC: {\n                    y = startPointY + (endPointY - startPointY) * CubicEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_ELASTIC: {\n                    y = startPointY + (endPointY - startPointY) * ElasticEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_ELASTIC: {\n                    y = startPointY + (endPointY - startPointY) * ElasticEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_ELASTIC: {\n                    y = startPointY + (endPointY - startPointY) * ElasticEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_EXPONENTIAL: {\n                    y = startPointY + (endPointY - startPointY) * ExponentialEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_EXPONENTIAL: {\n                    y = startPointY + (endPointY - startPointY) * ExponentialEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_EXPONENTIAL: {\n                    y = startPointY + (endPointY - startPointY) * ExponentialEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_QUADRATIC: {\n                    y = startPointY + (endPointY - startPointY) * QuadraticEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_QUADRATIC: {\n                    y = startPointY + (endPointY - startPointY) * QuadraticEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_QUADRATIC: {\n                    y = startPointY + (endPointY - startPointY) * QuadraticEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_QUARTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuarticEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_QUARTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuarticEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_QUARTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuarticEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_QUINTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuinticEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_QUINTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuinticEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_QUINTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuinticEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_SINE: {\n                    y = startPointY + (endPointY - startPointY) * SineEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_SINE: {\n                    y = startPointY + (endPointY - startPointY) * SineEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_SINE: {\n                    y = startPointY + (endPointY - startPointY) * SineEaseInOut(lambda);\n                    break;\n                }\n            default:\n                break;\n            }\n            ps.push([\n                x,\n                y\n            ]);\n        }\n        return ps;\n    }\n    ;\n    var ps = [];\n    var numSegs = $bm_sub(Ls.length, 1);\n    for (var segId = 0; segId < numSegs; segId++) {\n        var L1 = Ls[segId];\n        var L2 = Ls[segId + 1];\n        var p1 = is3dB ? fromWorld(L1.toWorld(L1.anchorPoint)) : L1.toComp(L1.anchorPoint);\n        if (p1.length == 3)\n            p1.pop();\n        var p2 = is3dB ? fromWorld(L2.toWorld(L2.anchorPoint)) : L2.toComp(L2.anchorPoint);\n        if (p2.length == 3)\n            p2.pop();\n        var M = $bm_div($bm_sum(p1, p2), 2);\n        var A, B;\n        if (curveEnabB && curveId == curviness.STEP) {\n            A = flipDirB ? [\n                p1[0],\n                M[1]\n            ] : [\n                M[0],\n                p1[1]\n            ];\n            B = flipDirB ? [\n                p2[0],\n                M[1]\n            ] : [\n                M[0],\n                p2[1]\n            ];\n            ps.push(p1);\n            ps.push(A);\n            ps.push(B);\n            ps.push(p2);\n        } else if (curveEnabB && curveId == curviness.STEP_AFTER) {\n            A = [\n                p2[0],\n                p1[1]\n            ];\n            ps.push(p1);\n            ps.push(A);\n            ps.push(p2);\n        } else if (curveEnabB && curveId == curviness.STEP_BEFORE) {\n            A = [\n                p1[0],\n                p2[1]\n            ];\n            ps.push(p1);\n            ps.push(A);\n            ps.push(p2);\n        } else if (curveEnabB && curveId == curviness.DYNAMIC_VERLET) {\n            ps.push.apply(ps, getVerletSegmentPoints(L1, L2));\n            if (numSegs > 1 && segId < numSegs - 1)\n                ps.pop();\n        } else if (curveEnabB && curveId >= curviness.IN_SINE) {\n            ps.push.apply(ps, getPennerSegmentPoints(p1, p2));\n        } else {\n            if (segId == 0) {\n                ps.push(p1);\n                ps.push(p2);\n            } else\n                ps.push(p2);\n        }\n    }\n    return ps;\n}\nfunction getTangents() {\n    function getRotoBezierTangents(tensFactor) {\n        var is = [];\n        var os = [];\n        if (!closedB) {\n            is.push([\n                0,\n                0\n            ]);\n            os.push([\n                0,\n                0\n            ]);\n        } else {\n            if (curveId == curviness.DYNAMIC_VERLET || curveId >= curviness.IN_SINE) {\n                is.push([\n                    0,\n                    0\n                ]);\n                os.push([\n                    0,\n                    0\n                ]);\n            } else {\n                var u = $bm_sub(pts[1], pts[$bm_sub(pts.length, 2)]);\n                if (length(u) != 0)\n                    u = normalize(u);\n                var lNext = length($bm_sub(pts[1], pts[0]));\n                var lOut = $bm_mul(tensFactor, lNext);\n                is.push([\n                    0,\n                    0\n                ]);\n                os.push($bm_mul(lOut, u));\n            }\n        }\n        for (var j = 1; j < pts.length - 1; j++) {\n            var u = $bm_sub(pts[$bm_sum(j, 1)], pts[$bm_sub(j, 1)]);\n            if (length(u) != 0)\n                u = normalize(u);\n            if (curveId == curviness.DYNAMIC_VERLET && j % subsegments == 0 || curveId >= curviness.IN_SINE && j % precision == 0)\n                u = [\n                    0,\n                    0\n                ];\n            var lPrev = length($bm_sub(pts[j], pts[$bm_sub(j, 1)]));\n            var lNext = length($bm_sub(pts[$bm_sum(j, 1)], pts[j]));\n            var lIn = $bm_mul(tensFactor, lPrev);\n            var lOut = $bm_mul(tensFactor, lNext);\n            is.push($bm_mul($bm_neg(lIn), u));\n            os.push($bm_mul(lOut, u));\n        }\n        if (!closedB) {\n            is.push([\n                0,\n                0\n            ]);\n            os.push([\n                0,\n                0\n            ]);\n        } else {\n            if (curveId == curviness.DYNAMIC_VERLET || curveId >= curviness.IN_SINE) {\n                is.push([\n                    0,\n                    0\n                ]);\n                os.push([\n                    0,\n                    0\n                ]);\n            } else {\n                var u = $bm_sub(pts[1], pts[$bm_sub(pts.length, 2)]);\n                if (length(u) != 0)\n                    u = normalize(u);\n                var lPrev = length($bm_sub(pts[$bm_sub(pts.length, 2)], pts[$bm_sub(pts.length, 1)]));\n                var lIn = $bm_mul(tensFactor, lPrev);\n                is.push($bm_mul($bm_neg(lIn), u));\n                os.push([\n                    0,\n                    0\n                ]);\n            }\n        }\n        if (!closedB) {\n            var PIn1 = $bm_sum(pts[1], is[1]);\n            var P0 = pts[0];\n            var dirOut0 = $bm_sub(PIn1, P0);\n            if (length(dirOut0) != 0)\n                dirOut0 = normalize(dirOut0);\n            var lOut0 = $bm_mul(tensFactor, length($bm_sub(PIn1, P0)));\n            var out0 = $bm_mul(lOut0, dirOut0);\n            var POut0 = $bm_sum(pts[$bm_sub(pts.length, 2)], os[$bm_sub(pts.length, 2)]);\n            var Pn = pts[pts.length - 1];\n            var dirInN = $bm_sub(POut0, Pn);\n            if (length(dirInN) != 0)\n                dirInN = normalize(dirInN);\n            var lInN = $bm_mul(tensFactor, length($bm_sub(POut0, Pn)));\n            var inN = $bm_mul(lInN, dirInN);\n            os[0] = out0;\n            is[is.length - 1] = inN;\n        }\n        return [\n            is,\n            os\n        ];\n    }\n    ;\n    function getDynamicBezierSegmentTangents(L1, L2) {\n        var targetP1, targetP2;\n        var out0 = [\n            0,\n            0\n        ];\n        var in1 = [\n            0,\n            0\n        ];\n        var vel1 = [\n            0,\n            0\n        ];\n        var vel2 = [\n            0,\n            0\n        ];\n        var P1, P2;\n        for (var t = dynamicsStartTime; t <= time + 0.001; t += thisComp.frameDuration) {\n            var p1 = is3dB ? fromWorld(L1.toWorld(L1.anchorPoint, t)) : L1.toComp(L1.anchorPoint, t);\n            if (p1.length == 3)\n                p1.pop();\n            var p2 = is3dB ? fromWorld(L2.toWorld(L2.anchorPoint, t)) : L2.toComp(L2.anchorPoint, t);\n            if (p2.length == 3)\n                p2.pop();\n            var u1 = $bm_sub(p2, p1);\n            var u2 = $bm_sub(p1, p2);\n            if (t == dynamicsStartTime) {\n                if (curveId == curviness.DYNAMIC_BEZIER) {\n                    P1 = $bm_sum(p1, $bm_mul(maxTanLen, u1));\n                    P2 = $bm_sum(p2, $bm_mul(maxTanLen, u2));\n                } else if (curveId == curviness.DYNAMIC_CUSTOM_BEZIER) {\n                    P1 = $bm_sum(p1, uOutTan);\n                    P2 = $bm_sum(p2, uInTan);\n                }\n            }\n            if (curveId == curviness.DYNAMIC_BEZIER) {\n                targetP1 = $bm_sum(p1, $bm_mul(maxTanLen, u1));\n                targetP2 = $bm_sum(p2, $bm_mul(maxTanLen, u2));\n            } else if (curveId == curviness.DYNAMIC_CUSTOM_BEZIER) {\n                targetP1 = $bm_sum(p1, uOutTan);\n                targetP2 = $bm_sum(p2, uInTan);\n            }\n            vel1 = $bm_sum($bm_mul(stiffness, $bm_sub(targetP1, P1)), $bm_mul(damping, vel1));\n            vel2 = $bm_sum($bm_mul(stiffness, $bm_sub(targetP2, P2)), $bm_mul(damping, vel2));\n            P1 = $bm_sum(P1, vel1);\n            P2 = $bm_sum(P2, vel2);\n            out0 = $bm_sub(P1, p1);\n            in1 = $bm_sub(P2, p2);\n        }\n        return [\n            out0,\n            in1\n        ];\n    }\n    ;\n    var ins = [];\n    var outs = [];\n    if (curveEnabB) {\n        var numSegs = $bm_sub(Ls.length, 1);\n        if (curveId == curviness.AUTO_BEZIER || curveId == curviness.DYNAMIC_VERLET || curveId >= curviness.IN_SINE) {\n            var tans = getRotoBezierTangents(1 / 3);\n            ins = tans[0];\n            outs = tans[1];\n        } else if (curveId == curviness.CUSTOM_TENSION) {\n            var tans = getRotoBezierTangents(tension);\n            ins = tans[0];\n            outs = tans[1];\n        } else {\n            for (var segId = 0; segId < numSegs; segId++) {\n                var L1 = Ls[segId];\n                var L2 = Ls[segId + 1];\n                switch (curveId) {\n                case curviness.DYNAMIC_BEZIER:\n                case curviness.DYNAMIC_CUSTOM_BEZIER: {\n                        var tans = getDynamicBezierSegmentTangents(L1, L2);\n                        var out0 = tans[0];\n                        var in1 = tans[1];\n                        if (segId == 0)\n                            ins.push([\n                                0,\n                                0\n                            ]);\n                        outs.push(out0);\n                        ins.push(in1);\n                        if (segId == numSegs - 1)\n                            outs.push([\n                                0,\n                                0\n                            ]);\n                        break;\n                    }\n                case curviness.ARC: {\n                        var p1 = is3dB ? fromWorld(L1.toWorld(L1.anchorPoint)) : L1.toComp(L1.anchorPoint);\n                        var p2 = is3dB ? fromWorld(L2.toWorld(L2.anchorPoint)) : L2.toComp(L2.anchorPoint);\n                        var u = p2 - p1;\n                        var d = length(u);\n                        var u = d == 0 ? [\n                            0,\n                            0\n                        ] : normalize(u);\n                        var n = [\n                            u[1],\n                            -u[0]\n                        ];\n                        if (flipDirB)\n                            n *= -1;\n                        var out0 = 2 / 3 * d * n;\n                        var in1 = out0;\n                        if (segId == 0)\n                            ins.push([\n                                0,\n                                0\n                            ]);\n                        outs.push(out0);\n                        ins.push(in1);\n                        if (segId == numSegs - 1)\n                            outs.push([\n                                0,\n                                0\n                            ]);\n                        break;\n                    }\n                default:\n                    break;\n                }\n            }\n        }\n    }\n    return [\n        ins,\n        outs\n    ];\n}\nLs = [\n    thisComp.layer('bout3'),\n    thisComp.layer('milieu3'),\n    thisComp.layer('debut3')\n];\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\nprecision = 15;\nflipDirB = false;\ntension = 1 / 3;\npresetId = 1;\nstiffness = 1;\ndamping = 0.5;\nmaxTanLen = 1 / 3;\niterations = 5;\nsubsegments = 10;\ngrav = 0;\nuOutTan = [\n    0,\n    0\n];\nuInTan = [\n    0,\n    0\n];\ndynamicsStartTime = 0;\nclosedB = Ls[0]._name == Ls[Ls.length - 1]._name;\nreversePathB = fx('Reverse Path').value > 0;\ncurveEnabB = fx('Curviness').value > 0;\nif (curveEnabB) {\n    curveId = fx('Function').value;\n    curviness = {\n        LINEAR: 1,\n        SEP1: 2,\n        ARC: 3,\n        STEP: 4,\n        STEP_AFTER: 5,\n        STEP_BEFORE: 6,\n        SEP2: 7,\n        AUTO_BEZIER: 8,\n        CUSTOM_TENSION: 9,\n        SEP3: 10,\n        DYNAMIC_BEZIER: 11,\n        DYNAMIC_CUSTOM_BEZIER: 12,\n        DYNAMIC_VERLET: 13,\n        SEP4: 14,\n        IN_SINE: 15,\n        OUT_SINE: 16,\n        IN_OUT_SINE: 17,\n        IN_QUADRATIC: 18,\n        OUT_QUADRATIC: 19,\n        IN_OUT_QUADRATIC: 20,\n        IN_CUBIC: 21,\n        OUT_CUBIC: 22,\n        IN_OUT_CUBIC: 23,\n        IN_QUARTIC: 24,\n        OUT_QUARTIC: 25,\n        IN_OUT_QUARTIC: 26,\n        IN_QUINTIC: 27,\n        OUT_QUINTIC: 28,\n        IN_OUT_QUINTIC: 29,\n        IN_EXPONENTIAL: 30,\n        OUT_EXPONENTIAL: 31,\n        IN_OUT_EXPONENTIAL: 32,\n        IN_CIRCULAR: 33,\n        OUT_CIRCULAR: 34,\n        IN_OUT_CIRCULAR: 35,\n        SEP11: 36,\n        IN_BACK: 37,\n        OUT_BACK: 38,\n        IN_OUT_BACK: 39,\n        IN_ELASTIC: 40,\n        OUT_ELASTIC: 41,\n        IN_OUT_ELASTIC: 42,\n        IN_BOUNCE: 43,\n        OUT_BOUNCE: 44,\n        IN_OUT_BOUNCE: 45\n    };\n    if (curveId == curviness.DYNAMIC_BEZIER || curveId == curviness.DYNAMIC_CUSTOM_BEZIER || curveId == curviness.DYNAMIC_VERLET) {\n        try {\n            dynamicsStartTime = $bm_mul(fx('Dynamics Start Frame').value, thisComp.frameDuration);\n            if (time < dynamicsStartTime)\n                curveId = curviness.LINEAR;\n        } catch (e) {\n        }\n    }\n    if (curveId == curviness.ARC || curveId == curviness.STEP) {\n        try {\n            flipDirB = fx('Flip Direction').value > 0;\n        } catch (e) {\n        }\n    } else if (curveId == curviness.CUSTOM_TENSION) {\n        try {\n            tension = $bm_div(fx('Tension').value, 100);\n        } catch (e) {\n        }\n    } else if (curveId == curviness.DYNAMIC_BEZIER || curveId == curviness.DYNAMIC_CUSTOM_BEZIER) {\n        try {\n            presetId = fx('MB ConnectLayersProStyles-0074').value;\n            stiffness = $bm_div(fx('MB ConnectLayersProStyles-0076').value, 100);\n            damping = $bm_div(fx('MB ConnectLayersProStyles-0077').value, 100);\n            maxTanLen = $bm_div(fx('MB ConnectLayersProStyles-0078').value, 100);\n        } catch (e) {\n        }\n        if (curveId == curviness.DYNAMIC_CUSTOM_BEZIER) {\n            try {\n                uOutTan = [\n                    fx('Start Tangent X').value,\n                    fx('Start Tangent Y').value\n                ];\n                uInTan = [\n                    fx('End Tangent X').value,\n                    fx('End Tangent Y').value\n                ];\n            } catch (e) {\n            }\n        }\n    } else if (curveId == curviness.DYNAMIC_VERLET) {\n        try {\n            stiffness = $bm_div(fx('MB ConnectLayersProStyles-0083').value, 100);\n            iterations = Math.round(fx('Solver Steps').value);\n            subsegments = Math.round(fx('Subsegments').value);\n            grav = $bm_div(fx('Gravity').value, 10);\n        } catch (e) {\n        }\n    } else if (curveId >= curviness.IN_SINE) {\n        try {\n            precision = Math.round(fx('Precision').value);\n        } catch (e) {\n        }\n    }\n}\npts = getPoints();\ntans = getTangents();\nintans = tans[0];\nouttans = tans[1];\nif (reversePathB) {\n    pts.reverse();\n    intans = tans[1].reverse();\n    outtans = tans[0].reverse();\n}\n$bm_rt = createPath(pts, intans, outtans, closedB);"},"nm":"Path","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\nvar is3dB, fx;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\n$bm_rt = fx('MB ConnectLayersProStyles-0002');"},"o":{"a":0,"k":100,"ix":4,"x":"var $bm_rt;\nvar is3dB, fx, gradEnabB, res, res, opaDistB, near, far, reverseB, path, pts, d, res, res, res, res;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\ngradEnabB = fx('MB ConnectLayersProStyles-0012').value > 0;\nif (gradEnabB)\n    res = 0;\nelse {\n    res = fx('MB ConnectLayersProStyles-0003').value;\n    opaDistB = fx('MB ConnectLayersProStyles-0004').value > 0;\n    if (opaDistB) {\n        near = fx('MB ConnectLayersProStyles-0005').value;\n        far = fx('MB ConnectLayersProStyles-0006').value;\n        reverseB = fx('MB ConnectLayersProStyles-0007').value > 0;\n        path = content('Chain 3').content('Paths').content('Path 1').content('Path').path;\n        pts = path.points();\n        d = path.isClosed() ? length($bm_sub(pts[1], pts[0])) : length($bm_sub(pts[$bm_sub(pts.length, 1)], pts[0]));\n        if (d <= near)\n            res = 100;\n        else if (d >= far)\n            res = 0;\n        else\n            res *= ease(d, near, far, 1, 0);\n        if (reverseB)\n            res = $bm_sub(100, res);\n    }\n}\n$bm_rt = res;"},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\nvar is3dB, fx;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\n$bm_rt = fx('MB ConnectLayersProStyles-0008');"},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"gs","o":{"a":0,"k":100,"ix":9,"x":"var $bm_rt;\nvar is3dB, fx, gradEnabB, res, opaDistB, near, far, reverseB, path, pts, d, res, res, res, res, res;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\ngradEnabB = fx('MB ConnectLayersProStyles-0012').value > 0;\nif (gradEnabB) {\n    res = fx('MB ConnectLayersProStyles-0003').value;\n    opaDistB = fx('MB ConnectLayersProStyles-0004').value > 0;\n    if (opaDistB) {\n        near = fx('MB ConnectLayersProStyles-0005').value;\n        far = fx('MB ConnectLayersProStyles-0006').value;\n        reverseB = fx('MB ConnectLayersProStyles-0007').value > 0;\n        path = content('Chain 3').content('Paths').content('Path 1').content('Path').path;\n        pts = path.points();\n        d = path.isClosed() ? length($bm_sub(pts[1], pts[0])) : length($bm_sub(pts[$bm_sub(pts.length, 1)], pts[0]));\n        if (d <= near)\n            res = 100;\n        else if (d >= far)\n            res = 0;\n        else\n            res *= ease(d, near, far, 1, 0);\n        if (reverseB)\n            res = $bm_sub(100, res);\n    }\n} else\n    res = 0;\n$bm_rt = res;"},"w":{"a":0,"k":2,"ix":10,"x":"var $bm_rt;\nvar is3dB, fx;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\n$bm_rt = fx('MB ConnectLayersProStyles-0008');"},"g":{"p":2,"k":{"a":0,"k":[0,1,1,1,1,0,0,0],"ix":8}},"s":{"a":0,"k":[0,0],"ix":4,"x":"var $bm_rt;\nvar is3dB, fx, path, type, gradEnabB, gradScale, curveEnabB, pts, ptsAt0, lastIdx, startPt, startPtAt0, i, startPt, startPtAt0, startPt, startPtAt0, startPt, startPtAt0, isPennerB, curviness, curveId, isPennerB, precision, lastIdx, farthestId, maxD, i, d, maxD, farthestId, endPt, endPt, midPt, u, v, startPt, endPt, v, endPt;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\npath = content('Chain 3').content('Paths').content('Path 1').content('Path').path;\ntype = thisProperty.propertyGroup().type;\n$bm_rt = gradEnabB = fx('MB ConnectLayersProStyles-0012').value > 0;\nif (gradEnabB) {\n    gradScale = $bm_div(fx('MB ConnectLayersProStyles-0017').value, 100);\n    curveEnabB = fx('Curviness').value > 0;\n    pts = path.points();\n    ptsAt0 = path.points(0);\n    lastIdx = path.isClosed() ? $bm_sub(pts.length, 2) : $bm_sub(pts.length, 1);\n    startPt = [\n        0,\n        0\n    ];\n    startPtAt0 = [\n        0,\n        0\n    ];\n    if (type == 2) {\n        for (i = 0; i < pts.length; i++) {\n            startPt = $bm_sum(startPt, pts[i]);\n            startPtAt0 = $bm_sum(startPtAt0, ptsAt0[i]);\n        }\n        startPt /= pts.length;\n        startPtAt0 /= ptsAt0.length;\n    } else {\n        startPt = pts[0];\n        startPtAt0 = ptsAt0[0];\n    }\n    isPennerB = false;\n    if (curveEnabB) {\n        curviness = {\n            LINEAR: 1,\n            SEP1: 2,\n            ARC: 3,\n            STEP: 4,\n            STEP_AFTER: 5,\n            STEP_BEFORE: 6,\n            SEP2: 7,\n            AUTO_BEZIER: 8,\n            CUSTOM_TENSION: 9,\n            SEP3: 10,\n            DYNAMIC_BEZIER: 11,\n            DYNAMIC_CUSTOM_BEZIER: 12,\n            DYNAMIC_VERLET: 13,\n            SEP4: 14,\n            IN_SINE: 15,\n            OUT_SINE: 16,\n            IN_OUT_SINE: 17,\n            IN_QUADRATIC: 18,\n            OUT_QUADRATIC: 19,\n            IN_OUT_QUADRATIC: 20,\n            IN_CUBIC: 21,\n            OUT_CUBIC: 22,\n            IN_OUT_CUBIC: 23,\n            IN_QUARTIC: 24,\n            OUT_QUARTIC: 25,\n            IN_OUT_QUARTIC: 26,\n            IN_QUINTIC: 27,\n            OUT_QUINTIC: 28,\n            IN_OUT_QUINTIC: 29,\n            IN_EXPONENTIAL: 30,\n            OUT_EXPONENTIAL: 31,\n            IN_OUT_EXPONENTIAL: 32,\n            IN_CIRCULAR: 33,\n            OUT_CIRCULAR: 34,\n            IN_OUT_CIRCULAR: 35,\n            SEP11: 36,\n            IN_BACK: 37,\n            OUT_BACK: 38,\n            IN_OUT_BACK: 39,\n            IN_ELASTIC: 40,\n            OUT_ELASTIC: 41,\n            IN_OUT_ELASTIC: 42,\n            IN_BOUNCE: 43,\n            OUT_BOUNCE: 44,\n            IN_OUT_BOUNCE: 45\n        };\n        curveId = fx('Function').value;\n        isPennerB = curveId >= curviness.IN_SINE;\n        if (isPennerB) {\n            precision = Math.round(fx('Precision').value);\n            if (path.isClosed())\n                lastIdx = $bm_sub(lastIdx, precision);\n        }\n    }\n    if (type == 2 || path.isClosed()) {\n        farthestId = 0;\n        maxD = 0;\n        for (i = 0; i < ptsAt0.length; i++) {\n            d = length($bm_sub(ptsAt0[i], startPtAt0));\n            if (d > maxD) {\n                maxD = d;\n                farthestId = i;\n            }\n        }\n        endPt = pts[farthestId];\n    } else {\n        endPt = pts[lastIdx];\n    }\n    if (gradScale != 1) {\n        if (type == 1) {\n            midPt = $bm_mul(0.5, $bm_sum(startPt, endPt));\n            u = $bm_sub(startPt, midPt);\n            v = $bm_sub(endPt, midPt);\n            startPt = $bm_sum(midPt, $bm_mul(gradScale, u));\n            endPt = $bm_sum(midPt, $bm_mul(gradScale, v));\n        } else {\n            v = $bm_sub(endPt, startPt);\n            endPt = $bm_sum(startPt, $bm_mul(gradScale, v));\n        }\n    }\n    $bm_rt = startPt;\n} else\n    $bm_rt = value;"},"e":{"a":0,"k":[100,0],"ix":5,"x":"var $bm_rt;\nvar is3dB, fx, path, type, gradEnabB, gradScale, curveEnabB, pts, ptsAt0, lastIdx, startPt, startPtAt0, i, startPt, startPtAt0, startPt, startPtAt0, startPt, startPtAt0, isPennerB, curviness, curveId, isPennerB, precision, lastIdx, farthestId, maxD, i, d, maxD, farthestId, endPt, endPt, midPt, u, v, startPt, endPt, v, endPt;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\npath = content('Chain 3').content('Paths').content('Path 1').content('Path').path;\ntype = thisProperty.propertyGroup().type;\n$bm_rt = gradEnabB = fx('MB ConnectLayersProStyles-0012').value > 0;\nif (gradEnabB) {\n    gradScale = $bm_div(fx('MB ConnectLayersProStyles-0017').value, 100);\n    curveEnabB = fx('Curviness').value > 0;\n    pts = path.points();\n    ptsAt0 = path.points(0);\n    lastIdx = path.isClosed() ? $bm_sub(pts.length, 2) : $bm_sub(pts.length, 1);\n    startPt = [\n        0,\n        0\n    ];\n    startPtAt0 = [\n        0,\n        0\n    ];\n    if (type == 2) {\n        for (i = 0; i < pts.length; i++) {\n            startPt = $bm_sum(startPt, pts[i]);\n            startPtAt0 = $bm_sum(startPtAt0, ptsAt0[i]);\n        }\n        startPt /= pts.length;\n        startPtAt0 /= ptsAt0.length;\n    } else {\n        startPt = pts[0];\n        startPtAt0 = ptsAt0[0];\n    }\n    isPennerB = false;\n    if (curveEnabB) {\n        curviness = {\n            LINEAR: 1,\n            SEP1: 2,\n            ARC: 3,\n            STEP: 4,\n            STEP_AFTER: 5,\n            STEP_BEFORE: 6,\n            SEP2: 7,\n            AUTO_BEZIER: 8,\n            CUSTOM_TENSION: 9,\n            SEP3: 10,\n            DYNAMIC_BEZIER: 11,\n            DYNAMIC_CUSTOM_BEZIER: 12,\n            DYNAMIC_VERLET: 13,\n            SEP4: 14,\n            IN_SINE: 15,\n            OUT_SINE: 16,\n            IN_OUT_SINE: 17,\n            IN_QUADRATIC: 18,\n            OUT_QUADRATIC: 19,\n            IN_OUT_QUADRATIC: 20,\n            IN_CUBIC: 21,\n            OUT_CUBIC: 22,\n            IN_OUT_CUBIC: 23,\n            IN_QUARTIC: 24,\n            OUT_QUARTIC: 25,\n            IN_OUT_QUARTIC: 26,\n            IN_QUINTIC: 27,\n            OUT_QUINTIC: 28,\n            IN_OUT_QUINTIC: 29,\n            IN_EXPONENTIAL: 30,\n            OUT_EXPONENTIAL: 31,\n            IN_OUT_EXPONENTIAL: 32,\n            IN_CIRCULAR: 33,\n            OUT_CIRCULAR: 34,\n            IN_OUT_CIRCULAR: 35,\n            SEP11: 36,\n            IN_BACK: 37,\n            OUT_BACK: 38,\n            IN_OUT_BACK: 39,\n            IN_ELASTIC: 40,\n            OUT_ELASTIC: 41,\n            IN_OUT_ELASTIC: 42,\n            IN_BOUNCE: 43,\n            OUT_BOUNCE: 44,\n            IN_OUT_BOUNCE: 45\n        };\n        curveId = fx('Function').value;\n        isPennerB = curveId >= curviness.IN_SINE;\n        if (isPennerB) {\n            precision = Math.round(fx('Precision').value);\n            if (path.isClosed())\n                lastIdx = $bm_sub(lastIdx, precision);\n        }\n    }\n    if (type == 2 || path.isClosed()) {\n        farthestId = 0;\n        maxD = 0;\n        for (i = 0; i < ptsAt0.length; i++) {\n            d = length($bm_sub(ptsAt0[i], startPtAt0));\n            if (d > maxD) {\n                maxD = d;\n                farthestId = i;\n            }\n        }\n        endPt = pts[farthestId];\n    } else {\n        endPt = pts[lastIdx];\n    }\n    if (gradScale != 1) {\n        if (type == 1) {\n            midPt = $bm_mul(0.5, $bm_sum(startPt, endPt));\n            u = $bm_sub(startPt, midPt);\n            v = $bm_sub(endPt, midPt);\n            startPt = $bm_sum(midPt, $bm_mul(gradScale, u));\n            endPt = $bm_sum(midPt, $bm_mul(gradScale, v));\n        } else {\n            v = $bm_sub(endPt, startPt);\n            endPt = $bm_sum(startPt, $bm_mul(gradScale, v));\n        }\n    }\n    $bm_rt = endPt;\n} else\n    $bm_rt = value;"},"t":1,"lc":1,"lj":1,"ml":4,"ml2":{"a":0,"k":4,"ix":13},"bm":0,"nm":"Gradient Stroke","mn":"ADBE Vector Graphic - G-Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nvar is3dB, fx, fillEnabB, res, paletteId, paletteId, pathId, numPaths, sat, sat, luma, seed, seed, cVal, res;\nfunction HueToRgb(p, q, t) {\n    if (t < 0)\n        t++;\n    if (t > 1)\n        t--;\n    if (t < 1 / 6)\n        return $bm_sum(p, $bm_mul($bm_mul($bm_sub(q, p), 6), t));\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return $bm_sum(p, $bm_mul($bm_mul($bm_sub(q, p), 6), $bm_sub(2 / 3, t)));\n    return p;\n}\nfunction HslToRgb(h, s, l) {\n    var c = {\n        alphaF: 0,\n        redF: 0,\n        greenF: 0,\n        blueF: 0\n    };\n    if (s == 0) {\n        c.alphaF = 1;\n        c.redF = c.greenF = c.blueF = 1;\n    } else {\n        var q = l < 0.5 ? $bm_mul(l, $bm_sum(1, s)) : $bm_sub($bm_sum(l, s), $bm_mul(l, s));\n        var p = $bm_sub($bm_mul(2, l), q);\n        c.alphaF = 1;\n        c.redF = HueToRgb(p, q, $bm_sum(h, 1 / 3));\n        c.greenF = HueToRgb(p, q, h);\n        c.blueF = HueToRgb(p, q, $bm_sub(h, 1 / 3));\n    }\n    return c;\n}\nfunction GetColorFromKulerScheme(colors, idx, total) {\n    var colorVal = {\n        alphaF: 0,\n        redF: 0,\n        greenF: 0,\n        blueF: 0\n    };\n    var incr = $bm_div(5, total);\n    var frac = $bm_mul(incr, $bm_sub(idx, 1));\n    var low = Math.max(0, Math.floor(frac));\n    var high = Math.min(4, Math.ceil(frac));\n    if (low != high) {\n        colorVal.alphaF = 1;\n        colorVal.redF = $bm_div($bm_div($bm_sum(colors[low][0], colors[high][0]), 2), 255);\n        colorVal.greenF = $bm_div($bm_div($bm_sum(colors[low][1], colors[high][1]), 2), 255);\n        colorVal.blueF = $bm_div($bm_div($bm_sum(colors[low][2], colors[high][2]), 2), 255);\n    } else {\n        colorVal.alphaF = 1;\n        colorVal.redF = $bm_div(colors[low][0], 255);\n        colorVal.greenF = $bm_div(colors[low][1], 255);\n        colorVal.blueF = $bm_div(colors[low][2], 255);\n    }\n    return colorVal;\n}\nfunction GetPathColor(paletteId, pathId, numPaths) {\n    var firstScratch, secondScratch, L, pts, pt;\n    var colorVal = {\n        alphaF: 0,\n        redF: 0,\n        greenF: 0,\n        blueF: 0\n    };\n    switch (paletteId) {\n    case 1: {\n            firstScratch = [\n                0,\n                0,\n                0\n            ];\n            try {\n                firstScratch = fx('MB ConnectLayersProStyles-0023').value;\n            } catch (e) {\n            }\n            colorVal.alphaF = 1;\n            colorVal.redF = firstScratch[0];\n            colorVal.greenF = firstScratch[1];\n            colorVal.blueF = firstScratch[2];\n            break;\n        }\n    case 2: {\n            firstScratch = secondScratch = [\n                0,\n                0,\n                0\n            ];\n            try {\n                firstScratch = fx('MB ConnectLayersProStyles-0023').value;\n                secondScratch = fx('End Color').value;\n            } catch (e) {\n            }\n            colorVal.alphaF = 1;\n            colorVal.redF = linear(pathId, 1, numPaths, firstScratch[0], secondScratch[0]);\n            colorVal.greenF = linear(pathId, 1, numPaths, firstScratch[1], secondScratch[1]);\n            colorVal.blueF = linear(pathId, 1, numPaths, firstScratch[2], secondScratch[2]);\n            break;\n        }\n    case 3: {\n            var c = HslToRgb(pathId / numPaths, sat, luma);\n            colorVal.alphaF = 1;\n            colorVal.redF = c.redF;\n            colorVal.greenF = c.greenF;\n            colorVal.blueF = c.blueF;\n            break;\n        }\n    case 4: {\n            colorVal.alphaF = 1;\n            colorVal.redF = random();\n            colorVal.greenF = random();\n            colorVal.blueF = random();\n            break;\n        }\n    case 5: {\n            try {\n                L = fx('Color Layer');\n                pts = content('Chain 3').content('Paths').content('Path 1').content('Path').path.points();\n                pt = [\n                    0,\n                    0\n                ];\n                for (var i = 0; i < pts.length; i++) {\n                    pt += toComp(pts[i]);\n                }\n                pt /= pts.length;\n                if (pt.length == 3)\n                    pt.pop();\n                pt = L.fromCompToSurface(pt);\n                c = L.sampleImage(pt);\n                colorVal.alphaF = c[3];\n                colorVal.redF = c[0];\n                colorVal.greenF = c[1];\n                colorVal.blueF = c[2];\n            } catch (e) {\n                colorVal.alphaF = colorVal.redF = colorVal.greenF = colorVal.blueF = 0;\n            }\n            break;\n        }\n    case 6: {\n            break;\n        }\n    case 7: {\n            var colors = [\n                [\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    38,\n                    50,\n                    72\n                ],\n                [\n                    126,\n                    138,\n                    162\n                ],\n                [\n                    255,\n                    255,\n                    255\n                ],\n                [\n                    255,\n                    152,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 8: {\n            var colors = [\n                [\n                    207,\n                    194,\n                    145\n                ],\n                [\n                    255,\n                    246,\n                    197\n                ],\n                [\n                    161,\n                    232,\n                    217\n                ],\n                [\n                    255,\n                    113,\n                    44\n                ],\n                [\n                    105,\n                    93,\n                    70\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 9: {\n            var colors = [\n                [\n                    194,\n                    71,\n                    4\n                ],\n                [\n                    217,\n                    204,\n                    60\n                ],\n                [\n                    255,\n                    235,\n                    121\n                ],\n                [\n                    160,\n                    224,\n                    169\n                ],\n                [\n                    0,\n                    173,\n                    167\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 10: {\n            var colors = [\n                [\n                    43,\n                    58,\n                    66\n                ],\n                [\n                    63,\n                    87,\n                    101\n                ],\n                [\n                    189,\n                    212,\n                    222\n                ],\n                [\n                    239,\n                    239,\n                    239\n                ],\n                [\n                    255,\n                    83,\n                    13\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 11: {\n            var colors = [\n                [\n                    185,\n                    18,\n                    27\n                ],\n                [\n                    76,\n                    27,\n                    27\n                ],\n                [\n                    246,\n                    228,\n                    151\n                ],\n                [\n                    252,\n                    250,\n                    225\n                ],\n                [\n                    189,\n                    141,\n                    70\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 12: {\n            var colors = [\n                [\n                    0,\n                    88,\n                    95\n                ],\n                [\n                    0,\n                    147,\n                    147\n                ],\n                [\n                    255,\n                    255,\n                    196\n                ],\n                [\n                    240,\n                    237,\n                    187\n                ],\n                [\n                    255,\n                    56,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 13: {\n            var colors = [\n                [\n                    70,\n                    137,\n                    102\n                ],\n                [\n                    255,\n                    240,\n                    165\n                ],\n                [\n                    255,\n                    176,\n                    59\n                ],\n                [\n                    182,\n                    73,\n                    38\n                ],\n                [\n                    142,\n                    40,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 14: {\n            var colors = [\n                [\n                    47,\n                    41,\n                    51\n                ],\n                [\n                    1,\n                    162,\n                    166\n                ],\n                [\n                    41,\n                    217,\n                    194\n                ],\n                [\n                    189,\n                    242,\n                    113\n                ],\n                [\n                    255,\n                    255,\n                    166\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 15: {\n            var colors = [\n                [\n                    150,\n                    45,\n                    62\n                ],\n                [\n                    52,\n                    54,\n                    66\n                ],\n                [\n                    151,\n                    156,\n                    156\n                ],\n                [\n                    242,\n                    235,\n                    199\n                ],\n                [\n                    52,\n                    136,\n                    153\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 16: {\n            var colors = [\n                [\n                    133,\n                    219,\n                    24\n                ],\n                [\n                    205,\n                    232,\n                    85\n                ],\n                [\n                    245,\n                    246,\n                    212\n                ],\n                [\n                    167,\n                    197,\n                    32\n                ],\n                [\n                    73,\n                    63,\n                    11\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 17: {\n            var colors = [\n                [\n                    213,\n                    251,\n                    255\n                ],\n                [\n                    159,\n                    188,\n                    191\n                ],\n                [\n                    100,\n                    118,\n                    120\n                ],\n                [\n                    47,\n                    55,\n                    56\n                ],\n                [\n                    89,\n                    216,\n                    230\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 18: {\n            var colors = [\n                [\n                    90,\n                    31,\n                    0\n                ],\n                [\n                    209,\n                    87,\n                    13\n                ],\n                [\n                    253,\n                    231,\n                    146\n                ],\n                [\n                    71,\n                    119,\n                    37\n                ],\n                [\n                    169,\n                    204,\n                    102\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 19: {\n            var colors = [\n                [\n                    16,\n                    91,\n                    99\n                ],\n                [\n                    255,\n                    250,\n                    213\n                ],\n                [\n                    255,\n                    211,\n                    78\n                ],\n                [\n                    219,\n                    158,\n                    54\n                ],\n                [\n                    189,\n                    73,\n                    50\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 20: {\n            var colors = [\n                [\n                    216,\n                    202,\n                    168\n                ],\n                [\n                    92,\n                    131,\n                    47\n                ],\n                [\n                    40,\n                    73,\n                    7\n                ],\n                [\n                    56,\n                    37,\n                    19\n                ],\n                [\n                    54,\n                    57,\n                    66\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 21: {\n            var colors = [\n                [\n                    252,\n                    255,\n                    245\n                ],\n                [\n                    209,\n                    219,\n                    189\n                ],\n                [\n                    145,\n                    170,\n                    157\n                ],\n                [\n                    62,\n                    96,\n                    111\n                ],\n                [\n                    25,\n                    52,\n                    65\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 22: {\n            var colors = [\n                [\n                    64,\n                    89,\n                    82\n                ],\n                [\n                    156,\n                    155,\n                    122\n                ],\n                [\n                    255,\n                    211,\n                    147\n                ],\n                [\n                    255,\n                    151,\n                    79\n                ],\n                [\n                    245,\n                    79,\n                    41\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 23: {\n            var colors = [\n                [\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    51,\n                    51,\n                    51\n                ],\n                [\n                    255,\n                    53,\n                    139\n                ],\n                [\n                    1,\n                    176,\n                    240\n                ],\n                [\n                    174,\n                    238,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 24: {\n            var colors = [\n                [\n                    108,\n                    110,\n                    88\n                ],\n                [\n                    62,\n                    66,\n                    58\n                ],\n                [\n                    65,\n                    115,\n                    120\n                ],\n                [\n                    164,\n                    207,\n                    190\n                ],\n                [\n                    244,\n                    247,\n                    217\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 25: {\n            var colors = [\n                [\n                    255,\n                    248,\n                    227\n                ],\n                [\n                    204,\n                    204,\n                    159\n                ],\n                [\n                    51,\n                    51,\n                    45\n                ],\n                [\n                    159,\n                    180,\n                    204\n                ],\n                [\n                    219,\n                    65,\n                    5\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 26: {\n            var colors = [\n                [\n                    180,\n                    175,\n                    145\n                ],\n                [\n                    120,\n                    119,\n                    70\n                ],\n                [\n                    64,\n                    65,\n                    30\n                ],\n                [\n                    50,\n                    51,\n                    29\n                ],\n                [\n                    192,\n                    48,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 27: {\n            var colors = [\n                [\n                    4,\n                    191,\n                    191\n                ],\n                [\n                    202,\n                    252,\n                    216\n                ],\n                [\n                    247,\n                    233,\n                    103\n                ],\n                [\n                    169,\n                    207,\n                    84\n                ],\n                [\n                    88,\n                    143,\n                    39\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 28: {\n            var colors = [\n                [\n                    255,\n                    97,\n                    56\n                ],\n                [\n                    255,\n                    255,\n                    157\n                ],\n                [\n                    190,\n                    235,\n                    159\n                ],\n                [\n                    121,\n                    189,\n                    143\n                ],\n                [\n                    0,\n                    163,\n                    136\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 29: {\n            var colors = [\n                [\n                    176,\n                    204,\n                    153\n                ],\n                [\n                    103,\n                    126,\n                    82\n                ],\n                [\n                    183,\n                    202,\n                    121\n                ],\n                [\n                    246,\n                    232,\n                    177\n                ],\n                [\n                    137,\n                    114,\n                    91\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 30: {\n            var colors = [\n                [\n                    62,\n                    69,\n                    76\n                ],\n                [\n                    33,\n                    133,\n                    197\n                ],\n                [\n                    126,\n                    206,\n                    253\n                ],\n                [\n                    255,\n                    246,\n                    229\n                ],\n                [\n                    255,\n                    127,\n                    102\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 31: {\n            var colors = [\n                [\n                    230,\n                    226,\n                    175\n                ],\n                [\n                    167,\n                    163,\n                    126\n                ],\n                [\n                    239,\n                    236,\n                    202\n                ],\n                [\n                    4,\n                    99,\n                    128\n                ],\n                [\n                    0,\n                    47,\n                    47\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 32: {\n            var colors = [\n                [\n                    220,\n                    53,\n                    34\n                ],\n                [\n                    217,\n                    203,\n                    158\n                ],\n                [\n                    55,\n                    65,\n                    64\n                ],\n                [\n                    42,\n                    44,\n                    43\n                ],\n                [\n                    30,\n                    30,\n                    32\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 33: {\n            var colors = [\n                [\n                    89,\n                    82,\n                    65\n                ],\n                [\n                    184,\n                    174,\n                    156\n                ],\n                [\n                    255,\n                    255,\n                    255\n                ],\n                [\n                    172,\n                    207,\n                    204\n                ],\n                [\n                    138,\n                    9,\n                    23\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 34: {\n            var colors = [\n                [\n                    0,\n                    67,\n                    88\n                ],\n                [\n                    31,\n                    138,\n                    112\n                ],\n                [\n                    190,\n                    219,\n                    57\n                ],\n                [\n                    255,\n                    225,\n                    26\n                ],\n                [\n                    253,\n                    116,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 35: {\n            var colors = [\n                [\n                    125,\n                    138,\n                    46\n                ],\n                [\n                    201,\n                    215,\n                    135\n                ],\n                [\n                    255,\n                    255,\n                    255\n                ],\n                [\n                    255,\n                    192,\n                    169\n                ],\n                [\n                    255,\n                    133,\n                    152\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 36: {\n            var colors = [\n                [\n                    16,\n                    34,\n                    13\n                ],\n                [\n                    149,\n                    171,\n                    99\n                ],\n                [\n                    189,\n                    214,\n                    132\n                ],\n                [\n                    226,\n                    240,\n                    214\n                ],\n                [\n                    246,\n                    255,\n                    224\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    default:\n        break;\n    }\n    return colorVal;\n}\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\nfillEnabB = fx('Enable Fill').value > 0;\nres = value;\nif (fillEnabB) {\n    paletteId = 1;\n    try {\n        paletteId = fx('Fill Palette').value;\n    } catch (e) {\n    }\n    pathId = 1;\n    numPaths = 1;\n    if (paletteId == 3) {\n        sat = luma = 0.5;\n        try {\n            sat = $bm_div(fx('Saturation').value, 100);\n            luma = $bm_div(fx('Luminance').value, 100);\n        } catch (e) {\n        }\n    } else if (paletteId == 4) {\n        seed = 1;\n        try {\n            seed = fx('Random Seed').value;\n        } catch (e) {\n        }\n        seedRandom(seed, true);\n    }\n    cVal = GetPathColor(paletteId, pathId, numPaths);\n    res = [\n        cVal.redF,\n        cVal.greenF,\n        cVal.blueF,\n        cVal.alphaF\n    ];\n}\n$bm_rt = res;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nvar is3dB, fx, res, fillEnabB, res, opaDistB, near, far, reverseB, path, pts, d, res, res, res, res, paletteId, paletteId, L, L, L, pts, pt, pt, pt, pt, c, res, res, res;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\nif (fx('MB ConnectLayersProStyles-0034').value > 0)\n    res = 0;\nelse {\n    fillEnabB = fx('Enable Fill').value > 0;\n    if (fillEnabB) {\n        res = fx('MB ConnectLayersProStyles-0029').value;\n        opaDistB = fx('MB ConnectLayersProStyles-0030').value > 0;\n        if (opaDistB) {\n            near = fx('MB ConnectLayersProStyles-0031').value;\n            far = fx('MB ConnectLayersProStyles-0032').value;\n            reverseB = fx('MB ConnectLayersProStyles-0033').value > 0;\n            path = content('Chain 3').content('Paths').content('Path 1').content('Path').path;\n            pts = path.points();\n            d = path.isClosed() ? length($bm_sub(pts[1], pts[0])) : length($bm_sub(pts[$bm_sub(pts.length, 1)], pts[0]));\n            if (d <= near)\n                res = 100;\n            else if (d >= far)\n                res = 0;\n            else\n                res *= ease(d, near, far, 1, 0);\n            if (reverseB)\n                res = $bm_sub(100, res);\n        }\n        paletteId = 1;\n        try {\n            paletteId = fx('Fill Palette').value;\n        } catch (e) {\n        }\n        if (paletteId == 5) {\n            L = null;\n            try {\n                L = fx('Color Layer');\n            } catch (e) {\n                L = null;\n            }\n            if (L) {\n                pts = content('Chain 3').content('Paths').content('Path 1').content('Path').path.points();\n                pt = [\n                    0,\n                    0\n                ];\n                for (var i = 0; i < pts.length; i++) {\n                    pt = $bm_sum(pt, toComp(pts[i]));\n                }\n                pt /= pts.length;\n                if (pt.length == 3)\n                    pt.pop();\n                pt = L.fromCompToSurface(pt);\n                c = L.sampleImage(pt);\n                res *= c[3];\n            } else\n                res = 0;\n        }\n    } else\n        res = 0;\n}\n$bm_rt = res;"},"r":1,"bm":0,"nm":"Fill","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"gf","o":{"a":0,"k":100,"ix":10,"x":"var $bm_rt;\nvar is3dB, fx, gradEnabB, res, opaDistB, near, far, reverseB, path, pts, d, res, res, res, res, res;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\ngradEnabB = fx('MB ConnectLayersProStyles-0034').value > 0;\nif (gradEnabB) {\n    res = fx('MB ConnectLayersProStyles-0029').value;\n    opaDistB = fx('MB ConnectLayersProStyles-0030').value > 0;\n    if (opaDistB) {\n        near = fx('MB ConnectLayersProStyles-0031').value;\n        far = fx('MB ConnectLayersProStyles-0032').value;\n        reverseB = fx('MB ConnectLayersProStyles-0033').value > 0;\n        path = content('Chain 3').content('Paths').content('Path 1').content('Path').path;\n        pts = path.points();\n        d = path.isClosed() ? length($bm_sub(pts[1], pts[0])) : length($bm_sub(pts[$bm_sub(pts.length, 1)], pts[0]));\n        if (d <= near)\n            res = 100;\n        else if (d >= far)\n            res = 0;\n        else\n            res *= ease(d, near, far, 1, 0);\n        if (reverseB)\n            res = $bm_sub(100, res);\n    }\n} else\n    res = 0;\n$bm_rt = res;"},"r":1,"bm":0,"g":{"p":2,"k":{"a":0,"k":[0,1,1,1,1,0,0,0],"ix":9}},"s":{"a":0,"k":[0,0],"ix":5,"x":"var $bm_rt;\nvar is3dB, fx, path, type, gradEnabB, gradScale, curveEnabB, pts, ptsAt0, lastIdx, startPt, startPtAt0, i, startPt, startPtAt0, startPt, startPtAt0, startPt, startPtAt0, isPennerB, curviness, curveId, isPennerB, precision, lastIdx, farthestId, maxD, i, d, maxD, farthestId, endPt, endPt, midPt, u, v, startPt, endPt, v, endPt;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\npath = content('Chain 3').content('Paths').content('Path 1').content('Path').path;\ntype = thisProperty.propertyGroup().type;\n$bm_rt = gradEnabB = fx('MB ConnectLayersProStyles-0034').value > 0;\nif (gradEnabB) {\n    gradScale = $bm_div(fx('MB ConnectLayersProStyles-0039').value, 100);\n    curveEnabB = fx('Curviness').value > 0;\n    pts = path.points();\n    ptsAt0 = path.points(0);\n    lastIdx = path.isClosed() ? $bm_sub(pts.length, 2) : $bm_sub(pts.length, 1);\n    startPt = [\n        0,\n        0\n    ];\n    startPtAt0 = [\n        0,\n        0\n    ];\n    if (type == 2) {\n        for (i = 0; i < pts.length; i++) {\n            startPt = $bm_sum(startPt, pts[i]);\n            startPtAt0 = $bm_sum(startPtAt0, ptsAt0[i]);\n        }\n        startPt /= pts.length;\n        startPtAt0 /= ptsAt0.length;\n    } else {\n        startPt = pts[0];\n        startPtAt0 = ptsAt0[0];\n    }\n    isPennerB = false;\n    if (curveEnabB) {\n        curviness = {\n            LINEAR: 1,\n            SEP1: 2,\n            ARC: 3,\n            STEP: 4,\n            STEP_AFTER: 5,\n            STEP_BEFORE: 6,\n            SEP2: 7,\n            AUTO_BEZIER: 8,\n            CUSTOM_TENSION: 9,\n            SEP3: 10,\n            DYNAMIC_BEZIER: 11,\n            DYNAMIC_CUSTOM_BEZIER: 12,\n            DYNAMIC_VERLET: 13,\n            SEP4: 14,\n            IN_SINE: 15,\n            OUT_SINE: 16,\n            IN_OUT_SINE: 17,\n            IN_QUADRATIC: 18,\n            OUT_QUADRATIC: 19,\n            IN_OUT_QUADRATIC: 20,\n            IN_CUBIC: 21,\n            OUT_CUBIC: 22,\n            IN_OUT_CUBIC: 23,\n            IN_QUARTIC: 24,\n            OUT_QUARTIC: 25,\n            IN_OUT_QUARTIC: 26,\n            IN_QUINTIC: 27,\n            OUT_QUINTIC: 28,\n            IN_OUT_QUINTIC: 29,\n            IN_EXPONENTIAL: 30,\n            OUT_EXPONENTIAL: 31,\n            IN_OUT_EXPONENTIAL: 32,\n            IN_CIRCULAR: 33,\n            OUT_CIRCULAR: 34,\n            IN_OUT_CIRCULAR: 35,\n            SEP11: 36,\n            IN_BACK: 37,\n            OUT_BACK: 38,\n            IN_OUT_BACK: 39,\n            IN_ELASTIC: 40,\n            OUT_ELASTIC: 41,\n            IN_OUT_ELASTIC: 42,\n            IN_BOUNCE: 43,\n            OUT_BOUNCE: 44,\n            IN_OUT_BOUNCE: 45\n        };\n        curveId = fx('Function').value;\n        isPennerB = curveId >= curviness.IN_SINE;\n        if (isPennerB) {\n            precision = Math.round(fx('Precision').value);\n            if (path.isClosed())\n                lastIdx = $bm_sub(lastIdx, precision);\n        }\n    }\n    if (type == 2 || path.isClosed()) {\n        farthestId = 0;\n        maxD = 0;\n        for (i = 0; i < ptsAt0.length; i++) {\n            d = length($bm_sub(ptsAt0[i], startPtAt0));\n            if (d > maxD) {\n                maxD = d;\n                farthestId = i;\n            }\n        }\n        endPt = pts[farthestId];\n    } else {\n        endPt = pts[lastIdx];\n    }\n    if (gradScale != 1) {\n        if (type == 1) {\n            midPt = $bm_mul(0.5, $bm_sum(startPt, endPt));\n            u = $bm_sub(startPt, midPt);\n            v = $bm_sub(endPt, midPt);\n            startPt = $bm_sum(midPt, $bm_mul(gradScale, u));\n            endPt = $bm_sum(midPt, $bm_mul(gradScale, v));\n        } else {\n            v = $bm_sub(endPt, startPt);\n            endPt = $bm_sum(startPt, $bm_mul(gradScale, v));\n        }\n    }\n    $bm_rt = startPt;\n} else\n    $bm_rt = value;"},"e":{"a":0,"k":[100,0],"ix":6,"x":"var $bm_rt;\nvar is3dB, fx, path, type, gradEnabB, gradScale, curveEnabB, pts, ptsAt0, lastIdx, startPt, startPtAt0, i, startPt, startPtAt0, startPt, startPtAt0, startPt, startPtAt0, isPennerB, curviness, curveId, isPennerB, precision, lastIdx, farthestId, maxD, i, d, maxD, farthestId, endPt, endPt, midPt, u, v, startPt, endPt, v, endPt;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\npath = content('Chain 3').content('Paths').content('Path 1').content('Path').path;\ntype = thisProperty.propertyGroup().type;\n$bm_rt = gradEnabB = fx('MB ConnectLayersProStyles-0034').value > 0;\nif (gradEnabB) {\n    gradScale = $bm_div(fx('MB ConnectLayersProStyles-0039').value, 100);\n    curveEnabB = fx('Curviness').value > 0;\n    pts = path.points();\n    ptsAt0 = path.points(0);\n    lastIdx = path.isClosed() ? $bm_sub(pts.length, 2) : $bm_sub(pts.length, 1);\n    startPt = [\n        0,\n        0\n    ];\n    startPtAt0 = [\n        0,\n        0\n    ];\n    if (type == 2) {\n        for (i = 0; i < pts.length; i++) {\n            startPt = $bm_sum(startPt, pts[i]);\n            startPtAt0 = $bm_sum(startPtAt0, ptsAt0[i]);\n        }\n        startPt /= pts.length;\n        startPtAt0 /= ptsAt0.length;\n    } else {\n        startPt = pts[0];\n        startPtAt0 = ptsAt0[0];\n    }\n    isPennerB = false;\n    if (curveEnabB) {\n        curviness = {\n            LINEAR: 1,\n            SEP1: 2,\n            ARC: 3,\n            STEP: 4,\n            STEP_AFTER: 5,\n            STEP_BEFORE: 6,\n            SEP2: 7,\n            AUTO_BEZIER: 8,\n            CUSTOM_TENSION: 9,\n            SEP3: 10,\n            DYNAMIC_BEZIER: 11,\n            DYNAMIC_CUSTOM_BEZIER: 12,\n            DYNAMIC_VERLET: 13,\n            SEP4: 14,\n            IN_SINE: 15,\n            OUT_SINE: 16,\n            IN_OUT_SINE: 17,\n            IN_QUADRATIC: 18,\n            OUT_QUADRATIC: 19,\n            IN_OUT_QUADRATIC: 20,\n            IN_CUBIC: 21,\n            OUT_CUBIC: 22,\n            IN_OUT_CUBIC: 23,\n            IN_QUARTIC: 24,\n            OUT_QUARTIC: 25,\n            IN_OUT_QUARTIC: 26,\n            IN_QUINTIC: 27,\n            OUT_QUINTIC: 28,\n            IN_OUT_QUINTIC: 29,\n            IN_EXPONENTIAL: 30,\n            OUT_EXPONENTIAL: 31,\n            IN_OUT_EXPONENTIAL: 32,\n            IN_CIRCULAR: 33,\n            OUT_CIRCULAR: 34,\n            IN_OUT_CIRCULAR: 35,\n            SEP11: 36,\n            IN_BACK: 37,\n            OUT_BACK: 38,\n            IN_OUT_BACK: 39,\n            IN_ELASTIC: 40,\n            OUT_ELASTIC: 41,\n            IN_OUT_ELASTIC: 42,\n            IN_BOUNCE: 43,\n            OUT_BOUNCE: 44,\n            IN_OUT_BOUNCE: 45\n        };\n        curveId = fx('Function').value;\n        isPennerB = curveId >= curviness.IN_SINE;\n        if (isPennerB) {\n            precision = Math.round(fx('Precision').value);\n            if (path.isClosed())\n                lastIdx = $bm_sub(lastIdx, precision);\n        }\n    }\n    if (type == 2 || path.isClosed()) {\n        farthestId = 0;\n        maxD = 0;\n        for (i = 0; i < ptsAt0.length; i++) {\n            d = length($bm_sub(ptsAt0[i], startPtAt0));\n            if (d > maxD) {\n                maxD = d;\n                farthestId = i;\n            }\n        }\n        endPt = pts[farthestId];\n    } else {\n        endPt = pts[lastIdx];\n    }\n    if (gradScale != 1) {\n        if (type == 1) {\n            midPt = $bm_mul(0.5, $bm_sum(startPt, endPt));\n            u = $bm_sub(startPt, midPt);\n            v = $bm_sub(endPt, midPt);\n            startPt = $bm_sum(midPt, $bm_mul(gradScale, u));\n            endPt = $bm_sum(midPt, $bm_mul(gradScale, v));\n        } else {\n            v = $bm_sub(endPt, startPt);\n            endPt = $bm_sum(startPt, $bm_mul(gradScale, v));\n        }\n    }\n    $bm_rt = endPt;\n} else\n    $bm_rt = value;"},"t":1,"nm":"Gradient Fill","mn":"ADBE Vector Graphic - G-Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Path 1","np":7,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Paths","np":6,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Chain 3","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2000,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":7,"ty":4,"nm":"prise2","parent":8,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":1,"k":[{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.5],"y":[0]},"t":30,"s":[61]},{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.5],"y":[0]},"t":87,"s":[-39]},{"t":185,"s":[61]}],"ix":10},"p":{"a":0,"k":[52.243,43.367,0],"ix":2,"l":2},"a":{"a":0,"k":[0,-72.35,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0.25,-0.64],[-0.048,-1.078],[0.304,-2.876],[0.094,-2.07],[0.594,-6.484],[0,0],[12.038,-16.078],[0,0],[0,0],[-0.102,-1.766],[-0.521,-0.774],[-0.43,-0.164],[-0.57,-0.016],[-2.07,0.102],[0,0],[0,0],[-0.164,-3.054],[-0.118,-3.704],[-0.164,-2.556],[-0.08,-0.766],[-2.758,1.508],[-0.468,2.008],[0.264,5.118],[-0.11,3.868],[0,0],[0,0],[-1.696,-0.024],[-0.18,-0.092],[-0.132,-0.312],[-0.032,-0.266],[-0.04,-0.446],[-0.07,-1.438],[-0.062,-4.022],[-0.118,-2.938],[-0.056,-0.93],[-0.086,-0.32],[-1.312,-0.664],[-1.194,0.366],[-0.976,0.992],[0.188,4.814],[0.024,3.038],[-0.102,0.938],[0,0],[0,0],[-0.93,0.234],[-0.304,0.57],[-0.07,0.664],[-0.024,0.976],[0.07,2.492],[0.18,2.056],[0.11,0.736],[0.148,0.376],[1.132,1.22],[2.422,3.602],[0.312,0.406],[0.118,0.14],[0.15,0.094],[0.102,0.118],[0.15,0.22],[0.444,0.712],[1.086,1.866],[0.79,1.462],[0.228,0.462],[0.054,0.142],[0,-0.094],[0.054,0.158],[0.086,0.194],[0.258,0.484],[0.414,4.672],[0.234,1.586],[0.132,1.242],[0.352,2.664],[-0.008,2.134],[0.29,0.82],[0.906,0.686],[0,0],[0,0]],"o":[[0,0],[0,0],[-0.68,0.516],[-0.25,0.642],[0.172,3.726],[-0.158,1.452],[-0.242,5.492],[0,0],[-0.796,10.664],[0,0],[0,0],[0.086,3.312],[0.102,1.766],[0.258,0.39],[0.43,0.164],[1.148,0.038],[0,0],[0,0],[0.124,0.89],[0.172,3.062],[0.124,3.704],[0.084,1.272],[1.312,3.726],[1.704,-0.992],[0.47,-2.008],[-0.25,-4.866],[0,0],[0,0],[6.648,-0.524],[0.852,0.008],[0.188,0.102],[-0.008,-0.016],[0.04,0.266],[0.07,0.882],[0.14,2.874],[0.07,4.032],[0.054,1.46],[0.062,0.93],[0.306,1.172],[1.306,0.672],[0.954,-0.298],[0.922,-1.992],[-0.14,-3.616],[-0.022,-3.04],[0,0],[0,0],[2.422,-0.196],[0.93,-0.242],[0.188,-0.344],[0.072,-0.664],[0.054,-1.954],[-0.078,-2.492],[-0.086,-1.022],[-0.102,-0.734],[-0.47,-1.14],[-2.906,-3.218],[-0.352,-0.532],[-0.156,-0.202],[-0.124,-0.134],[0.07,0.04],[-0.094,-0.124],[-0.296,-0.428],[-0.892,-1.414],[-1.086,-1.868],[-0.398,-0.734],[-0.108,-0.234],[-0.064,-0.14],[0,-0.178],[-0.056,-0.148],[-0.172,-0.4],[-1.618,-3.094],[-0.226,-2.564],[-0.234,-1.556],[-0.132,-1.266],[-0.342,-2.634],[0,-1.852],[-0.288,-0.822],[0,0],[0,0],[0,0]],"v":[[-8.144,-71.808],[-10.415,-71.718],[-11.673,-70.772],[-13.063,-69.14],[-13.297,-66.67],[-13.445,-59.272],[-13.883,-52.89],[-15.243,-33.858],[-15.243,-33.842],[-35.219,7.892],[-38.821,12.704],[-38.509,24.338],[-38.313,31.822],[-37.517,35.494],[-36.461,36.33],[-34.969,36.58],[-30.251,36.36],[-25.907,36.15],[-25.469,39.204],[-25.001,45.532],[-24.555,56.048],[-24.109,65.744],[-23.859,68.838],[-16.165,71.556],[-12.939,67.532],[-12.781,57.438],[-13.031,41.54],[-12.837,34.844],[0.179,33.814],[11.875,33.056],[13.327,33.258],[13.679,33.774],[13.765,34.22],[13.883,35.29],[14.101,38.814],[14.421,49.508],[14.711,60.306],[14.883,63.946],[15.069,65.766],[17.827,68.58],[21.819,69.244],[25.117,66.97],[26.413,51.766],[26.163,41.408],[26.289,35.016],[26.647,31.728],[31.859,31.314],[36.625,30.744],[38.343,29.502],[38.647,28.056],[38.789,25.564],[38.757,18.65],[38.375,11.594],[38.077,8.93],[37.711,7.274],[34.867,3.118],[26.367,-6.788],[25.343,-8.234],[24.929,-8.748],[24.577,-9.07],[24.445,-9.226],[24.077,-9.742],[22.953,-11.476],[19.867,-16.608],[16.929,-21.82],[15.975,-23.648],[15.727,-24.226],[15.647,-24.398],[15.555,-24.82],[15.343,-25.342],[14.687,-26.718],[11.773,-37.842],[10.945,-45.35],[10.273,-50.452],[9.397,-57.576],[8.781,-66.304],[8.475,-70.006],[6.711,-72.014],[6.273,-72.35],[3.75,-72.256]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2000,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":8,"ty":3,"nm":"bout2","sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.5],"y":[0]},"t":30,"s":[292.001]},{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.5],"y":[0]},"t":101,"s":[772.001]},{"t":185,"s":[292.001]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.5],"y":[0]},"t":30,"s":[742.5]},{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.5],"y":[0]},"t":87,"s":[843.5]},{"t":185,"s":[742.5]}],"ix":4}},"a":{"a":0,"k":[50,50,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":2000,"st":0,"bm":0},{"ddd":0,"ind":9,"ty":3,"nm":"milieu2","sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.5],"y":[0]},"t":30,"s":[505.001]},{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.5],"y":[0]},"t":69,"s":[619.001]},{"t":185,"s":[505.001]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.5],"y":[0]},"t":30,"s":[408.5]},{"i":{"x":[0.5],"y":[1]},"o":{"x":[0.5],"y":[0]},"t":109,"s":[472.5]},{"t":185,"s":[408.5]}],"ix":4}},"a":{"a":0,"k":[50,50,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":2000,"st":0,"bm":0},{"ddd":0,"ind":10,"ty":3,"nm":"debut2","sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[527.001,-110,0],"ix":2,"l":2},"a":{"a":0,"k":[50,50,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":2000,"st":0,"bm":0},{"ddd":0,"ind":11,"ty":4,"nm":"Chain 2","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[0,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":5,"nm":"Connect Layers Pro - Styles","np":152,"mn":"MB ConnectLayersProStyles","ix":1,"en":1,"ef":[{"ty":6,"nm":"Stroke","mn":"MB ConnectLayersProStyles-0001","ix":1,"v":0},{"ty":2,"nm":"Stroke Color","mn":"MB ConnectLayersProStyles-0002","ix":2,"v":{"a":0,"k":[0.839215755463,0.866666734219,0.898039281368,1],"ix":2}},{"ty":0,"nm":"Stroke Opacity","mn":"MB ConnectLayersProStyles-0003","ix":3,"v":{"a":0,"k":100,"ix":3}},{"ty":7,"nm":"Opacity From Distance","mn":"MB ConnectLayersProStyles-0004","ix":4,"v":{"a":0,"k":0,"ix":4}},{"ty":0,"nm":"Near (px)","mn":"MB ConnectLayersProStyles-0005","ix":5,"v":{"a":0,"k":100,"ix":5}},{"ty":0,"nm":"Far (px)","mn":"MB ConnectLayersProStyles-0006","ix":6,"v":{"a":0,"k":400,"ix":6}},{"ty":7,"nm":"Reverse Behavior","mn":"MB ConnectLayersProStyles-0007","ix":7,"v":{"a":0,"k":0,"ix":7}},{"ty":0,"nm":"Stroke Width","mn":"MB ConnectLayersProStyles-0008","ix":8,"v":{"a":0,"k":10,"ix":8}},{"ty":7,"nm":"Line Cap","mn":"MB ConnectLayersProStyles-0009","ix":9,"v":{"a":0,"k":1,"ix":9}},{"ty":7,"nm":"Line Join","mn":"MB ConnectLayersProStyles-0010","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Miter Limit","mn":"MB ConnectLayersProStyles-0011","ix":11,"v":{"a":0,"k":4,"ix":11}},{"ty":7,"nm":"Enable Gradient","mn":"MB ConnectLayersProStyles-0012","ix":12,"v":{"a":0,"k":0,"ix":12}},{"ty":7,"nm":"Gradient Type","mn":"MB ConnectLayersProStyles-0013","ix":13,"v":{"a":0,"k":1,"ix":13}},{"ty":0,"nm":"Highlight Length","mn":"MB ConnectLayersProStyles-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Highlight Angle","mn":"MB ConnectLayersProStyles-0015","ix":15,"v":{"a":0,"k":0,"ix":15}},{"ty":6,"nm":"Gradient Colors","mn":"MB ConnectLayersProStyles-0016","ix":16,"v":0},{"ty":0,"nm":"Gradient Scale (%)","mn":"MB ConnectLayersProStyles-0017","ix":17,"v":{"a":0,"k":100,"ix":17}},{"ty":7,"nm":"Reverse Path","mn":"MB ConnectLayersProStyles-0018","ix":18,"v":{"a":0,"k":0,"ix":18}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0019","ix":19,"v":0},{"ty":6,"nm":"Fill","mn":"MB ConnectLayersProStyles-0020","ix":20,"v":0},{"ty":7,"nm":"Enable Fill","mn":"MB ConnectLayersProStyles-0021","ix":21,"v":{"a":0,"k":0,"ix":21}},{"ty":7,"nm":"Fill Palette","mn":"MB ConnectLayersProStyles-0022","ix":22,"v":{"a":0,"k":1,"ix":22}},{"ty":2,"nm":"Fill Color","mn":"MB ConnectLayersProStyles-0023","ix":23,"v":{"a":0,"k":[0.78431372549,0.549019607843,0.972549019608,1],"ix":23}},{"ty":2,"nm":"End Color","mn":"MB ConnectLayersProStyles-0024","ix":24,"v":{"a":0,"k":[0.121568627451,0,0.247058823529,1],"ix":24}},{"ty":0,"nm":"Saturation","mn":"MB ConnectLayersProStyles-0025","ix":25,"v":{"a":0,"k":50,"ix":25}},{"ty":0,"nm":"Luminance","mn":"MB ConnectLayersProStyles-0026","ix":26,"v":{"a":0,"k":50,"ix":26}},{"ty":0,"nm":"Random Seed","mn":"MB ConnectLayersProStyles-0027","ix":27,"v":{"a":0,"k":1,"ix":27}},{"ty":10,"nm":"Color Layer","mn":"MB ConnectLayersProStyles-0028","ix":28,"v":{"a":0,"k":0,"ix":28}},{"ty":0,"nm":"Fill Opacity","mn":"MB ConnectLayersProStyles-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":7,"nm":"Opacity From Distance","mn":"MB ConnectLayersProStyles-0030","ix":30,"v":{"a":0,"k":0,"ix":30}},{"ty":0,"nm":"Near (px)","mn":"MB ConnectLayersProStyles-0031","ix":31,"v":{"a":0,"k":100,"ix":31}},{"ty":0,"nm":"Far (px)","mn":"MB ConnectLayersProStyles-0032","ix":32,"v":{"a":0,"k":400,"ix":32}},{"ty":7,"nm":"Reverse Behavior","mn":"MB ConnectLayersProStyles-0033","ix":33,"v":{"a":0,"k":0,"ix":33}},{"ty":7,"nm":"Enable Gradient","mn":"MB ConnectLayersProStyles-0034","ix":34,"v":{"a":0,"k":0,"ix":34}},{"ty":7,"nm":"Gradient Type","mn":"MB ConnectLayersProStyles-0035","ix":35,"v":{"a":0,"k":1,"ix":35}},{"ty":0,"nm":"Highlight Length","mn":"MB ConnectLayersProStyles-0036","ix":36,"v":{"a":0,"k":0,"ix":36}},{"ty":0,"nm":"Highlight Angle","mn":"MB ConnectLayersProStyles-0037","ix":37,"v":{"a":0,"k":0,"ix":37}},{"ty":6,"nm":"Gradient Colors","mn":"MB ConnectLayersProStyles-0038","ix":38,"v":0},{"ty":0,"nm":"Gradient Scale (%)","mn":"MB ConnectLayersProStyles-0039","ix":39,"v":{"a":0,"k":100,"ix":39}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0040","ix":40,"v":0},{},{"ty":6,"nm":"Enable Modules","mn":"MB ConnectLayersProStyles-0042","ix":42,"v":0},{"ty":7,"nm":"Arrowheads","mn":"MB ConnectLayersProStyles-0043","ix":43,"v":{"a":0,"k":0,"ix":43}},{"ty":7,"nm":"Curviness","mn":"MB ConnectLayersProStyles-0044","ix":44,"v":{"a":0,"k":1,"ix":44}},{"ty":7,"nm":"Dashes","mn":"MB ConnectLayersProStyles-0045","ix":45,"v":{"a":0,"k":0,"ix":45}},{"ty":7,"nm":"Offset","mn":"MB ConnectLayersProStyles-0046","ix":46,"v":{"a":0,"k":0,"ix":46}},{"ty":7,"nm":"Repeater","mn":"MB ConnectLayersProStyles-0047","ix":47,"v":{"a":0,"k":0,"ix":47}},{"ty":7,"nm":"Round Corners","mn":"MB ConnectLayersProStyles-0048","ix":48,"v":{"a":0,"k":0,"ix":48}},{"ty":7,"nm":"Trim","mn":"MB ConnectLayersProStyles-0049","ix":49,"v":{"a":0,"k":0,"ix":49}},{"ty":7,"nm":"Twist","mn":"MB ConnectLayersProStyles-0050","ix":50,"v":{"a":0,"k":0,"ix":50}},{"ty":7,"nm":"Wiggle","mn":"MB ConnectLayersProStyles-0051","ix":51,"v":{"a":0,"k":0,"ix":51}},{"ty":7,"nm":"Zig Zag","mn":"MB ConnectLayersProStyles-0052","ix":52,"v":{"a":0,"k":0,"ix":52}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0053","ix":53,"v":0},{"ty":6,"nm":"Arrowheads","mn":"MB ConnectLayersProStyles-0054","ix":54,"v":0},{"ty":7,"nm":"Start","mn":"MB ConnectLayersProStyles-0055","ix":55,"v":{"a":0,"k":1,"ix":55}},{"ty":7,"nm":"End","mn":"MB ConnectLayersProStyles-0056","ix":56,"v":{"a":0,"k":1,"ix":56}},{"ty":2,"nm":"Stroke Color","mn":"MB ConnectLayersProStyles-0057","ix":57,"v":{"a":0,"k":[1,1,1,1],"ix":57}},{"ty":0,"nm":"Stroke Opacity","mn":"MB ConnectLayersProStyles-0058","ix":58,"v":{"a":0,"k":100,"ix":58}},{"ty":0,"nm":"Stroke Width","mn":"MB ConnectLayersProStyles-0059","ix":59,"v":{"a":0,"k":0,"ix":59}},{"ty":2,"nm":"Fill Color","mn":"MB ConnectLayersProStyles-0060","ix":60,"v":{"a":0,"k":[1,1,1,1],"ix":60}},{"ty":0,"nm":"Fill Opacity","mn":"MB ConnectLayersProStyles-0061","ix":61,"v":{"a":0,"k":100,"ix":61}},{"ty":7,"nm":"Opacity from Path","mn":"MB ConnectLayersProStyles-0062","ix":62,"v":{"a":0,"k":1,"ix":62}},{"ty":0,"nm":"Circle/Square Size","mn":"MB ConnectLayersProStyles-0063","ix":63,"v":{"a":0,"k":15,"ix":63}},{"ty":0,"nm":"Triangle Scale","mn":"MB ConnectLayersProStyles-0064","ix":64,"v":{"a":0,"k":100,"ix":64}},{"ty":0,"nm":"Triangle Length","mn":"MB ConnectLayersProStyles-0065","ix":65,"v":{"a":0,"k":40,"ix":65}},{"ty":0,"nm":"Triangle Width","mn":"MB ConnectLayersProStyles-0066","ix":66,"v":{"a":0,"k":20,"ix":66}},{"ty":0,"nm":"Round Corners","mn":"MB ConnectLayersProStyles-0067","ix":67,"v":{"a":0,"k":0,"ix":67}},{"ty":6,"nm":"Customization","mn":"MB ConnectLayersProStyles-0068","ix":68,"v":0},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0069","ix":69,"v":0},{"ty":6,"nm":"Curviness","mn":"MB ConnectLayersProStyles-0070","ix":70,"v":0},{"ty":7,"nm":"Function","mn":"MB ConnectLayersProStyles-0071","ix":71,"v":{"a":0,"k":8,"ix":71}},{"ty":7,"nm":"Flip Direction","mn":"MB ConnectLayersProStyles-0072","ix":72,"v":{"a":0,"k":0,"ix":72}},{"ty":0,"nm":"Tension","mn":"MB ConnectLayersProStyles-0073","ix":73,"v":{"a":0,"k":33.333,"ix":73}},{"ty":7,"nm":"Preset","mn":"MB ConnectLayersProStyles-0074","ix":74,"v":{"a":0,"k":1,"ix":74}},{"ty":7,"nm":"Preset","mn":"MB ConnectLayersProStyles-0075","ix":75,"v":{"a":0,"k":1,"ix":75}},{"ty":0,"nm":"Stiffness","mn":"MB ConnectLayersProStyles-0076","ix":76,"v":{"a":0,"k":100,"ix":76}},{"ty":0,"nm":"Damping","mn":"MB ConnectLayersProStyles-0077","ix":77,"v":{"a":0,"k":50,"ix":77}},{"ty":0,"nm":"Max Tangent Length","mn":"MB ConnectLayersProStyles-0078","ix":78,"v":{"a":0,"k":33.333,"ix":78}},{"ty":0,"nm":"Start Tangent X","mn":"MB ConnectLayersProStyles-0079","ix":79,"v":{"a":0,"k":0,"ix":79}},{"ty":0,"nm":"Start Tangent Y","mn":"MB ConnectLayersProStyles-0080","ix":80,"v":{"a":0,"k":0,"ix":80}},{"ty":0,"nm":"End Tangent X","mn":"MB ConnectLayersProStyles-0081","ix":81,"v":{"a":0,"k":0,"ix":81}},{"ty":0,"nm":"End Tangent Y","mn":"MB ConnectLayersProStyles-0082","ix":82,"v":{"a":0,"k":0,"ix":82}},{"ty":0,"nm":"Stiffness","mn":"MB ConnectLayersProStyles-0083","ix":83,"v":{"a":0,"k":50,"ix":83}},{"ty":0,"nm":"Solver Steps","mn":"MB ConnectLayersProStyles-0084","ix":84,"v":{"a":0,"k":5,"ix":84}},{"ty":0,"nm":"Subsegments","mn":"MB ConnectLayersProStyles-0085","ix":85,"v":{"a":0,"k":10,"ix":85}},{"ty":0,"nm":"Gravity","mn":"MB ConnectLayersProStyles-0086","ix":86,"v":{"a":0,"k":0,"ix":86}},{"ty":0,"nm":"Dynamics Start Frame","mn":"MB ConnectLayersProStyles-0087","ix":87,"v":{"a":0,"k":0,"ix":87}},{"ty":0,"nm":"Precision","mn":"MB ConnectLayersProStyles-0088","ix":88,"v":{"a":0,"k":15,"ix":88}},{"ty":0,"nm":"Angle (3D only)","mn":"MB ConnectLayersProStyles-0089","ix":89,"v":{"a":0,"k":45,"ix":89}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0090","ix":90,"v":0},{"ty":6,"nm":"Dashes","mn":"MB ConnectLayersProStyles-0091","ix":91,"v":0},{"ty":0,"nm":"Dash","mn":"MB ConnectLayersProStyles-0092","ix":92,"v":{"a":0,"k":10,"ix":92}},{"ty":0,"nm":"Gap","mn":"MB ConnectLayersProStyles-0093","ix":93,"v":{"a":0,"k":10,"ix":93}},{"ty":0,"nm":"Offset","mn":"MB ConnectLayersProStyles-0094","ix":94,"v":{"a":0,"k":0,"ix":94}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0095","ix":95,"v":0},{"ty":6,"nm":"Offset","mn":"MB ConnectLayersProStyles-0096","ix":96,"v":0},{"ty":0,"nm":"Amount","mn":"MB ConnectLayersProStyles-0097","ix":97,"v":{"a":0,"k":0,"ix":97}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0098","ix":98,"v":0},{"ty":6,"nm":"Repeater","mn":"MB ConnectLayersProStyles-0099","ix":99,"v":0},{"ty":0,"nm":"Copies","mn":"MB ConnectLayersProStyles-0100","ix":100,"v":{"a":0,"k":3,"ix":100}},{"ty":0,"nm":"Offset","mn":"MB ConnectLayersProStyles-0101","ix":101,"v":{"a":0,"k":0,"ix":101}},{"ty":7,"nm":"Symmetric Offset","mn":"MB ConnectLayersProStyles-0102","ix":102,"v":{"a":0,"k":1,"ix":102}},{"ty":6,"nm":"Transform: Repeater","mn":"MB ConnectLayersProStyles-0103","ix":103,"v":0},{"ty":0,"nm":"Anchor Point X","mn":"MB ConnectLayersProStyles-0104","ix":104,"v":{"a":0,"k":0,"ix":104}},{"ty":0,"nm":"Anchor Point Y","mn":"MB ConnectLayersProStyles-1104","ix":105,"v":{"a":0,"k":0,"ix":105}},{"ty":7,"nm":"Center Anchor","mn":"MB ConnectLayersProStyles-0106","ix":106,"v":{"a":0,"k":1,"ix":106}},{"ty":0,"nm":"Position Offset","mn":"MB ConnectLayersProStyles-0107","ix":107,"v":{"a":0,"k":0,"ix":107}},{"ty":0,"nm":"Position X","mn":"MB ConnectLayersProStyles-0108","ix":108,"v":{"a":0,"k":0,"ix":108}},{"ty":0,"nm":"Position Y","mn":"MB ConnectLayersProStyles-0109","ix":109,"v":{"a":0,"k":0,"ix":109}},{"ty":0,"nm":"Scale","mn":"MB ConnectLayersProStyles-0110","ix":110,"v":{"a":0,"k":100,"ix":110}},{"ty":0,"nm":"Rotation","mn":"MB ConnectLayersProStyles-0111","ix":111,"v":{"a":0,"k":0,"ix":111}},{"ty":0,"nm":"Start Opacity","mn":"MB ConnectLayersProStyles-0112","ix":112,"v":{"a":0,"k":100,"ix":112}},{"ty":0,"nm":"End Opacity","mn":"MB ConnectLayersProStyles-0113","ix":113,"v":{"a":0,"k":100,"ix":113}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0114","ix":114,"v":0},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0115","ix":115,"v":0},{"ty":6,"nm":"Round Corners","mn":"MB ConnectLayersProStyles-0116","ix":116,"v":0},{"ty":0,"nm":"Radius","mn":"MB ConnectLayersProStyles-0117","ix":117,"v":{"a":0,"k":10,"ix":117}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0118","ix":118,"v":0},{"ty":6,"nm":"Trim","mn":"MB ConnectLayersProStyles-0119","ix":119,"v":0},{"ty":0,"nm":"Start","mn":"MB ConnectLayersProStyles-0120","ix":120,"v":{"a":0,"k":0,"ix":120}},{"ty":0,"nm":"End","mn":"MB ConnectLayersProStyles-0121","ix":121,"v":{"a":0,"k":100,"ix":121}},{"ty":0,"nm":"Both Ends","mn":"MB ConnectLayersProStyles-0122","ix":122,"v":{"a":0,"k":0,"ix":122}},{"ty":0,"nm":"Offset","mn":"MB ConnectLayersProStyles-0123","ix":123,"v":{"a":0,"k":0,"ix":123}},{"ty":7,"nm":"Trim Multiple Shapes","mn":"MB ConnectLayersProStyles-0124","ix":124,"v":{"a":0,"k":1,"ix":124}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0125","ix":125,"v":0},{"ty":6,"nm":"Twist","mn":"MB ConnectLayersProStyles-0126","ix":126,"v":0},{"ty":0,"nm":"Angle","mn":"MB ConnectLayersProStyles-0127","ix":127,"v":{"a":0,"k":10,"ix":127}},{"ty":0,"nm":"Center X","mn":"MB ConnectLayersProStyles-0128","ix":128,"v":{"a":0,"k":0,"ix":128}},{"ty":0,"nm":"Center Y","mn":"MB ConnectLayersProStyles-0129","ix":129,"v":{"a":0,"k":0,"ix":129}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0130","ix":130,"v":0},{"ty":6,"nm":"Wiggle","mn":"MB ConnectLayersProStyles-0131","ix":131,"v":0},{"ty":0,"nm":"Size","mn":"MB ConnectLayersProStyles-0132","ix":132,"v":{"a":0,"k":10,"ix":132}},{"ty":0,"nm":"Detail","mn":"MB ConnectLayersProStyles-0133","ix":133,"v":{"a":0,"k":10,"ix":133}},{"ty":7,"nm":"Points","mn":"MB ConnectLayersProStyles-0134","ix":134,"v":{"a":0,"k":1,"ix":134}},{"ty":0,"nm":"Wiggles/Second","mn":"MB ConnectLayersProStyles-0135","ix":135,"v":{"a":0,"k":2,"ix":135}},{"ty":0,"nm":"Correlation","mn":"MB ConnectLayersProStyles-0136","ix":136,"v":{"a":0,"k":50,"ix":136}},{"ty":0,"nm":"Temporal Phase","mn":"MB ConnectLayersProStyles-0137","ix":137,"v":{"a":0,"k":0,"ix":137}},{"ty":0,"nm":"Spatial Phase","mn":"MB ConnectLayersProStyles-0138","ix":138,"v":{"a":0,"k":0,"ix":138}},{"ty":0,"nm":"Random Seed","mn":"MB ConnectLayersProStyles-0139","ix":139,"v":{"a":0,"k":0,"ix":139}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0140","ix":140,"v":0},{"ty":6,"nm":"Zig Zag","mn":"MB ConnectLayersProStyles-0141","ix":141,"v":0},{"ty":0,"nm":"Size","mn":"MB ConnectLayersProStyles-0142","ix":142,"v":{"a":0,"k":5,"ix":142}},{"ty":0,"nm":"Ridges per segment","mn":"MB ConnectLayersProStyles-0143","ix":143,"v":{"a":0,"k":10,"ix":143}},{"ty":7,"nm":"Points","mn":"MB ConnectLayersProStyles-0144","ix":144,"v":{"a":0,"k":1,"ix":144}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0145","ix":145,"v":0},{"ty":6,"nm":"Assistant","mn":"MB ConnectLayersProStyles-0146","ix":146,"v":0},{"ty":6,"nm":"Path Expressions","mn":"MB ConnectLayersProStyles-0147","ix":147,"v":0},{"ty":6,"nm":"Style Expressions","mn":"MB ConnectLayersProStyles-0148","ix":148,"v":0},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0149","ix":149,"v":0},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0150","ix":150,"v":0}]}],"shapes":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nvar Ls, is3dB, fx, precision, flipDirB, tension, presetId, stiffness, damping, maxTanLen, iterations, subsegments, grav, uOutTan, uInTan, dynamicsStartTime, closedB, reversePathB, curveEnabB, curveId, curviness, dynamicsStartTime, curveId, flipDirB, tension, presetId, stiffness, damping, maxTanLen, uOutTan, uInTan, stiffness, iterations, subsegments, grav, precision, pts, tans, intans, outtans, intans, outtans;\nfunction getPoints() {\n    function getVerletSegmentPoints(L1, L2) {\n        function addPoint(x, y, vx, vy) {\n            points.push({\n                x: x,\n                y: y,\n                ox: x - vx,\n                oy: y - vy\n            });\n            return points[$bm_sub(points.length, 1)];\n        }\n        ;\n        function movePoint(p) {\n            var vx = $bm_mul($bm_sub(p.x, p.ox), stiffness);\n            var vy = $bm_mul($bm_sub(p.y, p.oy), stiffness);\n            p.ox = p.x;\n            p.oy = p.y;\n            p.x = $bm_sum(p.x, vx);\n            p.y = $bm_sum(p.y, vy);\n            p.y = $bm_sum(p.y, grav);\n        }\n        ;\n        function movePoints() {\n            for (var i = 0; i < points.length; i++)\n                movePoint(points[i]);\n        }\n        ;\n        function addLine(p1, p2) {\n            lines.push({\n                p1: p1,\n                p2: p2,\n                len: length([\n                    p1.x - p2.x,\n                    p1.y - p2.y\n                ])\n            });\n            return lines[$bm_sub(lines.length, 1)];\n        }\n        ;\n        function constrainLine(l) {\n            var dx = $bm_sub(l.p2.x, l.p1.x);\n            var dy = $bm_sub(l.p2.y, l.p1.y);\n            var ll = length([\n                dx,\n                dy\n            ]);\n            if (ll == 0)\n                ll = 0.001;\n            var fr = $bm_div($bm_div($bm_sub(l.len, ll), ll), 2);\n            dx *= fr;\n            dy *= fr;\n            l.p1.x = $bm_sub(l.p1.x, dx);\n            l.p1.y = $bm_sub(l.p1.y, dy);\n            l.p2.x = $bm_sum(l.p2.x, dx);\n            l.p2.y = $bm_sum(l.p2.y, dy);\n        }\n        ;\n        function constrainLines() {\n            for (var i = 0; i < lines.length; i++)\n                constrainLine(lines[i]);\n        }\n        ;\n        var points = [];\n        var lines = [];\n        var pt1 = is3dB ? fromWorld(L1.toWorld(L1.anchorPoint, dynamicsStartTime)) : L1.toComp(L1.anchorPoint, dynamicsStartTime);\n        var pt2 = is3dB ? fromWorld(L2.toWorld(L2.anchorPoint, dynamicsStartTime)) : L2.toComp(L2.anchorPoint, dynamicsStartTime);\n        var d0 = length($bm_sub(pt2, pt1));\n        var u = is3dB ? [\n            1,\n            0\n        ] : d0 != 0 ? normalize(pt2 - pt1) : [\n            0,\n            0\n        ];\n        var distance = $bm_div(d0, subsegments);\n        var p1 = addPoint(pt1[0], pt1[1], 0, 0);\n        for (var i = 1; i <= subsegments; i++) {\n            var pt = $bm_sum(pt1, $bm_mul($bm_mul(i, distance), u));\n            var p2 = addPoint(pt[0], pt[1], 0, 0);\n            addLine(p1, p2);\n            p1 = p2;\n        }\n        for (var t = dynamicsStartTime + thisComp.frameDuration; t <= time + 0.001; t += thisComp.frameDuration) {\n            movePoints();\n            var startId = 0;\n            var endId = $bm_sub(points.length, 1);\n            pt1 = is3dB ? fromWorld(L1.toWorld(L1.anchorPoint, t)) : L1.toComp(L1.anchorPoint, t);\n            pt2 = is3dB ? fromWorld(L2.toWorld(L2.anchorPoint, t)) : L2.toComp(L2.anchorPoint, t);\n            points[startId].ox = points[startId].x = pt1[0];\n            points[startId].oy = points[startId].y = pt1[1];\n            points[endId].ox = points[endId].x = pt2[0];\n            points[endId].oy = points[endId].y = pt2[1];\n            for (var i = 0; i < iterations; i++) {\n                constrainLines();\n            }\n        }\n        ;\n        var ps = [];\n        for (var i = 0; i < points.length; i++) {\n            if (i == 0)\n                ps.push([\n                    pt1[0],\n                    pt1[1]\n                ]);\n            else if (i == $bm_sub(points.length, 1))\n                ps.push([\n                    pt2[0],\n                    pt2[1]\n                ]);\n            else\n                ps.push([\n                    points[i].x,\n                    points[i].y\n                ]);\n        }\n        return ps;\n    }\n    ;\n    function QuadraticEaseIn(p) {\n        return $bm_mul(p, p);\n    }\n    function QuadraticEaseOut(p) {\n        return $bm_neg($bm_mul(p, $bm_sub(p, 2)));\n    }\n    function QuadraticEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul($bm_mul(2, p), p);\n        } else {\n            return $bm_sub($bm_sum($bm_mul($bm_mul(-2, p), p), $bm_mul(4, p)), 1);\n        }\n    }\n    function CubicEaseIn(p) {\n        return $bm_mul($bm_mul(p, p), p);\n    }\n    function CubicEaseOut(p) {\n        var f = $bm_sub(p, 1);\n        return $bm_sum($bm_mul($bm_mul(f, f), f), 1);\n    }\n    function CubicEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul($bm_mul($bm_mul(4, p), p), p);\n        } else {\n            var f = $bm_sub($bm_mul(2, p), 2);\n            return $bm_sum($bm_mul($bm_mul($bm_mul(0.5, f), f), f), 1);\n        }\n    }\n    function QuarticEaseIn(p) {\n        return $bm_mul($bm_mul($bm_mul(p, p), p), p);\n    }\n    function QuarticEaseOut(p) {\n        var f = $bm_sub(p, 1);\n        return $bm_sum($bm_mul($bm_mul($bm_mul(f, f), f), $bm_sub(1, p)), 1);\n    }\n    function QuarticEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul($bm_mul($bm_mul($bm_mul(8, p), p), p), p);\n        } else {\n            var f = $bm_sub(p, 1);\n            return $bm_sum($bm_mul($bm_mul($bm_mul($bm_mul(-8, f), f), f), f), 1);\n        }\n    }\n    function QuinticEaseIn(p) {\n        return $bm_mul($bm_mul($bm_mul($bm_mul(p, p), p), p), p);\n    }\n    function QuinticEaseOut(p) {\n        var f = $bm_sub(p, 1);\n        return $bm_sum($bm_mul($bm_mul($bm_mul($bm_mul(f, f), f), f), f), 1);\n    }\n    function QuinticEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul($bm_mul($bm_mul($bm_mul($bm_mul(16, p), p), p), p), p);\n        } else {\n            var f = $bm_sub($bm_mul(2, p), 2);\n            return $bm_sum($bm_mul($bm_mul($bm_mul($bm_mul($bm_mul(0.5, f), f), f), f), f), 1);\n        }\n    }\n    function SineEaseIn(p) {\n        return $bm_sum(Math.sin($bm_mul($bm_sub(p, 1), $bm_div(Math.PI, 2))), 1);\n    }\n    function SineEaseOut(p) {\n        return Math.sin($bm_mul(p, $bm_div(Math.PI, 2)));\n    }\n    function SineEaseInOut(p) {\n        return $bm_mul(0.5, $bm_sub(1, Math.cos($bm_mul(p, Math.PI))));\n    }\n    function CircularEaseIn(p) {\n        return $bm_sub(1, Math.sqrt($bm_sub(1, $bm_mul(p, p))));\n    }\n    function CircularEaseOut(p) {\n        return Math.sqrt($bm_mul($bm_sub(2, p), p));\n    }\n    function CircularEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul(0.5, $bm_sub(1, Math.sqrt($bm_sub(1, $bm_mul(4, $bm_mul(p, p))))));\n        } else {\n            return $bm_mul(0.5, $bm_sum(Math.sqrt($bm_mul($bm_neg($bm_sub($bm_mul(2, p), 3)), $bm_sub($bm_mul(2, p), 1))), 1));\n        }\n    }\n    function ExponentialEaseIn(p) {\n        return p == 0 ? p : Math.pow(2, 10 * (p - 1));\n    }\n    function ExponentialEaseOut(p) {\n        return p == 1 ? p : 1 - Math.pow(2, -10 * p);\n    }\n    function ExponentialEaseInOut(p) {\n        if (p == 0 || p == 1)\n            return p;\n        if (p < 0.5) {\n            return $bm_mul(0.5, Math.pow(2, $bm_sub($bm_mul(20, p), 10)));\n        } else {\n            return $bm_sum($bm_mul(-0.5, Math.pow(2, $bm_sum($bm_mul(-20, p), 10))), 1);\n        }\n    }\n    function ElasticEaseIn(p) {\n        return $bm_mul(Math.sin($bm_mul($bm_mul(13, $bm_div(Math.PI, 2)), p)), Math.pow(2, $bm_mul(10, $bm_sub(p, 1))));\n    }\n    function ElasticEaseOut(p) {\n        return $bm_sum($bm_mul(Math.sin($bm_mul($bm_mul(-13, $bm_div(Math.PI, 2)), $bm_sum(p, 1))), Math.pow(2, $bm_mul(-10, p))), 1);\n    }\n    function ElasticEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul($bm_mul(0.5, Math.sin($bm_mul($bm_mul(13, $bm_div(Math.PI, 2)), $bm_mul(2, p)))), Math.pow(2, $bm_mul(10, $bm_sub($bm_mul(2, p), 1))));\n        } else {\n            return $bm_mul(0.5, $bm_sum($bm_mul(Math.sin($bm_mul($bm_mul(-13, $bm_div(Math.PI, 2)), $bm_sum($bm_sub($bm_mul(2, p), 1), 1))), Math.pow(2, $bm_mul(-10, $bm_sub($bm_mul(2, p), 1)))), 2));\n        }\n    }\n    function BackEaseIn(p) {\n        return $bm_sub($bm_mul($bm_mul(p, p), p), $bm_mul(p, Math.sin($bm_mul(p, Math.PI))));\n    }\n    function BackEaseOut(p) {\n        var f = $bm_sub(1, p);\n        return $bm_sub(1, $bm_sub($bm_mul($bm_mul(f, f), f), $bm_mul(f, Math.sin($bm_mul(f, Math.PI)))));\n    }\n    function BackEaseInOut(p) {\n        if (p < 0.5) {\n            var f = $bm_mul(2, p);\n            return $bm_mul(0.5, $bm_sub($bm_mul($bm_mul(f, f), f), $bm_mul(f, Math.sin($bm_mul(f, Math.PI)))));\n        } else {\n            var f = $bm_sub(1, $bm_sub($bm_mul(2, p), 1));\n            return $bm_sum($bm_mul(0.5, $bm_sub(1, $bm_sub($bm_mul($bm_mul(f, f), f), $bm_mul(f, Math.sin($bm_mul(f, Math.PI)))))), 0.5);\n        }\n    }\n    function BounceEaseIn(p) {\n        return $bm_sub(1, BounceEaseOut($bm_sub(1, p)));\n    }\n    function BounceEaseOut(p) {\n        if (p < 4 / 11) {\n            return $bm_div($bm_mul($bm_mul(121, p), p), 16);\n        } else if (p < 8 / 11) {\n            return $bm_sum($bm_sub($bm_mul($bm_mul(363 / 40, p), p), $bm_mul(99 / 10, p)), 17 / 5);\n        } else if (p < 9 / 10) {\n            return $bm_sum($bm_sub($bm_mul($bm_mul(4356 / 361, p), p), $bm_mul(35442 / 1805, p)), 16061 / 1805);\n        } else {\n            return $bm_sum($bm_sub($bm_mul($bm_mul(54 / 5, p), p), $bm_mul(513 / 25, p)), 268 / 25);\n        }\n    }\n    function BounceEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul(0.5, BounceEaseIn($bm_mul(p, 2)));\n        } else {\n            return $bm_sum($bm_mul(0.5, BounceEaseOut($bm_sub($bm_mul(p, 2), 1))), 0.5);\n        }\n    }\n    function getPennerSegmentPoints(p1, p2) {\n        var vId;\n        var ps = [];\n        var startPointX = p1[0];\n        var startPointY = p1[1];\n        var endPointX = p2[0];\n        var endPointY = p2[1];\n        for (vId = 0; vId <= precision; vId++) {\n            var lambda = $bm_div(vId, precision);\n            var x = $bm_sum(startPointX, $bm_mul($bm_sub(endPointX, startPointX), lambda));\n            var y = $bm_sum(startPointY, $bm_mul($bm_sub(endPointY, startPointY), lambda));\n            switch (curveId) {\n            case curviness.IN_BACK: {\n                    y = startPointY + (endPointY - startPointY) * BackEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_BACK: {\n                    y = startPointY + (endPointY - startPointY) * BackEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_BACK: {\n                    y = startPointY + (endPointY - startPointY) * BackEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_BOUNCE: {\n                    y = startPointY + (endPointY - startPointY) * BounceEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_BOUNCE: {\n                    y = startPointY + (endPointY - startPointY) * BounceEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_BOUNCE: {\n                    y = startPointY + (endPointY - startPointY) * BounceEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_CIRCULAR: {\n                    y = startPointY + (endPointY - startPointY) * CircularEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_CIRCULAR: {\n                    y = startPointY + (endPointY - startPointY) * CircularEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_CIRCULAR: {\n                    y = startPointY + (endPointY - startPointY) * CircularEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_CUBIC: {\n                    y = startPointY + (endPointY - startPointY) * CubicEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_CUBIC: {\n                    y = startPointY + (endPointY - startPointY) * CubicEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_CUBIC: {\n                    y = startPointY + (endPointY - startPointY) * CubicEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_ELASTIC: {\n                    y = startPointY + (endPointY - startPointY) * ElasticEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_ELASTIC: {\n                    y = startPointY + (endPointY - startPointY) * ElasticEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_ELASTIC: {\n                    y = startPointY + (endPointY - startPointY) * ElasticEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_EXPONENTIAL: {\n                    y = startPointY + (endPointY - startPointY) * ExponentialEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_EXPONENTIAL: {\n                    y = startPointY + (endPointY - startPointY) * ExponentialEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_EXPONENTIAL: {\n                    y = startPointY + (endPointY - startPointY) * ExponentialEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_QUADRATIC: {\n                    y = startPointY + (endPointY - startPointY) * QuadraticEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_QUADRATIC: {\n                    y = startPointY + (endPointY - startPointY) * QuadraticEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_QUADRATIC: {\n                    y = startPointY + (endPointY - startPointY) * QuadraticEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_QUARTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuarticEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_QUARTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuarticEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_QUARTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuarticEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_QUINTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuinticEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_QUINTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuinticEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_QUINTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuinticEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_SINE: {\n                    y = startPointY + (endPointY - startPointY) * SineEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_SINE: {\n                    y = startPointY + (endPointY - startPointY) * SineEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_SINE: {\n                    y = startPointY + (endPointY - startPointY) * SineEaseInOut(lambda);\n                    break;\n                }\n            default:\n                break;\n            }\n            ps.push([\n                x,\n                y\n            ]);\n        }\n        return ps;\n    }\n    ;\n    var ps = [];\n    var numSegs = $bm_sub(Ls.length, 1);\n    for (var segId = 0; segId < numSegs; segId++) {\n        var L1 = Ls[segId];\n        var L2 = Ls[segId + 1];\n        var p1 = is3dB ? fromWorld(L1.toWorld(L1.anchorPoint)) : L1.toComp(L1.anchorPoint);\n        if (p1.length == 3)\n            p1.pop();\n        var p2 = is3dB ? fromWorld(L2.toWorld(L2.anchorPoint)) : L2.toComp(L2.anchorPoint);\n        if (p2.length == 3)\n            p2.pop();\n        var M = $bm_div($bm_sum(p1, p2), 2);\n        var A, B;\n        if (curveEnabB && curveId == curviness.STEP) {\n            A = flipDirB ? [\n                p1[0],\n                M[1]\n            ] : [\n                M[0],\n                p1[1]\n            ];\n            B = flipDirB ? [\n                p2[0],\n                M[1]\n            ] : [\n                M[0],\n                p2[1]\n            ];\n            ps.push(p1);\n            ps.push(A);\n            ps.push(B);\n            ps.push(p2);\n        } else if (curveEnabB && curveId == curviness.STEP_AFTER) {\n            A = [\n                p2[0],\n                p1[1]\n            ];\n            ps.push(p1);\n            ps.push(A);\n            ps.push(p2);\n        } else if (curveEnabB && curveId == curviness.STEP_BEFORE) {\n            A = [\n                p1[0],\n                p2[1]\n            ];\n            ps.push(p1);\n            ps.push(A);\n            ps.push(p2);\n        } else if (curveEnabB && curveId == curviness.DYNAMIC_VERLET) {\n            ps.push.apply(ps, getVerletSegmentPoints(L1, L2));\n            if (numSegs > 1 && segId < numSegs - 1)\n                ps.pop();\n        } else if (curveEnabB && curveId >= curviness.IN_SINE) {\n            ps.push.apply(ps, getPennerSegmentPoints(p1, p2));\n        } else {\n            if (segId == 0) {\n                ps.push(p1);\n                ps.push(p2);\n            } else\n                ps.push(p2);\n        }\n    }\n    return ps;\n}\nfunction getTangents() {\n    function getRotoBezierTangents(tensFactor) {\n        var is = [];\n        var os = [];\n        if (!closedB) {\n            is.push([\n                0,\n                0\n            ]);\n            os.push([\n                0,\n                0\n            ]);\n        } else {\n            if (curveId == curviness.DYNAMIC_VERLET || curveId >= curviness.IN_SINE) {\n                is.push([\n                    0,\n                    0\n                ]);\n                os.push([\n                    0,\n                    0\n                ]);\n            } else {\n                var u = $bm_sub(pts[1], pts[$bm_sub(pts.length, 2)]);\n                if (length(u) != 0)\n                    u = normalize(u);\n                var lNext = length($bm_sub(pts[1], pts[0]));\n                var lOut = $bm_mul(tensFactor, lNext);\n                is.push([\n                    0,\n                    0\n                ]);\n                os.push($bm_mul(lOut, u));\n            }\n        }\n        for (var j = 1; j < pts.length - 1; j++) {\n            var u = $bm_sub(pts[$bm_sum(j, 1)], pts[$bm_sub(j, 1)]);\n            if (length(u) != 0)\n                u = normalize(u);\n            if (curveId == curviness.DYNAMIC_VERLET && j % subsegments == 0 || curveId >= curviness.IN_SINE && j % precision == 0)\n                u = [\n                    0,\n                    0\n                ];\n            var lPrev = length($bm_sub(pts[j], pts[$bm_sub(j, 1)]));\n            var lNext = length($bm_sub(pts[$bm_sum(j, 1)], pts[j]));\n            var lIn = $bm_mul(tensFactor, lPrev);\n            var lOut = $bm_mul(tensFactor, lNext);\n            is.push($bm_mul($bm_neg(lIn), u));\n            os.push($bm_mul(lOut, u));\n        }\n        if (!closedB) {\n            is.push([\n                0,\n                0\n            ]);\n            os.push([\n                0,\n                0\n            ]);\n        } else {\n            if (curveId == curviness.DYNAMIC_VERLET || curveId >= curviness.IN_SINE) {\n                is.push([\n                    0,\n                    0\n                ]);\n                os.push([\n                    0,\n                    0\n                ]);\n            } else {\n                var u = $bm_sub(pts[1], pts[$bm_sub(pts.length, 2)]);\n                if (length(u) != 0)\n                    u = normalize(u);\n                var lPrev = length($bm_sub(pts[$bm_sub(pts.length, 2)], pts[$bm_sub(pts.length, 1)]));\n                var lIn = $bm_mul(tensFactor, lPrev);\n                is.push($bm_mul($bm_neg(lIn), u));\n                os.push([\n                    0,\n                    0\n                ]);\n            }\n        }\n        if (!closedB) {\n            var PIn1 = $bm_sum(pts[1], is[1]);\n            var P0 = pts[0];\n            var dirOut0 = $bm_sub(PIn1, P0);\n            if (length(dirOut0) != 0)\n                dirOut0 = normalize(dirOut0);\n            var lOut0 = $bm_mul(tensFactor, length($bm_sub(PIn1, P0)));\n            var out0 = $bm_mul(lOut0, dirOut0);\n            var POut0 = $bm_sum(pts[$bm_sub(pts.length, 2)], os[$bm_sub(pts.length, 2)]);\n            var Pn = pts[pts.length - 1];\n            var dirInN = $bm_sub(POut0, Pn);\n            if (length(dirInN) != 0)\n                dirInN = normalize(dirInN);\n            var lInN = $bm_mul(tensFactor, length($bm_sub(POut0, Pn)));\n            var inN = $bm_mul(lInN, dirInN);\n            os[0] = out0;\n            is[is.length - 1] = inN;\n        }\n        return [\n            is,\n            os\n        ];\n    }\n    ;\n    function getDynamicBezierSegmentTangents(L1, L2) {\n        var targetP1, targetP2;\n        var out0 = [\n            0,\n            0\n        ];\n        var in1 = [\n            0,\n            0\n        ];\n        var vel1 = [\n            0,\n            0\n        ];\n        var vel2 = [\n            0,\n            0\n        ];\n        var P1, P2;\n        for (var t = dynamicsStartTime; t <= time + 0.001; t += thisComp.frameDuration) {\n            var p1 = is3dB ? fromWorld(L1.toWorld(L1.anchorPoint, t)) : L1.toComp(L1.anchorPoint, t);\n            if (p1.length == 3)\n                p1.pop();\n            var p2 = is3dB ? fromWorld(L2.toWorld(L2.anchorPoint, t)) : L2.toComp(L2.anchorPoint, t);\n            if (p2.length == 3)\n                p2.pop();\n            var u1 = $bm_sub(p2, p1);\n            var u2 = $bm_sub(p1, p2);\n            if (t == dynamicsStartTime) {\n                if (curveId == curviness.DYNAMIC_BEZIER) {\n                    P1 = $bm_sum(p1, $bm_mul(maxTanLen, u1));\n                    P2 = $bm_sum(p2, $bm_mul(maxTanLen, u2));\n                } else if (curveId == curviness.DYNAMIC_CUSTOM_BEZIER) {\n                    P1 = $bm_sum(p1, uOutTan);\n                    P2 = $bm_sum(p2, uInTan);\n                }\n            }\n            if (curveId == curviness.DYNAMIC_BEZIER) {\n                targetP1 = $bm_sum(p1, $bm_mul(maxTanLen, u1));\n                targetP2 = $bm_sum(p2, $bm_mul(maxTanLen, u2));\n            } else if (curveId == curviness.DYNAMIC_CUSTOM_BEZIER) {\n                targetP1 = $bm_sum(p1, uOutTan);\n                targetP2 = $bm_sum(p2, uInTan);\n            }\n            vel1 = $bm_sum($bm_mul(stiffness, $bm_sub(targetP1, P1)), $bm_mul(damping, vel1));\n            vel2 = $bm_sum($bm_mul(stiffness, $bm_sub(targetP2, P2)), $bm_mul(damping, vel2));\n            P1 = $bm_sum(P1, vel1);\n            P2 = $bm_sum(P2, vel2);\n            out0 = $bm_sub(P1, p1);\n            in1 = $bm_sub(P2, p2);\n        }\n        return [\n            out0,\n            in1\n        ];\n    }\n    ;\n    var ins = [];\n    var outs = [];\n    if (curveEnabB) {\n        var numSegs = $bm_sub(Ls.length, 1);\n        if (curveId == curviness.AUTO_BEZIER || curveId == curviness.DYNAMIC_VERLET || curveId >= curviness.IN_SINE) {\n            var tans = getRotoBezierTangents(1 / 3);\n            ins = tans[0];\n            outs = tans[1];\n        } else if (curveId == curviness.CUSTOM_TENSION) {\n            var tans = getRotoBezierTangents(tension);\n            ins = tans[0];\n            outs = tans[1];\n        } else {\n            for (var segId = 0; segId < numSegs; segId++) {\n                var L1 = Ls[segId];\n                var L2 = Ls[segId + 1];\n                switch (curveId) {\n                case curviness.DYNAMIC_BEZIER:\n                case curviness.DYNAMIC_CUSTOM_BEZIER: {\n                        var tans = getDynamicBezierSegmentTangents(L1, L2);\n                        var out0 = tans[0];\n                        var in1 = tans[1];\n                        if (segId == 0)\n                            ins.push([\n                                0,\n                                0\n                            ]);\n                        outs.push(out0);\n                        ins.push(in1);\n                        if (segId == numSegs - 1)\n                            outs.push([\n                                0,\n                                0\n                            ]);\n                        break;\n                    }\n                case curviness.ARC: {\n                        var p1 = is3dB ? fromWorld(L1.toWorld(L1.anchorPoint)) : L1.toComp(L1.anchorPoint);\n                        var p2 = is3dB ? fromWorld(L2.toWorld(L2.anchorPoint)) : L2.toComp(L2.anchorPoint);\n                        var u = p2 - p1;\n                        var d = length(u);\n                        var u = d == 0 ? [\n                            0,\n                            0\n                        ] : normalize(u);\n                        var n = [\n                            u[1],\n                            -u[0]\n                        ];\n                        if (flipDirB)\n                            n *= -1;\n                        var out0 = 2 / 3 * d * n;\n                        var in1 = out0;\n                        if (segId == 0)\n                            ins.push([\n                                0,\n                                0\n                            ]);\n                        outs.push(out0);\n                        ins.push(in1);\n                        if (segId == numSegs - 1)\n                            outs.push([\n                                0,\n                                0\n                            ]);\n                        break;\n                    }\n                default:\n                    break;\n                }\n            }\n        }\n    }\n    return [\n        ins,\n        outs\n    ];\n}\nLs = [\n    thisComp.layer('debut2'),\n    thisComp.layer('milieu2'),\n    thisComp.layer('bout2')\n];\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\nprecision = 15;\nflipDirB = false;\ntension = 1 / 3;\npresetId = 1;\nstiffness = 1;\ndamping = 0.5;\nmaxTanLen = 1 / 3;\niterations = 5;\nsubsegments = 10;\ngrav = 0;\nuOutTan = [\n    0,\n    0\n];\nuInTan = [\n    0,\n    0\n];\ndynamicsStartTime = 0;\nclosedB = Ls[0]._name == Ls[Ls.length - 1]._name;\nreversePathB = fx('Reverse Path').value > 0;\ncurveEnabB = fx('Curviness').value > 0;\nif (curveEnabB) {\n    curveId = fx('Function').value;\n    curviness = {\n        LINEAR: 1,\n        SEP1: 2,\n        ARC: 3,\n        STEP: 4,\n        STEP_AFTER: 5,\n        STEP_BEFORE: 6,\n        SEP2: 7,\n        AUTO_BEZIER: 8,\n        CUSTOM_TENSION: 9,\n        SEP3: 10,\n        DYNAMIC_BEZIER: 11,\n        DYNAMIC_CUSTOM_BEZIER: 12,\n        DYNAMIC_VERLET: 13,\n        SEP4: 14,\n        IN_SINE: 15,\n        OUT_SINE: 16,\n        IN_OUT_SINE: 17,\n        IN_QUADRATIC: 18,\n        OUT_QUADRATIC: 19,\n        IN_OUT_QUADRATIC: 20,\n        IN_CUBIC: 21,\n        OUT_CUBIC: 22,\n        IN_OUT_CUBIC: 23,\n        IN_QUARTIC: 24,\n        OUT_QUARTIC: 25,\n        IN_OUT_QUARTIC: 26,\n        IN_QUINTIC: 27,\n        OUT_QUINTIC: 28,\n        IN_OUT_QUINTIC: 29,\n        IN_EXPONENTIAL: 30,\n        OUT_EXPONENTIAL: 31,\n        IN_OUT_EXPONENTIAL: 32,\n        IN_CIRCULAR: 33,\n        OUT_CIRCULAR: 34,\n        IN_OUT_CIRCULAR: 35,\n        SEP11: 36,\n        IN_BACK: 37,\n        OUT_BACK: 38,\n        IN_OUT_BACK: 39,\n        IN_ELASTIC: 40,\n        OUT_ELASTIC: 41,\n        IN_OUT_ELASTIC: 42,\n        IN_BOUNCE: 43,\n        OUT_BOUNCE: 44,\n        IN_OUT_BOUNCE: 45\n    };\n    if (curveId == curviness.DYNAMIC_BEZIER || curveId == curviness.DYNAMIC_CUSTOM_BEZIER || curveId == curviness.DYNAMIC_VERLET) {\n        try {\n            dynamicsStartTime = $bm_mul(fx('Dynamics Start Frame').value, thisComp.frameDuration);\n            if (time < dynamicsStartTime)\n                curveId = curviness.LINEAR;\n        } catch (e) {\n        }\n    }\n    if (curveId == curviness.ARC || curveId == curviness.STEP) {\n        try {\n            flipDirB = fx('Flip Direction').value > 0;\n        } catch (e) {\n        }\n    } else if (curveId == curviness.CUSTOM_TENSION) {\n        try {\n            tension = $bm_div(fx('Tension').value, 100);\n        } catch (e) {\n        }\n    } else if (curveId == curviness.DYNAMIC_BEZIER || curveId == curviness.DYNAMIC_CUSTOM_BEZIER) {\n        try {\n            presetId = fx('MB ConnectLayersProStyles-0074').value;\n            stiffness = $bm_div(fx('MB ConnectLayersProStyles-0076').value, 100);\n            damping = $bm_div(fx('MB ConnectLayersProStyles-0077').value, 100);\n            maxTanLen = $bm_div(fx('MB ConnectLayersProStyles-0078').value, 100);\n        } catch (e) {\n        }\n        if (curveId == curviness.DYNAMIC_CUSTOM_BEZIER) {\n            try {\n                uOutTan = [\n                    fx('Start Tangent X').value,\n                    fx('Start Tangent Y').value\n                ];\n                uInTan = [\n                    fx('End Tangent X').value,\n                    fx('End Tangent Y').value\n                ];\n            } catch (e) {\n            }\n        }\n    } else if (curveId == curviness.DYNAMIC_VERLET) {\n        try {\n            stiffness = $bm_div(fx('MB ConnectLayersProStyles-0083').value, 100);\n            iterations = Math.round(fx('Solver Steps').value);\n            subsegments = Math.round(fx('Subsegments').value);\n            grav = $bm_div(fx('Gravity').value, 10);\n        } catch (e) {\n        }\n    } else if (curveId >= curviness.IN_SINE) {\n        try {\n            precision = Math.round(fx('Precision').value);\n        } catch (e) {\n        }\n    }\n}\npts = getPoints();\ntans = getTangents();\nintans = tans[0];\nouttans = tans[1];\nif (reversePathB) {\n    pts.reverse();\n    intans = tans[1].reverse();\n    outtans = tans[0].reverse();\n}\n$bm_rt = createPath(pts, intans, outtans, closedB);"},"nm":"Path","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\nvar is3dB, fx;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\n$bm_rt = fx('MB ConnectLayersProStyles-0002');"},"o":{"a":0,"k":100,"ix":4,"x":"var $bm_rt;\nvar is3dB, fx, gradEnabB, res, res, opaDistB, near, far, reverseB, path, pts, d, res, res, res, res;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\ngradEnabB = fx('MB ConnectLayersProStyles-0012').value > 0;\nif (gradEnabB)\n    res = 0;\nelse {\n    res = fx('MB ConnectLayersProStyles-0003').value;\n    opaDistB = fx('MB ConnectLayersProStyles-0004').value > 0;\n    if (opaDistB) {\n        near = fx('MB ConnectLayersProStyles-0005').value;\n        far = fx('MB ConnectLayersProStyles-0006').value;\n        reverseB = fx('MB ConnectLayersProStyles-0007').value > 0;\n        path = content('Chain 2').content('Paths').content('Path 1').content('Path').path;\n        pts = path.points();\n        d = path.isClosed() ? length($bm_sub(pts[1], pts[0])) : length($bm_sub(pts[$bm_sub(pts.length, 1)], pts[0]));\n        if (d <= near)\n            res = 100;\n        else if (d >= far)\n            res = 0;\n        else\n            res *= ease(d, near, far, 1, 0);\n        if (reverseB)\n            res = $bm_sub(100, res);\n    }\n}\n$bm_rt = res;"},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\nvar is3dB, fx;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\n$bm_rt = fx('MB ConnectLayersProStyles-0008');"},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"gs","o":{"a":0,"k":100,"ix":9,"x":"var $bm_rt;\nvar is3dB, fx, gradEnabB, res, opaDistB, near, far, reverseB, path, pts, d, res, res, res, res, res;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\ngradEnabB = fx('MB ConnectLayersProStyles-0012').value > 0;\nif (gradEnabB) {\n    res = fx('MB ConnectLayersProStyles-0003').value;\n    opaDistB = fx('MB ConnectLayersProStyles-0004').value > 0;\n    if (opaDistB) {\n        near = fx('MB ConnectLayersProStyles-0005').value;\n        far = fx('MB ConnectLayersProStyles-0006').value;\n        reverseB = fx('MB ConnectLayersProStyles-0007').value > 0;\n        path = content('Chain 2').content('Paths').content('Path 1').content('Path').path;\n        pts = path.points();\n        d = path.isClosed() ? length($bm_sub(pts[1], pts[0])) : length($bm_sub(pts[$bm_sub(pts.length, 1)], pts[0]));\n        if (d <= near)\n            res = 100;\n        else if (d >= far)\n            res = 0;\n        else\n            res *= ease(d, near, far, 1, 0);\n        if (reverseB)\n            res = $bm_sub(100, res);\n    }\n} else\n    res = 0;\n$bm_rt = res;"},"w":{"a":0,"k":2,"ix":10,"x":"var $bm_rt;\nvar is3dB, fx;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\n$bm_rt = fx('MB ConnectLayersProStyles-0008');"},"g":{"p":2,"k":{"a":0,"k":[0,1,1,1,1,0,0,0],"ix":8}},"s":{"a":0,"k":[0,0],"ix":4,"x":"var $bm_rt;\nvar is3dB, fx, path, type, gradEnabB, gradScale, curveEnabB, pts, ptsAt0, lastIdx, startPt, startPtAt0, i, startPt, startPtAt0, startPt, startPtAt0, startPt, startPtAt0, isPennerB, curviness, curveId, isPennerB, precision, lastIdx, farthestId, maxD, i, d, maxD, farthestId, endPt, endPt, midPt, u, v, startPt, endPt, v, endPt;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\npath = content('Chain 2').content('Paths').content('Path 1').content('Path').path;\ntype = thisProperty.propertyGroup().type;\n$bm_rt = gradEnabB = fx('MB ConnectLayersProStyles-0012').value > 0;\nif (gradEnabB) {\n    gradScale = $bm_div(fx('MB ConnectLayersProStyles-0017').value, 100);\n    curveEnabB = fx('Curviness').value > 0;\n    pts = path.points();\n    ptsAt0 = path.points(0);\n    lastIdx = path.isClosed() ? $bm_sub(pts.length, 2) : $bm_sub(pts.length, 1);\n    startPt = [\n        0,\n        0\n    ];\n    startPtAt0 = [\n        0,\n        0\n    ];\n    if (type == 2) {\n        for (i = 0; i < pts.length; i++) {\n            startPt = $bm_sum(startPt, pts[i]);\n            startPtAt0 = $bm_sum(startPtAt0, ptsAt0[i]);\n        }\n        startPt /= pts.length;\n        startPtAt0 /= ptsAt0.length;\n    } else {\n        startPt = pts[0];\n        startPtAt0 = ptsAt0[0];\n    }\n    isPennerB = false;\n    if (curveEnabB) {\n        curviness = {\n            LINEAR: 1,\n            SEP1: 2,\n            ARC: 3,\n            STEP: 4,\n            STEP_AFTER: 5,\n            STEP_BEFORE: 6,\n            SEP2: 7,\n            AUTO_BEZIER: 8,\n            CUSTOM_TENSION: 9,\n            SEP3: 10,\n            DYNAMIC_BEZIER: 11,\n            DYNAMIC_CUSTOM_BEZIER: 12,\n            DYNAMIC_VERLET: 13,\n            SEP4: 14,\n            IN_SINE: 15,\n            OUT_SINE: 16,\n            IN_OUT_SINE: 17,\n            IN_QUADRATIC: 18,\n            OUT_QUADRATIC: 19,\n            IN_OUT_QUADRATIC: 20,\n            IN_CUBIC: 21,\n            OUT_CUBIC: 22,\n            IN_OUT_CUBIC: 23,\n            IN_QUARTIC: 24,\n            OUT_QUARTIC: 25,\n            IN_OUT_QUARTIC: 26,\n            IN_QUINTIC: 27,\n            OUT_QUINTIC: 28,\n            IN_OUT_QUINTIC: 29,\n            IN_EXPONENTIAL: 30,\n            OUT_EXPONENTIAL: 31,\n            IN_OUT_EXPONENTIAL: 32,\n            IN_CIRCULAR: 33,\n            OUT_CIRCULAR: 34,\n            IN_OUT_CIRCULAR: 35,\n            SEP11: 36,\n            IN_BACK: 37,\n            OUT_BACK: 38,\n            IN_OUT_BACK: 39,\n            IN_ELASTIC: 40,\n            OUT_ELASTIC: 41,\n            IN_OUT_ELASTIC: 42,\n            IN_BOUNCE: 43,\n            OUT_BOUNCE: 44,\n            IN_OUT_BOUNCE: 45\n        };\n        curveId = fx('Function').value;\n        isPennerB = curveId >= curviness.IN_SINE;\n        if (isPennerB) {\n            precision = Math.round(fx('Precision').value);\n            if (path.isClosed())\n                lastIdx = $bm_sub(lastIdx, precision);\n        }\n    }\n    if (type == 2 || path.isClosed()) {\n        farthestId = 0;\n        maxD = 0;\n        for (i = 0; i < ptsAt0.length; i++) {\n            d = length($bm_sub(ptsAt0[i], startPtAt0));\n            if (d > maxD) {\n                maxD = d;\n                farthestId = i;\n            }\n        }\n        endPt = pts[farthestId];\n    } else {\n        endPt = pts[lastIdx];\n    }\n    if (gradScale != 1) {\n        if (type == 1) {\n            midPt = $bm_mul(0.5, $bm_sum(startPt, endPt));\n            u = $bm_sub(startPt, midPt);\n            v = $bm_sub(endPt, midPt);\n            startPt = $bm_sum(midPt, $bm_mul(gradScale, u));\n            endPt = $bm_sum(midPt, $bm_mul(gradScale, v));\n        } else {\n            v = $bm_sub(endPt, startPt);\n            endPt = $bm_sum(startPt, $bm_mul(gradScale, v));\n        }\n    }\n    $bm_rt = startPt;\n} else\n    $bm_rt = value;"},"e":{"a":0,"k":[100,0],"ix":5,"x":"var $bm_rt;\nvar is3dB, fx, path, type, gradEnabB, gradScale, curveEnabB, pts, ptsAt0, lastIdx, startPt, startPtAt0, i, startPt, startPtAt0, startPt, startPtAt0, startPt, startPtAt0, isPennerB, curviness, curveId, isPennerB, precision, lastIdx, farthestId, maxD, i, d, maxD, farthestId, endPt, endPt, midPt, u, v, startPt, endPt, v, endPt;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\npath = content('Chain 2').content('Paths').content('Path 1').content('Path').path;\ntype = thisProperty.propertyGroup().type;\n$bm_rt = gradEnabB = fx('MB ConnectLayersProStyles-0012').value > 0;\nif (gradEnabB) {\n    gradScale = $bm_div(fx('MB ConnectLayersProStyles-0017').value, 100);\n    curveEnabB = fx('Curviness').value > 0;\n    pts = path.points();\n    ptsAt0 = path.points(0);\n    lastIdx = path.isClosed() ? $bm_sub(pts.length, 2) : $bm_sub(pts.length, 1);\n    startPt = [\n        0,\n        0\n    ];\n    startPtAt0 = [\n        0,\n        0\n    ];\n    if (type == 2) {\n        for (i = 0; i < pts.length; i++) {\n            startPt = $bm_sum(startPt, pts[i]);\n            startPtAt0 = $bm_sum(startPtAt0, ptsAt0[i]);\n        }\n        startPt /= pts.length;\n        startPtAt0 /= ptsAt0.length;\n    } else {\n        startPt = pts[0];\n        startPtAt0 = ptsAt0[0];\n    }\n    isPennerB = false;\n    if (curveEnabB) {\n        curviness = {\n            LINEAR: 1,\n            SEP1: 2,\n            ARC: 3,\n            STEP: 4,\n            STEP_AFTER: 5,\n            STEP_BEFORE: 6,\n            SEP2: 7,\n            AUTO_BEZIER: 8,\n            CUSTOM_TENSION: 9,\n            SEP3: 10,\n            DYNAMIC_BEZIER: 11,\n            DYNAMIC_CUSTOM_BEZIER: 12,\n            DYNAMIC_VERLET: 13,\n            SEP4: 14,\n            IN_SINE: 15,\n            OUT_SINE: 16,\n            IN_OUT_SINE: 17,\n            IN_QUADRATIC: 18,\n            OUT_QUADRATIC: 19,\n            IN_OUT_QUADRATIC: 20,\n            IN_CUBIC: 21,\n            OUT_CUBIC: 22,\n            IN_OUT_CUBIC: 23,\n            IN_QUARTIC: 24,\n            OUT_QUARTIC: 25,\n            IN_OUT_QUARTIC: 26,\n            IN_QUINTIC: 27,\n            OUT_QUINTIC: 28,\n            IN_OUT_QUINTIC: 29,\n            IN_EXPONENTIAL: 30,\n            OUT_EXPONENTIAL: 31,\n            IN_OUT_EXPONENTIAL: 32,\n            IN_CIRCULAR: 33,\n            OUT_CIRCULAR: 34,\n            IN_OUT_CIRCULAR: 35,\n            SEP11: 36,\n            IN_BACK: 37,\n            OUT_BACK: 38,\n            IN_OUT_BACK: 39,\n            IN_ELASTIC: 40,\n            OUT_ELASTIC: 41,\n            IN_OUT_ELASTIC: 42,\n            IN_BOUNCE: 43,\n            OUT_BOUNCE: 44,\n            IN_OUT_BOUNCE: 45\n        };\n        curveId = fx('Function').value;\n        isPennerB = curveId >= curviness.IN_SINE;\n        if (isPennerB) {\n            precision = Math.round(fx('Precision').value);\n            if (path.isClosed())\n                lastIdx = $bm_sub(lastIdx, precision);\n        }\n    }\n    if (type == 2 || path.isClosed()) {\n        farthestId = 0;\n        maxD = 0;\n        for (i = 0; i < ptsAt0.length; i++) {\n            d = length($bm_sub(ptsAt0[i], startPtAt0));\n            if (d > maxD) {\n                maxD = d;\n                farthestId = i;\n            }\n        }\n        endPt = pts[farthestId];\n    } else {\n        endPt = pts[lastIdx];\n    }\n    if (gradScale != 1) {\n        if (type == 1) {\n            midPt = $bm_mul(0.5, $bm_sum(startPt, endPt));\n            u = $bm_sub(startPt, midPt);\n            v = $bm_sub(endPt, midPt);\n            startPt = $bm_sum(midPt, $bm_mul(gradScale, u));\n            endPt = $bm_sum(midPt, $bm_mul(gradScale, v));\n        } else {\n            v = $bm_sub(endPt, startPt);\n            endPt = $bm_sum(startPt, $bm_mul(gradScale, v));\n        }\n    }\n    $bm_rt = endPt;\n} else\n    $bm_rt = value;"},"t":1,"lc":1,"lj":1,"ml":4,"ml2":{"a":0,"k":4,"ix":13},"bm":0,"nm":"Gradient Stroke","mn":"ADBE Vector Graphic - G-Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nvar is3dB, fx, fillEnabB, res, paletteId, paletteId, pathId, numPaths, sat, sat, luma, seed, seed, cVal, res;\nfunction HueToRgb(p, q, t) {\n    if (t < 0)\n        t++;\n    if (t > 1)\n        t--;\n    if (t < 1 / 6)\n        return $bm_sum(p, $bm_mul($bm_mul($bm_sub(q, p), 6), t));\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return $bm_sum(p, $bm_mul($bm_mul($bm_sub(q, p), 6), $bm_sub(2 / 3, t)));\n    return p;\n}\nfunction HslToRgb(h, s, l) {\n    var c = {\n        alphaF: 0,\n        redF: 0,\n        greenF: 0,\n        blueF: 0\n    };\n    if (s == 0) {\n        c.alphaF = 1;\n        c.redF = c.greenF = c.blueF = 1;\n    } else {\n        var q = l < 0.5 ? $bm_mul(l, $bm_sum(1, s)) : $bm_sub($bm_sum(l, s), $bm_mul(l, s));\n        var p = $bm_sub($bm_mul(2, l), q);\n        c.alphaF = 1;\n        c.redF = HueToRgb(p, q, $bm_sum(h, 1 / 3));\n        c.greenF = HueToRgb(p, q, h);\n        c.blueF = HueToRgb(p, q, $bm_sub(h, 1 / 3));\n    }\n    return c;\n}\nfunction GetColorFromKulerScheme(colors, idx, total) {\n    var colorVal = {\n        alphaF: 0,\n        redF: 0,\n        greenF: 0,\n        blueF: 0\n    };\n    var incr = $bm_div(5, total);\n    var frac = $bm_mul(incr, $bm_sub(idx, 1));\n    var low = Math.max(0, Math.floor(frac));\n    var high = Math.min(4, Math.ceil(frac));\n    if (low != high) {\n        colorVal.alphaF = 1;\n        colorVal.redF = $bm_div($bm_div($bm_sum(colors[low][0], colors[high][0]), 2), 255);\n        colorVal.greenF = $bm_div($bm_div($bm_sum(colors[low][1], colors[high][1]), 2), 255);\n        colorVal.blueF = $bm_div($bm_div($bm_sum(colors[low][2], colors[high][2]), 2), 255);\n    } else {\n        colorVal.alphaF = 1;\n        colorVal.redF = $bm_div(colors[low][0], 255);\n        colorVal.greenF = $bm_div(colors[low][1], 255);\n        colorVal.blueF = $bm_div(colors[low][2], 255);\n    }\n    return colorVal;\n}\nfunction GetPathColor(paletteId, pathId, numPaths) {\n    var firstScratch, secondScratch, L, pts, pt;\n    var colorVal = {\n        alphaF: 0,\n        redF: 0,\n        greenF: 0,\n        blueF: 0\n    };\n    switch (paletteId) {\n    case 1: {\n            firstScratch = [\n                0,\n                0,\n                0\n            ];\n            try {\n                firstScratch = fx('MB ConnectLayersProStyles-0023').value;\n            } catch (e) {\n            }\n            colorVal.alphaF = 1;\n            colorVal.redF = firstScratch[0];\n            colorVal.greenF = firstScratch[1];\n            colorVal.blueF = firstScratch[2];\n            break;\n        }\n    case 2: {\n            firstScratch = secondScratch = [\n                0,\n                0,\n                0\n            ];\n            try {\n                firstScratch = fx('MB ConnectLayersProStyles-0023').value;\n                secondScratch = fx('End Color').value;\n            } catch (e) {\n            }\n            colorVal.alphaF = 1;\n            colorVal.redF = linear(pathId, 1, numPaths, firstScratch[0], secondScratch[0]);\n            colorVal.greenF = linear(pathId, 1, numPaths, firstScratch[1], secondScratch[1]);\n            colorVal.blueF = linear(pathId, 1, numPaths, firstScratch[2], secondScratch[2]);\n            break;\n        }\n    case 3: {\n            var c = HslToRgb(pathId / numPaths, sat, luma);\n            colorVal.alphaF = 1;\n            colorVal.redF = c.redF;\n            colorVal.greenF = c.greenF;\n            colorVal.blueF = c.blueF;\n            break;\n        }\n    case 4: {\n            colorVal.alphaF = 1;\n            colorVal.redF = random();\n            colorVal.greenF = random();\n            colorVal.blueF = random();\n            break;\n        }\n    case 5: {\n            try {\n                L = fx('Color Layer');\n                pts = content('Chain 2').content('Paths').content('Path 1').content('Path').path.points();\n                pt = [\n                    0,\n                    0\n                ];\n                for (var i = 0; i < pts.length; i++) {\n                    pt += toComp(pts[i]);\n                }\n                pt /= pts.length;\n                if (pt.length == 3)\n                    pt.pop();\n                pt = L.fromCompToSurface(pt);\n                c = L.sampleImage(pt);\n                colorVal.alphaF = c[3];\n                colorVal.redF = c[0];\n                colorVal.greenF = c[1];\n                colorVal.blueF = c[2];\n            } catch (e) {\n                colorVal.alphaF = colorVal.redF = colorVal.greenF = colorVal.blueF = 0;\n            }\n            break;\n        }\n    case 6: {\n            break;\n        }\n    case 7: {\n            var colors = [\n                [\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    38,\n                    50,\n                    72\n                ],\n                [\n                    126,\n                    138,\n                    162\n                ],\n                [\n                    255,\n                    255,\n                    255\n                ],\n                [\n                    255,\n                    152,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 8: {\n            var colors = [\n                [\n                    207,\n                    194,\n                    145\n                ],\n                [\n                    255,\n                    246,\n                    197\n                ],\n                [\n                    161,\n                    232,\n                    217\n                ],\n                [\n                    255,\n                    113,\n                    44\n                ],\n                [\n                    105,\n                    93,\n                    70\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 9: {\n            var colors = [\n                [\n                    194,\n                    71,\n                    4\n                ],\n                [\n                    217,\n                    204,\n                    60\n                ],\n                [\n                    255,\n                    235,\n                    121\n                ],\n                [\n                    160,\n                    224,\n                    169\n                ],\n                [\n                    0,\n                    173,\n                    167\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 10: {\n            var colors = [\n                [\n                    43,\n                    58,\n                    66\n                ],\n                [\n                    63,\n                    87,\n                    101\n                ],\n                [\n                    189,\n                    212,\n                    222\n                ],\n                [\n                    239,\n                    239,\n                    239\n                ],\n                [\n                    255,\n                    83,\n                    13\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 11: {\n            var colors = [\n                [\n                    185,\n                    18,\n                    27\n                ],\n                [\n                    76,\n                    27,\n                    27\n                ],\n                [\n                    246,\n                    228,\n                    151\n                ],\n                [\n                    252,\n                    250,\n                    225\n                ],\n                [\n                    189,\n                    141,\n                    70\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 12: {\n            var colors = [\n                [\n                    0,\n                    88,\n                    95\n                ],\n                [\n                    0,\n                    147,\n                    147\n                ],\n                [\n                    255,\n                    255,\n                    196\n                ],\n                [\n                    240,\n                    237,\n                    187\n                ],\n                [\n                    255,\n                    56,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 13: {\n            var colors = [\n                [\n                    70,\n                    137,\n                    102\n                ],\n                [\n                    255,\n                    240,\n                    165\n                ],\n                [\n                    255,\n                    176,\n                    59\n                ],\n                [\n                    182,\n                    73,\n                    38\n                ],\n                [\n                    142,\n                    40,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 14: {\n            var colors = [\n                [\n                    47,\n                    41,\n                    51\n                ],\n                [\n                    1,\n                    162,\n                    166\n                ],\n                [\n                    41,\n                    217,\n                    194\n                ],\n                [\n                    189,\n                    242,\n                    113\n                ],\n                [\n                    255,\n                    255,\n                    166\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 15: {\n            var colors = [\n                [\n                    150,\n                    45,\n                    62\n                ],\n                [\n                    52,\n                    54,\n                    66\n                ],\n                [\n                    151,\n                    156,\n                    156\n                ],\n                [\n                    242,\n                    235,\n                    199\n                ],\n                [\n                    52,\n                    136,\n                    153\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 16: {\n            var colors = [\n                [\n                    133,\n                    219,\n                    24\n                ],\n                [\n                    205,\n                    232,\n                    85\n                ],\n                [\n                    245,\n                    246,\n                    212\n                ],\n                [\n                    167,\n                    197,\n                    32\n                ],\n                [\n                    73,\n                    63,\n                    11\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 17: {\n            var colors = [\n                [\n                    213,\n                    251,\n                    255\n                ],\n                [\n                    159,\n                    188,\n                    191\n                ],\n                [\n                    100,\n                    118,\n                    120\n                ],\n                [\n                    47,\n                    55,\n                    56\n                ],\n                [\n                    89,\n                    216,\n                    230\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 18: {\n            var colors = [\n                [\n                    90,\n                    31,\n                    0\n                ],\n                [\n                    209,\n                    87,\n                    13\n                ],\n                [\n                    253,\n                    231,\n                    146\n                ],\n                [\n                    71,\n                    119,\n                    37\n                ],\n                [\n                    169,\n                    204,\n                    102\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 19: {\n            var colors = [\n                [\n                    16,\n                    91,\n                    99\n                ],\n                [\n                    255,\n                    250,\n                    213\n                ],\n                [\n                    255,\n                    211,\n                    78\n                ],\n                [\n                    219,\n                    158,\n                    54\n                ],\n                [\n                    189,\n                    73,\n                    50\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 20: {\n            var colors = [\n                [\n                    216,\n                    202,\n                    168\n                ],\n                [\n                    92,\n                    131,\n                    47\n                ],\n                [\n                    40,\n                    73,\n                    7\n                ],\n                [\n                    56,\n                    37,\n                    19\n                ],\n                [\n                    54,\n                    57,\n                    66\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 21: {\n            var colors = [\n                [\n                    252,\n                    255,\n                    245\n                ],\n                [\n                    209,\n                    219,\n                    189\n                ],\n                [\n                    145,\n                    170,\n                    157\n                ],\n                [\n                    62,\n                    96,\n                    111\n                ],\n                [\n                    25,\n                    52,\n                    65\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 22: {\n            var colors = [\n                [\n                    64,\n                    89,\n                    82\n                ],\n                [\n                    156,\n                    155,\n                    122\n                ],\n                [\n                    255,\n                    211,\n                    147\n                ],\n                [\n                    255,\n                    151,\n                    79\n                ],\n                [\n                    245,\n                    79,\n                    41\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 23: {\n            var colors = [\n                [\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    51,\n                    51,\n                    51\n                ],\n                [\n                    255,\n                    53,\n                    139\n                ],\n                [\n                    1,\n                    176,\n                    240\n                ],\n                [\n                    174,\n                    238,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 24: {\n            var colors = [\n                [\n                    108,\n                    110,\n                    88\n                ],\n                [\n                    62,\n                    66,\n                    58\n                ],\n                [\n                    65,\n                    115,\n                    120\n                ],\n                [\n                    164,\n                    207,\n                    190\n                ],\n                [\n                    244,\n                    247,\n                    217\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 25: {\n            var colors = [\n                [\n                    255,\n                    248,\n                    227\n                ],\n                [\n                    204,\n                    204,\n                    159\n                ],\n                [\n                    51,\n                    51,\n                    45\n                ],\n                [\n                    159,\n                    180,\n                    204\n                ],\n                [\n                    219,\n                    65,\n                    5\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 26: {\n            var colors = [\n                [\n                    180,\n                    175,\n                    145\n                ],\n                [\n                    120,\n                    119,\n                    70\n                ],\n                [\n                    64,\n                    65,\n                    30\n                ],\n                [\n                    50,\n                    51,\n                    29\n                ],\n                [\n                    192,\n                    48,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 27: {\n            var colors = [\n                [\n                    4,\n                    191,\n                    191\n                ],\n                [\n                    202,\n                    252,\n                    216\n                ],\n                [\n                    247,\n                    233,\n                    103\n                ],\n                [\n                    169,\n                    207,\n                    84\n                ],\n                [\n                    88,\n                    143,\n                    39\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 28: {\n            var colors = [\n                [\n                    255,\n                    97,\n                    56\n                ],\n                [\n                    255,\n                    255,\n                    157\n                ],\n                [\n                    190,\n                    235,\n                    159\n                ],\n                [\n                    121,\n                    189,\n                    143\n                ],\n                [\n                    0,\n                    163,\n                    136\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 29: {\n            var colors = [\n                [\n                    176,\n                    204,\n                    153\n                ],\n                [\n                    103,\n                    126,\n                    82\n                ],\n                [\n                    183,\n                    202,\n                    121\n                ],\n                [\n                    246,\n                    232,\n                    177\n                ],\n                [\n                    137,\n                    114,\n                    91\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 30: {\n            var colors = [\n                [\n                    62,\n                    69,\n                    76\n                ],\n                [\n                    33,\n                    133,\n                    197\n                ],\n                [\n                    126,\n                    206,\n                    253\n                ],\n                [\n                    255,\n                    246,\n                    229\n                ],\n                [\n                    255,\n                    127,\n                    102\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 31: {\n            var colors = [\n                [\n                    230,\n                    226,\n                    175\n                ],\n                [\n                    167,\n                    163,\n                    126\n                ],\n                [\n                    239,\n                    236,\n                    202\n                ],\n                [\n                    4,\n                    99,\n                    128\n                ],\n                [\n                    0,\n                    47,\n                    47\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 32: {\n            var colors = [\n                [\n                    220,\n                    53,\n                    34\n                ],\n                [\n                    217,\n                    203,\n                    158\n                ],\n                [\n                    55,\n                    65,\n                    64\n                ],\n                [\n                    42,\n                    44,\n                    43\n                ],\n                [\n                    30,\n                    30,\n                    32\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 33: {\n            var colors = [\n                [\n                    89,\n                    82,\n                    65\n                ],\n                [\n                    184,\n                    174,\n                    156\n                ],\n                [\n                    255,\n                    255,\n                    255\n                ],\n                [\n                    172,\n                    207,\n                    204\n                ],\n                [\n                    138,\n                    9,\n                    23\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 34: {\n            var colors = [\n                [\n                    0,\n                    67,\n                    88\n                ],\n                [\n                    31,\n                    138,\n                    112\n                ],\n                [\n                    190,\n                    219,\n                    57\n                ],\n                [\n                    255,\n                    225,\n                    26\n                ],\n                [\n                    253,\n                    116,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 35: {\n            var colors = [\n                [\n                    125,\n                    138,\n                    46\n                ],\n                [\n                    201,\n                    215,\n                    135\n                ],\n                [\n                    255,\n                    255,\n                    255\n                ],\n                [\n                    255,\n                    192,\n                    169\n                ],\n                [\n                    255,\n                    133,\n                    152\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 36: {\n            var colors = [\n                [\n                    16,\n                    34,\n                    13\n                ],\n                [\n                    149,\n                    171,\n                    99\n                ],\n                [\n                    189,\n                    214,\n                    132\n                ],\n                [\n                    226,\n                    240,\n                    214\n                ],\n                [\n                    246,\n                    255,\n                    224\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    default:\n        break;\n    }\n    return colorVal;\n}\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\nfillEnabB = fx('Enable Fill').value > 0;\nres = value;\nif (fillEnabB) {\n    paletteId = 1;\n    try {\n        paletteId = fx('Fill Palette').value;\n    } catch (e) {\n    }\n    pathId = 1;\n    numPaths = 1;\n    if (paletteId == 3) {\n        sat = luma = 0.5;\n        try {\n            sat = $bm_div(fx('Saturation').value, 100);\n            luma = $bm_div(fx('Luminance').value, 100);\n        } catch (e) {\n        }\n    } else if (paletteId == 4) {\n        seed = 1;\n        try {\n            seed = fx('Random Seed').value;\n        } catch (e) {\n        }\n        seedRandom(seed, true);\n    }\n    cVal = GetPathColor(paletteId, pathId, numPaths);\n    res = [\n        cVal.redF,\n        cVal.greenF,\n        cVal.blueF,\n        cVal.alphaF\n    ];\n}\n$bm_rt = res;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nvar is3dB, fx, res, fillEnabB, res, opaDistB, near, far, reverseB, path, pts, d, res, res, res, res, paletteId, paletteId, L, L, L, pts, pt, pt, pt, pt, c, res, res, res;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\nif (fx('MB ConnectLayersProStyles-0034').value > 0)\n    res = 0;\nelse {\n    fillEnabB = fx('Enable Fill').value > 0;\n    if (fillEnabB) {\n        res = fx('MB ConnectLayersProStyles-0029').value;\n        opaDistB = fx('MB ConnectLayersProStyles-0030').value > 0;\n        if (opaDistB) {\n            near = fx('MB ConnectLayersProStyles-0031').value;\n            far = fx('MB ConnectLayersProStyles-0032').value;\n            reverseB = fx('MB ConnectLayersProStyles-0033').value > 0;\n            path = content('Chain 2').content('Paths').content('Path 1').content('Path').path;\n            pts = path.points();\n            d = path.isClosed() ? length($bm_sub(pts[1], pts[0])) : length($bm_sub(pts[$bm_sub(pts.length, 1)], pts[0]));\n            if (d <= near)\n                res = 100;\n            else if (d >= far)\n                res = 0;\n            else\n                res *= ease(d, near, far, 1, 0);\n            if (reverseB)\n                res = $bm_sub(100, res);\n        }\n        paletteId = 1;\n        try {\n            paletteId = fx('Fill Palette').value;\n        } catch (e) {\n        }\n        if (paletteId == 5) {\n            L = null;\n            try {\n                L = fx('Color Layer');\n            } catch (e) {\n                L = null;\n            }\n            if (L) {\n                pts = content('Chain 2').content('Paths').content('Path 1').content('Path').path.points();\n                pt = [\n                    0,\n                    0\n                ];\n                for (var i = 0; i < pts.length; i++) {\n                    pt = $bm_sum(pt, toComp(pts[i]));\n                }\n                pt /= pts.length;\n                if (pt.length == 3)\n                    pt.pop();\n                pt = L.fromCompToSurface(pt);\n                c = L.sampleImage(pt);\n                res *= c[3];\n            } else\n                res = 0;\n        }\n    } else\n        res = 0;\n}\n$bm_rt = res;"},"r":1,"bm":0,"nm":"Fill","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"gf","o":{"a":0,"k":100,"ix":10,"x":"var $bm_rt;\nvar is3dB, fx, gradEnabB, res, opaDistB, near, far, reverseB, path, pts, d, res, res, res, res, res;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\ngradEnabB = fx('MB ConnectLayersProStyles-0034').value > 0;\nif (gradEnabB) {\n    res = fx('MB ConnectLayersProStyles-0029').value;\n    opaDistB = fx('MB ConnectLayersProStyles-0030').value > 0;\n    if (opaDistB) {\n        near = fx('MB ConnectLayersProStyles-0031').value;\n        far = fx('MB ConnectLayersProStyles-0032').value;\n        reverseB = fx('MB ConnectLayersProStyles-0033').value > 0;\n        path = content('Chain 2').content('Paths').content('Path 1').content('Path').path;\n        pts = path.points();\n        d = path.isClosed() ? length($bm_sub(pts[1], pts[0])) : length($bm_sub(pts[$bm_sub(pts.length, 1)], pts[0]));\n        if (d <= near)\n            res = 100;\n        else if (d >= far)\n            res = 0;\n        else\n            res *= ease(d, near, far, 1, 0);\n        if (reverseB)\n            res = $bm_sub(100, res);\n    }\n} else\n    res = 0;\n$bm_rt = res;"},"r":1,"bm":0,"g":{"p":2,"k":{"a":0,"k":[0,1,1,1,1,0,0,0],"ix":9}},"s":{"a":0,"k":[0,0],"ix":5,"x":"var $bm_rt;\nvar is3dB, fx, path, type, gradEnabB, gradScale, curveEnabB, pts, ptsAt0, lastIdx, startPt, startPtAt0, i, startPt, startPtAt0, startPt, startPtAt0, startPt, startPtAt0, isPennerB, curviness, curveId, isPennerB, precision, lastIdx, farthestId, maxD, i, d, maxD, farthestId, endPt, endPt, midPt, u, v, startPt, endPt, v, endPt;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\npath = content('Chain 2').content('Paths').content('Path 1').content('Path').path;\ntype = thisProperty.propertyGroup().type;\n$bm_rt = gradEnabB = fx('MB ConnectLayersProStyles-0034').value > 0;\nif (gradEnabB) {\n    gradScale = $bm_div(fx('MB ConnectLayersProStyles-0039').value, 100);\n    curveEnabB = fx('Curviness').value > 0;\n    pts = path.points();\n    ptsAt0 = path.points(0);\n    lastIdx = path.isClosed() ? $bm_sub(pts.length, 2) : $bm_sub(pts.length, 1);\n    startPt = [\n        0,\n        0\n    ];\n    startPtAt0 = [\n        0,\n        0\n    ];\n    if (type == 2) {\n        for (i = 0; i < pts.length; i++) {\n            startPt = $bm_sum(startPt, pts[i]);\n            startPtAt0 = $bm_sum(startPtAt0, ptsAt0[i]);\n        }\n        startPt /= pts.length;\n        startPtAt0 /= ptsAt0.length;\n    } else {\n        startPt = pts[0];\n        startPtAt0 = ptsAt0[0];\n    }\n    isPennerB = false;\n    if (curveEnabB) {\n        curviness = {\n            LINEAR: 1,\n            SEP1: 2,\n            ARC: 3,\n            STEP: 4,\n            STEP_AFTER: 5,\n            STEP_BEFORE: 6,\n            SEP2: 7,\n            AUTO_BEZIER: 8,\n            CUSTOM_TENSION: 9,\n            SEP3: 10,\n            DYNAMIC_BEZIER: 11,\n            DYNAMIC_CUSTOM_BEZIER: 12,\n            DYNAMIC_VERLET: 13,\n            SEP4: 14,\n            IN_SINE: 15,\n            OUT_SINE: 16,\n            IN_OUT_SINE: 17,\n            IN_QUADRATIC: 18,\n            OUT_QUADRATIC: 19,\n            IN_OUT_QUADRATIC: 20,\n            IN_CUBIC: 21,\n            OUT_CUBIC: 22,\n            IN_OUT_CUBIC: 23,\n            IN_QUARTIC: 24,\n            OUT_QUARTIC: 25,\n            IN_OUT_QUARTIC: 26,\n            IN_QUINTIC: 27,\n            OUT_QUINTIC: 28,\n            IN_OUT_QUINTIC: 29,\n            IN_EXPONENTIAL: 30,\n            OUT_EXPONENTIAL: 31,\n            IN_OUT_EXPONENTIAL: 32,\n            IN_CIRCULAR: 33,\n            OUT_CIRCULAR: 34,\n            IN_OUT_CIRCULAR: 35,\n            SEP11: 36,\n            IN_BACK: 37,\n            OUT_BACK: 38,\n            IN_OUT_BACK: 39,\n            IN_ELASTIC: 40,\n            OUT_ELASTIC: 41,\n            IN_OUT_ELASTIC: 42,\n            IN_BOUNCE: 43,\n            OUT_BOUNCE: 44,\n            IN_OUT_BOUNCE: 45\n        };\n        curveId = fx('Function').value;\n        isPennerB = curveId >= curviness.IN_SINE;\n        if (isPennerB) {\n            precision = Math.round(fx('Precision').value);\n            if (path.isClosed())\n                lastIdx = $bm_sub(lastIdx, precision);\n        }\n    }\n    if (type == 2 || path.isClosed()) {\n        farthestId = 0;\n        maxD = 0;\n        for (i = 0; i < ptsAt0.length; i++) {\n            d = length($bm_sub(ptsAt0[i], startPtAt0));\n            if (d > maxD) {\n                maxD = d;\n                farthestId = i;\n            }\n        }\n        endPt = pts[farthestId];\n    } else {\n        endPt = pts[lastIdx];\n    }\n    if (gradScale != 1) {\n        if (type == 1) {\n            midPt = $bm_mul(0.5, $bm_sum(startPt, endPt));\n            u = $bm_sub(startPt, midPt);\n            v = $bm_sub(endPt, midPt);\n            startPt = $bm_sum(midPt, $bm_mul(gradScale, u));\n            endPt = $bm_sum(midPt, $bm_mul(gradScale, v));\n        } else {\n            v = $bm_sub(endPt, startPt);\n            endPt = $bm_sum(startPt, $bm_mul(gradScale, v));\n        }\n    }\n    $bm_rt = startPt;\n} else\n    $bm_rt = value;"},"e":{"a":0,"k":[100,0],"ix":6,"x":"var $bm_rt;\nvar is3dB, fx, path, type, gradEnabB, gradScale, curveEnabB, pts, ptsAt0, lastIdx, startPt, startPtAt0, i, startPt, startPtAt0, startPt, startPtAt0, startPt, startPtAt0, isPennerB, curviness, curveId, isPennerB, precision, lastIdx, farthestId, maxD, i, d, maxD, farthestId, endPt, endPt, midPt, u, v, startPt, endPt, v, endPt;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\npath = content('Chain 2').content('Paths').content('Path 1').content('Path').path;\ntype = thisProperty.propertyGroup().type;\n$bm_rt = gradEnabB = fx('MB ConnectLayersProStyles-0034').value > 0;\nif (gradEnabB) {\n    gradScale = $bm_div(fx('MB ConnectLayersProStyles-0039').value, 100);\n    curveEnabB = fx('Curviness').value > 0;\n    pts = path.points();\n    ptsAt0 = path.points(0);\n    lastIdx = path.isClosed() ? $bm_sub(pts.length, 2) : $bm_sub(pts.length, 1);\n    startPt = [\n        0,\n        0\n    ];\n    startPtAt0 = [\n        0,\n        0\n    ];\n    if (type == 2) {\n        for (i = 0; i < pts.length; i++) {\n            startPt = $bm_sum(startPt, pts[i]);\n            startPtAt0 = $bm_sum(startPtAt0, ptsAt0[i]);\n        }\n        startPt /= pts.length;\n        startPtAt0 /= ptsAt0.length;\n    } else {\n        startPt = pts[0];\n        startPtAt0 = ptsAt0[0];\n    }\n    isPennerB = false;\n    if (curveEnabB) {\n        curviness = {\n            LINEAR: 1,\n            SEP1: 2,\n            ARC: 3,\n            STEP: 4,\n            STEP_AFTER: 5,\n            STEP_BEFORE: 6,\n            SEP2: 7,\n            AUTO_BEZIER: 8,\n            CUSTOM_TENSION: 9,\n            SEP3: 10,\n            DYNAMIC_BEZIER: 11,\n            DYNAMIC_CUSTOM_BEZIER: 12,\n            DYNAMIC_VERLET: 13,\n            SEP4: 14,\n            IN_SINE: 15,\n            OUT_SINE: 16,\n            IN_OUT_SINE: 17,\n            IN_QUADRATIC: 18,\n            OUT_QUADRATIC: 19,\n            IN_OUT_QUADRATIC: 20,\n            IN_CUBIC: 21,\n            OUT_CUBIC: 22,\n            IN_OUT_CUBIC: 23,\n            IN_QUARTIC: 24,\n            OUT_QUARTIC: 25,\n            IN_OUT_QUARTIC: 26,\n            IN_QUINTIC: 27,\n            OUT_QUINTIC: 28,\n            IN_OUT_QUINTIC: 29,\n            IN_EXPONENTIAL: 30,\n            OUT_EXPONENTIAL: 31,\n            IN_OUT_EXPONENTIAL: 32,\n            IN_CIRCULAR: 33,\n            OUT_CIRCULAR: 34,\n            IN_OUT_CIRCULAR: 35,\n            SEP11: 36,\n            IN_BACK: 37,\n            OUT_BACK: 38,\n            IN_OUT_BACK: 39,\n            IN_ELASTIC: 40,\n            OUT_ELASTIC: 41,\n            IN_OUT_ELASTIC: 42,\n            IN_BOUNCE: 43,\n            OUT_BOUNCE: 44,\n            IN_OUT_BOUNCE: 45\n        };\n        curveId = fx('Function').value;\n        isPennerB = curveId >= curviness.IN_SINE;\n        if (isPennerB) {\n            precision = Math.round(fx('Precision').value);\n            if (path.isClosed())\n                lastIdx = $bm_sub(lastIdx, precision);\n        }\n    }\n    if (type == 2 || path.isClosed()) {\n        farthestId = 0;\n        maxD = 0;\n        for (i = 0; i < ptsAt0.length; i++) {\n            d = length($bm_sub(ptsAt0[i], startPtAt0));\n            if (d > maxD) {\n                maxD = d;\n                farthestId = i;\n            }\n        }\n        endPt = pts[farthestId];\n    } else {\n        endPt = pts[lastIdx];\n    }\n    if (gradScale != 1) {\n        if (type == 1) {\n            midPt = $bm_mul(0.5, $bm_sum(startPt, endPt));\n            u = $bm_sub(startPt, midPt);\n            v = $bm_sub(endPt, midPt);\n            startPt = $bm_sum(midPt, $bm_mul(gradScale, u));\n            endPt = $bm_sum(midPt, $bm_mul(gradScale, v));\n        } else {\n            v = $bm_sub(endPt, startPt);\n            endPt = $bm_sum(startPt, $bm_mul(gradScale, v));\n        }\n    }\n    $bm_rt = endPt;\n} else\n    $bm_rt = value;"},"t":1,"nm":"Gradient Fill","mn":"ADBE Vector Graphic - G-Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Path 1","np":7,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Paths","np":6,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Chain 2","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2000,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":12,"ty":4,"nm":"prise1","parent":13,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":1,"k":[{"i":{"x":[0.67],"y":[1]},"o":{"x":[0.33],"y":[0]},"t":30,"s":[0]},{"i":{"x":[0.67],"y":[1]},"o":{"x":[0.33],"y":[0]},"t":75,"s":[39]},{"i":{"x":[0.67],"y":[1]},"o":{"x":[0.33],"y":[0]},"t":118,"s":[58]},{"t":185,"s":[0]}],"ix":10},"p":{"a":0,"k":[52.243,43.367,0],"ix":2,"l":2},"a":{"a":0,"k":[0,-72.35,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0,0],[0.25,-0.64],[-0.048,-1.078],[0.304,-2.876],[0.094,-2.07],[0.594,-6.484],[0,0],[12.038,-16.078],[0,0],[0,0],[-0.102,-1.766],[-0.521,-0.774],[-0.43,-0.164],[-0.57,-0.016],[-2.07,0.102],[0,0],[0,0],[-0.164,-3.054],[-0.118,-3.704],[-0.164,-2.556],[-0.08,-0.766],[-2.758,1.508],[-0.468,2.008],[0.264,5.118],[-0.11,3.868],[0,0],[0,0],[-1.696,-0.024],[-0.18,-0.092],[-0.132,-0.312],[-0.032,-0.266],[-0.04,-0.446],[-0.07,-1.438],[-0.062,-4.022],[-0.118,-2.938],[-0.056,-0.93],[-0.086,-0.32],[-1.312,-0.664],[-1.194,0.366],[-0.976,0.992],[0.188,4.814],[0.024,3.038],[-0.102,0.938],[0,0],[0,0],[-0.93,0.234],[-0.304,0.57],[-0.07,0.664],[-0.024,0.976],[0.07,2.492],[0.18,2.056],[0.11,0.736],[0.148,0.376],[1.132,1.22],[2.422,3.602],[0.312,0.406],[0.118,0.14],[0.15,0.094],[0.102,0.118],[0.15,0.22],[0.444,0.712],[1.086,1.866],[0.79,1.462],[0.228,0.462],[0.054,0.142],[0,-0.094],[0.054,0.158],[0.086,0.194],[0.258,0.484],[0.414,4.672],[0.234,1.586],[0.132,1.242],[0.352,2.664],[-0.008,2.134],[0.29,0.82],[0.906,0.686],[0,0],[0,0]],"o":[[0,0],[0,0],[-0.68,0.516],[-0.25,0.642],[0.172,3.726],[-0.158,1.452],[-0.242,5.492],[0,0],[-0.796,10.664],[0,0],[0,0],[0.086,3.312],[0.102,1.766],[0.258,0.39],[0.43,0.164],[1.148,0.038],[0,0],[0,0],[0.124,0.89],[0.172,3.062],[0.124,3.704],[0.084,1.272],[1.312,3.726],[1.704,-0.992],[0.47,-2.008],[-0.25,-4.866],[0,0],[0,0],[6.648,-0.524],[0.852,0.008],[0.188,0.102],[-0.008,-0.016],[0.04,0.266],[0.07,0.882],[0.14,2.874],[0.07,4.032],[0.054,1.46],[0.062,0.93],[0.306,1.172],[1.306,0.672],[0.954,-0.298],[0.922,-1.992],[-0.14,-3.616],[-0.022,-3.04],[0,0],[0,0],[2.422,-0.196],[0.93,-0.242],[0.188,-0.344],[0.072,-0.664],[0.054,-1.954],[-0.078,-2.492],[-0.086,-1.022],[-0.102,-0.734],[-0.47,-1.14],[-2.906,-3.218],[-0.352,-0.532],[-0.156,-0.202],[-0.124,-0.134],[0.07,0.04],[-0.094,-0.124],[-0.296,-0.428],[-0.892,-1.414],[-1.086,-1.868],[-0.398,-0.734],[-0.108,-0.234],[-0.064,-0.14],[0,-0.178],[-0.056,-0.148],[-0.172,-0.4],[-1.618,-3.094],[-0.226,-2.564],[-0.234,-1.556],[-0.132,-1.266],[-0.342,-2.634],[0,-1.852],[-0.288,-0.822],[0,0],[0,0],[0,0]],"v":[[-8.144,-71.808],[-10.415,-71.718],[-11.673,-70.772],[-13.063,-69.14],[-13.297,-66.67],[-13.445,-59.272],[-13.883,-52.89],[-15.243,-33.858],[-15.243,-33.842],[-35.219,7.892],[-38.821,12.704],[-38.509,24.338],[-38.313,31.822],[-37.517,35.494],[-36.461,36.33],[-34.969,36.58],[-30.251,36.36],[-25.907,36.15],[-25.469,39.204],[-25.001,45.532],[-24.555,56.048],[-24.109,65.744],[-23.859,68.838],[-16.165,71.556],[-12.939,67.532],[-12.781,57.438],[-13.031,41.54],[-12.837,34.844],[0.179,33.814],[11.875,33.056],[13.327,33.258],[13.679,33.774],[13.765,34.22],[13.883,35.29],[14.101,38.814],[14.421,49.508],[14.711,60.306],[14.883,63.946],[15.069,65.766],[17.827,68.58],[21.819,69.244],[25.117,66.97],[26.413,51.766],[26.163,41.408],[26.289,35.016],[26.647,31.728],[31.859,31.314],[36.625,30.744],[38.343,29.502],[38.647,28.056],[38.789,25.564],[38.757,18.65],[38.375,11.594],[38.077,8.93],[37.711,7.274],[34.867,3.118],[26.367,-6.788],[25.343,-8.234],[24.929,-8.748],[24.577,-9.07],[24.445,-9.226],[24.077,-9.742],[22.953,-11.476],[19.867,-16.608],[16.929,-21.82],[15.975,-23.648],[15.727,-24.226],[15.647,-24.398],[15.555,-24.82],[15.343,-25.342],[14.687,-26.718],[11.773,-37.842],[10.945,-45.35],[10.273,-50.452],[9.397,-57.576],[8.781,-66.304],[8.475,-70.006],[6.711,-72.014],[6.273,-72.35],[3.75,-72.256]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"fl","c":{"a":0,"k":[0.841176450253,0.868627429008,0.898039221764,1],"ix":4},"o":{"a":0,"k":100,"ix":5},"r":1,"bm":0,"nm":"Fill 1","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2000,"st":0,"ct":1,"bm":0},{"ddd":0,"ind":13,"ty":3,"nm":"bout1","sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0.67],"y":[1]},"o":{"x":[0.33],"y":[0]},"t":30,"s":[1394.001]},{"i":{"x":[0.67],"y":[1]},"o":{"x":[0.33],"y":[0]},"t":66,"s":[1430.001]},{"i":{"x":[0.553],"y":[1]},"o":{"x":[0.33],"y":[0]},"t":103,"s":[1119.088]},{"t":185,"s":[1394.001]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0.67],"y":[1]},"o":{"x":[0.33],"y":[0]},"t":30,"s":[1006]},{"i":{"x":[0.67],"y":[1]},"o":{"x":[0.33],"y":[0]},"t":50,"s":[1063]},{"i":{"x":[0.67],"y":[1]},"o":{"x":[0.33],"y":[0]},"t":116,"s":[925]},{"t":185,"s":[1006]}],"ix":4}},"a":{"a":0,"k":[50,50,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":2000,"st":0,"bm":0},{"ddd":0,"ind":14,"ty":3,"nm":"milieu1","sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"s":true,"x":{"a":1,"k":[{"i":{"x":[0.67],"y":[1]},"o":{"x":[0.33],"y":[0]},"t":30,"s":[1391.001]},{"i":{"x":[0.67],"y":[1]},"o":{"x":[0.33],"y":[0]},"t":75,"s":[1475.001]},{"i":{"x":[0.67],"y":[1]},"o":{"x":[0.33],"y":[0]},"t":118,"s":[1289.001]},{"t":185,"s":[1391.001]}],"ix":3},"y":{"a":1,"k":[{"i":{"x":[0.67],"y":[1]},"o":{"x":[0.33],"y":[0]},"t":30,"s":[466]},{"i":{"x":[0.67],"y":[1]},"o":{"x":[0.33],"y":[0]},"t":69,"s":[526]},{"i":{"x":[0.67],"y":[1]},"o":{"x":[0.33],"y":[0]},"t":112,"s":[535]},{"t":185,"s":[466]}],"ix":4}},"a":{"a":0,"k":[50,50,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":2000,"st":0,"bm":0},{"ddd":0,"ind":15,"ty":3,"nm":"debut1","sr":1,"ks":{"o":{"a":0,"k":0,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[1445.001,-110,0],"ix":2,"l":2},"a":{"a":0,"k":[50,50,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ip":0,"op":2000,"st":0,"bm":0},{"ddd":0,"ind":16,"ty":4,"nm":"Chain 1","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[0,0],"ix":2,"l":2},"a":{"a":0,"k":[0,0,0],"ix":1,"l":2},"s":{"a":0,"k":[100,100,100],"ix":6,"l":2}},"ao":0,"ef":[{"ty":5,"nm":"Connect Layers Pro - Styles","np":152,"mn":"MB ConnectLayersProStyles","ix":1,"en":1,"ef":[{"ty":6,"nm":"Stroke","mn":"MB ConnectLayersProStyles-0001","ix":1,"v":0},{"ty":2,"nm":"Stroke Color","mn":"MB ConnectLayersProStyles-0002","ix":2,"v":{"a":0,"k":[0.839215755463,0.866666734219,0.898039281368,1],"ix":2}},{"ty":0,"nm":"Stroke Opacity","mn":"MB ConnectLayersProStyles-0003","ix":3,"v":{"a":0,"k":100,"ix":3}},{"ty":7,"nm":"Opacity From Distance","mn":"MB ConnectLayersProStyles-0004","ix":4,"v":{"a":0,"k":0,"ix":4}},{"ty":0,"nm":"Near (px)","mn":"MB ConnectLayersProStyles-0005","ix":5,"v":{"a":0,"k":100,"ix":5}},{"ty":0,"nm":"Far (px)","mn":"MB ConnectLayersProStyles-0006","ix":6,"v":{"a":0,"k":400,"ix":6}},{"ty":7,"nm":"Reverse Behavior","mn":"MB ConnectLayersProStyles-0007","ix":7,"v":{"a":0,"k":0,"ix":7}},{"ty":0,"nm":"Stroke Width","mn":"MB ConnectLayersProStyles-0008","ix":8,"v":{"a":0,"k":10,"ix":8}},{"ty":7,"nm":"Line Cap","mn":"MB ConnectLayersProStyles-0009","ix":9,"v":{"a":0,"k":1,"ix":9}},{"ty":7,"nm":"Line Join","mn":"MB ConnectLayersProStyles-0010","ix":10,"v":{"a":0,"k":1,"ix":10}},{"ty":0,"nm":"Miter Limit","mn":"MB ConnectLayersProStyles-0011","ix":11,"v":{"a":0,"k":4,"ix":11}},{"ty":7,"nm":"Enable Gradient","mn":"MB ConnectLayersProStyles-0012","ix":12,"v":{"a":0,"k":0,"ix":12}},{"ty":7,"nm":"Gradient Type","mn":"MB ConnectLayersProStyles-0013","ix":13,"v":{"a":0,"k":1,"ix":13}},{"ty":0,"nm":"Highlight Length","mn":"MB ConnectLayersProStyles-0014","ix":14,"v":{"a":0,"k":0,"ix":14}},{"ty":0,"nm":"Highlight Angle","mn":"MB ConnectLayersProStyles-0015","ix":15,"v":{"a":0,"k":0,"ix":15}},{"ty":6,"nm":"Gradient Colors","mn":"MB ConnectLayersProStyles-0016","ix":16,"v":0},{"ty":0,"nm":"Gradient Scale (%)","mn":"MB ConnectLayersProStyles-0017","ix":17,"v":{"a":0,"k":100,"ix":17}},{"ty":7,"nm":"Reverse Path","mn":"MB ConnectLayersProStyles-0018","ix":18,"v":{"a":0,"k":0,"ix":18}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0019","ix":19,"v":0},{"ty":6,"nm":"Fill","mn":"MB ConnectLayersProStyles-0020","ix":20,"v":0},{"ty":7,"nm":"Enable Fill","mn":"MB ConnectLayersProStyles-0021","ix":21,"v":{"a":0,"k":0,"ix":21}},{"ty":7,"nm":"Fill Palette","mn":"MB ConnectLayersProStyles-0022","ix":22,"v":{"a":0,"k":1,"ix":22}},{"ty":2,"nm":"Fill Color","mn":"MB ConnectLayersProStyles-0023","ix":23,"v":{"a":0,"k":[0.78431372549,0.549019607843,0.972549019608,1],"ix":23}},{"ty":2,"nm":"End Color","mn":"MB ConnectLayersProStyles-0024","ix":24,"v":{"a":0,"k":[0.121568627451,0,0.247058823529,1],"ix":24}},{"ty":0,"nm":"Saturation","mn":"MB ConnectLayersProStyles-0025","ix":25,"v":{"a":0,"k":50,"ix":25}},{"ty":0,"nm":"Luminance","mn":"MB ConnectLayersProStyles-0026","ix":26,"v":{"a":0,"k":50,"ix":26}},{"ty":0,"nm":"Random Seed","mn":"MB ConnectLayersProStyles-0027","ix":27,"v":{"a":0,"k":1,"ix":27}},{"ty":10,"nm":"Color Layer","mn":"MB ConnectLayersProStyles-0028","ix":28,"v":{"a":0,"k":0,"ix":28}},{"ty":0,"nm":"Fill Opacity","mn":"MB ConnectLayersProStyles-0029","ix":29,"v":{"a":0,"k":100,"ix":29}},{"ty":7,"nm":"Opacity From Distance","mn":"MB ConnectLayersProStyles-0030","ix":30,"v":{"a":0,"k":0,"ix":30}},{"ty":0,"nm":"Near (px)","mn":"MB ConnectLayersProStyles-0031","ix":31,"v":{"a":0,"k":100,"ix":31}},{"ty":0,"nm":"Far (px)","mn":"MB ConnectLayersProStyles-0032","ix":32,"v":{"a":0,"k":400,"ix":32}},{"ty":7,"nm":"Reverse Behavior","mn":"MB ConnectLayersProStyles-0033","ix":33,"v":{"a":0,"k":0,"ix":33}},{"ty":7,"nm":"Enable Gradient","mn":"MB ConnectLayersProStyles-0034","ix":34,"v":{"a":0,"k":0,"ix":34}},{"ty":7,"nm":"Gradient Type","mn":"MB ConnectLayersProStyles-0035","ix":35,"v":{"a":0,"k":1,"ix":35}},{"ty":0,"nm":"Highlight Length","mn":"MB ConnectLayersProStyles-0036","ix":36,"v":{"a":0,"k":0,"ix":36}},{"ty":0,"nm":"Highlight Angle","mn":"MB ConnectLayersProStyles-0037","ix":37,"v":{"a":0,"k":0,"ix":37}},{"ty":6,"nm":"Gradient Colors","mn":"MB ConnectLayersProStyles-0038","ix":38,"v":0},{"ty":0,"nm":"Gradient Scale (%)","mn":"MB ConnectLayersProStyles-0039","ix":39,"v":{"a":0,"k":100,"ix":39}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0040","ix":40,"v":0},{},{"ty":6,"nm":"Enable Modules","mn":"MB ConnectLayersProStyles-0042","ix":42,"v":0},{"ty":7,"nm":"Arrowheads","mn":"MB ConnectLayersProStyles-0043","ix":43,"v":{"a":0,"k":0,"ix":43}},{"ty":7,"nm":"Curviness","mn":"MB ConnectLayersProStyles-0044","ix":44,"v":{"a":0,"k":1,"ix":44}},{"ty":7,"nm":"Dashes","mn":"MB ConnectLayersProStyles-0045","ix":45,"v":{"a":0,"k":0,"ix":45}},{"ty":7,"nm":"Offset","mn":"MB ConnectLayersProStyles-0046","ix":46,"v":{"a":0,"k":0,"ix":46}},{"ty":7,"nm":"Repeater","mn":"MB ConnectLayersProStyles-0047","ix":47,"v":{"a":0,"k":0,"ix":47}},{"ty":7,"nm":"Round Corners","mn":"MB ConnectLayersProStyles-0048","ix":48,"v":{"a":0,"k":0,"ix":48}},{"ty":7,"nm":"Trim","mn":"MB ConnectLayersProStyles-0049","ix":49,"v":{"a":0,"k":0,"ix":49}},{"ty":7,"nm":"Twist","mn":"MB ConnectLayersProStyles-0050","ix":50,"v":{"a":0,"k":0,"ix":50}},{"ty":7,"nm":"Wiggle","mn":"MB ConnectLayersProStyles-0051","ix":51,"v":{"a":0,"k":0,"ix":51}},{"ty":7,"nm":"Zig Zag","mn":"MB ConnectLayersProStyles-0052","ix":52,"v":{"a":0,"k":0,"ix":52}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0053","ix":53,"v":0},{"ty":6,"nm":"Arrowheads","mn":"MB ConnectLayersProStyles-0054","ix":54,"v":0},{"ty":7,"nm":"Start","mn":"MB ConnectLayersProStyles-0055","ix":55,"v":{"a":0,"k":1,"ix":55}},{"ty":7,"nm":"End","mn":"MB ConnectLayersProStyles-0056","ix":56,"v":{"a":0,"k":1,"ix":56}},{"ty":2,"nm":"Stroke Color","mn":"MB ConnectLayersProStyles-0057","ix":57,"v":{"a":0,"k":[1,1,1,1],"ix":57}},{"ty":0,"nm":"Stroke Opacity","mn":"MB ConnectLayersProStyles-0058","ix":58,"v":{"a":0,"k":100,"ix":58}},{"ty":0,"nm":"Stroke Width","mn":"MB ConnectLayersProStyles-0059","ix":59,"v":{"a":0,"k":0,"ix":59}},{"ty":2,"nm":"Fill Color","mn":"MB ConnectLayersProStyles-0060","ix":60,"v":{"a":0,"k":[1,1,1,1],"ix":60}},{"ty":0,"nm":"Fill Opacity","mn":"MB ConnectLayersProStyles-0061","ix":61,"v":{"a":0,"k":100,"ix":61}},{"ty":7,"nm":"Opacity from Path","mn":"MB ConnectLayersProStyles-0062","ix":62,"v":{"a":0,"k":1,"ix":62}},{"ty":0,"nm":"Circle/Square Size","mn":"MB ConnectLayersProStyles-0063","ix":63,"v":{"a":0,"k":15,"ix":63}},{"ty":0,"nm":"Triangle Scale","mn":"MB ConnectLayersProStyles-0064","ix":64,"v":{"a":0,"k":100,"ix":64}},{"ty":0,"nm":"Triangle Length","mn":"MB ConnectLayersProStyles-0065","ix":65,"v":{"a":0,"k":40,"ix":65}},{"ty":0,"nm":"Triangle Width","mn":"MB ConnectLayersProStyles-0066","ix":66,"v":{"a":0,"k":20,"ix":66}},{"ty":0,"nm":"Round Corners","mn":"MB ConnectLayersProStyles-0067","ix":67,"v":{"a":0,"k":0,"ix":67}},{"ty":6,"nm":"Customization","mn":"MB ConnectLayersProStyles-0068","ix":68,"v":0},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0069","ix":69,"v":0},{"ty":6,"nm":"Curviness","mn":"MB ConnectLayersProStyles-0070","ix":70,"v":0},{"ty":7,"nm":"Function","mn":"MB ConnectLayersProStyles-0071","ix":71,"v":{"a":0,"k":8,"ix":71}},{"ty":7,"nm":"Flip Direction","mn":"MB ConnectLayersProStyles-0072","ix":72,"v":{"a":0,"k":0,"ix":72}},{"ty":0,"nm":"Tension","mn":"MB ConnectLayersProStyles-0073","ix":73,"v":{"a":0,"k":33.333,"ix":73}},{"ty":7,"nm":"Preset","mn":"MB ConnectLayersProStyles-0074","ix":74,"v":{"a":0,"k":1,"ix":74}},{"ty":7,"nm":"Preset","mn":"MB ConnectLayersProStyles-0075","ix":75,"v":{"a":0,"k":1,"ix":75}},{"ty":0,"nm":"Stiffness","mn":"MB ConnectLayersProStyles-0076","ix":76,"v":{"a":0,"k":100,"ix":76}},{"ty":0,"nm":"Damping","mn":"MB ConnectLayersProStyles-0077","ix":77,"v":{"a":0,"k":50,"ix":77}},{"ty":0,"nm":"Max Tangent Length","mn":"MB ConnectLayersProStyles-0078","ix":78,"v":{"a":0,"k":33.333,"ix":78}},{"ty":0,"nm":"Start Tangent X","mn":"MB ConnectLayersProStyles-0079","ix":79,"v":{"a":0,"k":0,"ix":79}},{"ty":0,"nm":"Start Tangent Y","mn":"MB ConnectLayersProStyles-0080","ix":80,"v":{"a":0,"k":0,"ix":80}},{"ty":0,"nm":"End Tangent X","mn":"MB ConnectLayersProStyles-0081","ix":81,"v":{"a":0,"k":0,"ix":81}},{"ty":0,"nm":"End Tangent Y","mn":"MB ConnectLayersProStyles-0082","ix":82,"v":{"a":0,"k":0,"ix":82}},{"ty":0,"nm":"Stiffness","mn":"MB ConnectLayersProStyles-0083","ix":83,"v":{"a":0,"k":50,"ix":83}},{"ty":0,"nm":"Solver Steps","mn":"MB ConnectLayersProStyles-0084","ix":84,"v":{"a":0,"k":5,"ix":84}},{"ty":0,"nm":"Subsegments","mn":"MB ConnectLayersProStyles-0085","ix":85,"v":{"a":0,"k":10,"ix":85}},{"ty":0,"nm":"Gravity","mn":"MB ConnectLayersProStyles-0086","ix":86,"v":{"a":0,"k":0,"ix":86}},{"ty":0,"nm":"Dynamics Start Frame","mn":"MB ConnectLayersProStyles-0087","ix":87,"v":{"a":0,"k":0,"ix":87}},{"ty":0,"nm":"Precision","mn":"MB ConnectLayersProStyles-0088","ix":88,"v":{"a":0,"k":15,"ix":88}},{"ty":0,"nm":"Angle (3D only)","mn":"MB ConnectLayersProStyles-0089","ix":89,"v":{"a":0,"k":45,"ix":89}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0090","ix":90,"v":0},{"ty":6,"nm":"Dashes","mn":"MB ConnectLayersProStyles-0091","ix":91,"v":0},{"ty":0,"nm":"Dash","mn":"MB ConnectLayersProStyles-0092","ix":92,"v":{"a":0,"k":10,"ix":92}},{"ty":0,"nm":"Gap","mn":"MB ConnectLayersProStyles-0093","ix":93,"v":{"a":0,"k":10,"ix":93}},{"ty":0,"nm":"Offset","mn":"MB ConnectLayersProStyles-0094","ix":94,"v":{"a":0,"k":0,"ix":94}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0095","ix":95,"v":0},{"ty":6,"nm":"Offset","mn":"MB ConnectLayersProStyles-0096","ix":96,"v":0},{"ty":0,"nm":"Amount","mn":"MB ConnectLayersProStyles-0097","ix":97,"v":{"a":0,"k":0,"ix":97}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0098","ix":98,"v":0},{"ty":6,"nm":"Repeater","mn":"MB ConnectLayersProStyles-0099","ix":99,"v":0},{"ty":0,"nm":"Copies","mn":"MB ConnectLayersProStyles-0100","ix":100,"v":{"a":0,"k":3,"ix":100}},{"ty":0,"nm":"Offset","mn":"MB ConnectLayersProStyles-0101","ix":101,"v":{"a":0,"k":0,"ix":101}},{"ty":7,"nm":"Symmetric Offset","mn":"MB ConnectLayersProStyles-0102","ix":102,"v":{"a":0,"k":1,"ix":102}},{"ty":6,"nm":"Transform: Repeater","mn":"MB ConnectLayersProStyles-0103","ix":103,"v":0},{"ty":0,"nm":"Anchor Point X","mn":"MB ConnectLayersProStyles-0104","ix":104,"v":{"a":0,"k":0,"ix":104}},{"ty":0,"nm":"Anchor Point Y","mn":"MB ConnectLayersProStyles-1104","ix":105,"v":{"a":0,"k":0,"ix":105}},{"ty":7,"nm":"Center Anchor","mn":"MB ConnectLayersProStyles-0106","ix":106,"v":{"a":0,"k":1,"ix":106}},{"ty":0,"nm":"Position Offset","mn":"MB ConnectLayersProStyles-0107","ix":107,"v":{"a":0,"k":0,"ix":107}},{"ty":0,"nm":"Position X","mn":"MB ConnectLayersProStyles-0108","ix":108,"v":{"a":0,"k":0,"ix":108}},{"ty":0,"nm":"Position Y","mn":"MB ConnectLayersProStyles-0109","ix":109,"v":{"a":0,"k":0,"ix":109}},{"ty":0,"nm":"Scale","mn":"MB ConnectLayersProStyles-0110","ix":110,"v":{"a":0,"k":100,"ix":110}},{"ty":0,"nm":"Rotation","mn":"MB ConnectLayersProStyles-0111","ix":111,"v":{"a":0,"k":0,"ix":111}},{"ty":0,"nm":"Start Opacity","mn":"MB ConnectLayersProStyles-0112","ix":112,"v":{"a":0,"k":100,"ix":112}},{"ty":0,"nm":"End Opacity","mn":"MB ConnectLayersProStyles-0113","ix":113,"v":{"a":0,"k":100,"ix":113}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0114","ix":114,"v":0},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0115","ix":115,"v":0},{"ty":6,"nm":"Round Corners","mn":"MB ConnectLayersProStyles-0116","ix":116,"v":0},{"ty":0,"nm":"Radius","mn":"MB ConnectLayersProStyles-0117","ix":117,"v":{"a":0,"k":10,"ix":117}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0118","ix":118,"v":0},{"ty":6,"nm":"Trim","mn":"MB ConnectLayersProStyles-0119","ix":119,"v":0},{"ty":0,"nm":"Start","mn":"MB ConnectLayersProStyles-0120","ix":120,"v":{"a":0,"k":0,"ix":120}},{"ty":0,"nm":"End","mn":"MB ConnectLayersProStyles-0121","ix":121,"v":{"a":0,"k":100,"ix":121}},{"ty":0,"nm":"Both Ends","mn":"MB ConnectLayersProStyles-0122","ix":122,"v":{"a":0,"k":0,"ix":122}},{"ty":0,"nm":"Offset","mn":"MB ConnectLayersProStyles-0123","ix":123,"v":{"a":0,"k":0,"ix":123}},{"ty":7,"nm":"Trim Multiple Shapes","mn":"MB ConnectLayersProStyles-0124","ix":124,"v":{"a":0,"k":1,"ix":124}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0125","ix":125,"v":0},{"ty":6,"nm":"Twist","mn":"MB ConnectLayersProStyles-0126","ix":126,"v":0},{"ty":0,"nm":"Angle","mn":"MB ConnectLayersProStyles-0127","ix":127,"v":{"a":0,"k":10,"ix":127}},{"ty":0,"nm":"Center X","mn":"MB ConnectLayersProStyles-0128","ix":128,"v":{"a":0,"k":0,"ix":128}},{"ty":0,"nm":"Center Y","mn":"MB ConnectLayersProStyles-0129","ix":129,"v":{"a":0,"k":0,"ix":129}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0130","ix":130,"v":0},{"ty":6,"nm":"Wiggle","mn":"MB ConnectLayersProStyles-0131","ix":131,"v":0},{"ty":0,"nm":"Size","mn":"MB ConnectLayersProStyles-0132","ix":132,"v":{"a":0,"k":10,"ix":132}},{"ty":0,"nm":"Detail","mn":"MB ConnectLayersProStyles-0133","ix":133,"v":{"a":0,"k":10,"ix":133}},{"ty":7,"nm":"Points","mn":"MB ConnectLayersProStyles-0134","ix":134,"v":{"a":0,"k":1,"ix":134}},{"ty":0,"nm":"Wiggles/Second","mn":"MB ConnectLayersProStyles-0135","ix":135,"v":{"a":0,"k":2,"ix":135}},{"ty":0,"nm":"Correlation","mn":"MB ConnectLayersProStyles-0136","ix":136,"v":{"a":0,"k":50,"ix":136}},{"ty":0,"nm":"Temporal Phase","mn":"MB ConnectLayersProStyles-0137","ix":137,"v":{"a":0,"k":0,"ix":137}},{"ty":0,"nm":"Spatial Phase","mn":"MB ConnectLayersProStyles-0138","ix":138,"v":{"a":0,"k":0,"ix":138}},{"ty":0,"nm":"Random Seed","mn":"MB ConnectLayersProStyles-0139","ix":139,"v":{"a":0,"k":0,"ix":139}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0140","ix":140,"v":0},{"ty":6,"nm":"Zig Zag","mn":"MB ConnectLayersProStyles-0141","ix":141,"v":0},{"ty":0,"nm":"Size","mn":"MB ConnectLayersProStyles-0142","ix":142,"v":{"a":0,"k":5,"ix":142}},{"ty":0,"nm":"Ridges per segment","mn":"MB ConnectLayersProStyles-0143","ix":143,"v":{"a":0,"k":10,"ix":143}},{"ty":7,"nm":"Points","mn":"MB ConnectLayersProStyles-0144","ix":144,"v":{"a":0,"k":1,"ix":144}},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0145","ix":145,"v":0},{"ty":6,"nm":"Assistant","mn":"MB ConnectLayersProStyles-0146","ix":146,"v":0},{"ty":6,"nm":"Path Expressions","mn":"MB ConnectLayersProStyles-0147","ix":147,"v":0},{"ty":6,"nm":"Style Expressions","mn":"MB ConnectLayersProStyles-0148","ix":148,"v":0},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0149","ix":149,"v":0},{"ty":6,"nm":"","mn":"MB ConnectLayersProStyles-0150","ix":150,"v":0}]}],"shapes":[{"ty":"gr","it":[{"ty":"gr","it":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[],"o":[],"v":[],"c":false},"ix":2,"x":"var $bm_rt;\nvar Ls, is3dB, fx, precision, flipDirB, tension, presetId, stiffness, damping, maxTanLen, iterations, subsegments, grav, uOutTan, uInTan, dynamicsStartTime, closedB, reversePathB, curveEnabB, curveId, curviness, dynamicsStartTime, curveId, flipDirB, tension, presetId, stiffness, damping, maxTanLen, uOutTan, uInTan, stiffness, iterations, subsegments, grav, precision, pts, tans, intans, outtans, intans, outtans;\nfunction getPoints() {\n    function getVerletSegmentPoints(L1, L2) {\n        function addPoint(x, y, vx, vy) {\n            points.push({\n                x: x,\n                y: y,\n                ox: x - vx,\n                oy: y - vy\n            });\n            return points[$bm_sub(points.length, 1)];\n        }\n        ;\n        function movePoint(p) {\n            var vx = $bm_mul($bm_sub(p.x, p.ox), stiffness);\n            var vy = $bm_mul($bm_sub(p.y, p.oy), stiffness);\n            p.ox = p.x;\n            p.oy = p.y;\n            p.x = $bm_sum(p.x, vx);\n            p.y = $bm_sum(p.y, vy);\n            p.y = $bm_sum(p.y, grav);\n        }\n        ;\n        function movePoints() {\n            for (var i = 0; i < points.length; i++)\n                movePoint(points[i]);\n        }\n        ;\n        function addLine(p1, p2) {\n            lines.push({\n                p1: p1,\n                p2: p2,\n                len: length([\n                    p1.x - p2.x,\n                    p1.y - p2.y\n                ])\n            });\n            return lines[$bm_sub(lines.length, 1)];\n        }\n        ;\n        function constrainLine(l) {\n            var dx = $bm_sub(l.p2.x, l.p1.x);\n            var dy = $bm_sub(l.p2.y, l.p1.y);\n            var ll = length([\n                dx,\n                dy\n            ]);\n            if (ll == 0)\n                ll = 0.001;\n            var fr = $bm_div($bm_div($bm_sub(l.len, ll), ll), 2);\n            dx *= fr;\n            dy *= fr;\n            l.p1.x = $bm_sub(l.p1.x, dx);\n            l.p1.y = $bm_sub(l.p1.y, dy);\n            l.p2.x = $bm_sum(l.p2.x, dx);\n            l.p2.y = $bm_sum(l.p2.y, dy);\n        }\n        ;\n        function constrainLines() {\n            for (var i = 0; i < lines.length; i++)\n                constrainLine(lines[i]);\n        }\n        ;\n        var points = [];\n        var lines = [];\n        var pt1 = is3dB ? fromWorld(L1.toWorld(L1.anchorPoint, dynamicsStartTime)) : L1.toComp(L1.anchorPoint, dynamicsStartTime);\n        var pt2 = is3dB ? fromWorld(L2.toWorld(L2.anchorPoint, dynamicsStartTime)) : L2.toComp(L2.anchorPoint, dynamicsStartTime);\n        var d0 = length($bm_sub(pt2, pt1));\n        var u = is3dB ? [\n            1,\n            0\n        ] : d0 != 0 ? normalize(pt2 - pt1) : [\n            0,\n            0\n        ];\n        var distance = $bm_div(d0, subsegments);\n        var p1 = addPoint(pt1[0], pt1[1], 0, 0);\n        for (var i = 1; i <= subsegments; i++) {\n            var pt = $bm_sum(pt1, $bm_mul($bm_mul(i, distance), u));\n            var p2 = addPoint(pt[0], pt[1], 0, 0);\n            addLine(p1, p2);\n            p1 = p2;\n        }\n        for (var t = dynamicsStartTime + thisComp.frameDuration; t <= time + 0.001; t += thisComp.frameDuration) {\n            movePoints();\n            var startId = 0;\n            var endId = $bm_sub(points.length, 1);\n            pt1 = is3dB ? fromWorld(L1.toWorld(L1.anchorPoint, t)) : L1.toComp(L1.anchorPoint, t);\n            pt2 = is3dB ? fromWorld(L2.toWorld(L2.anchorPoint, t)) : L2.toComp(L2.anchorPoint, t);\n            points[startId].ox = points[startId].x = pt1[0];\n            points[startId].oy = points[startId].y = pt1[1];\n            points[endId].ox = points[endId].x = pt2[0];\n            points[endId].oy = points[endId].y = pt2[1];\n            for (var i = 0; i < iterations; i++) {\n                constrainLines();\n            }\n        }\n        ;\n        var ps = [];\n        for (var i = 0; i < points.length; i++) {\n            if (i == 0)\n                ps.push([\n                    pt1[0],\n                    pt1[1]\n                ]);\n            else if (i == $bm_sub(points.length, 1))\n                ps.push([\n                    pt2[0],\n                    pt2[1]\n                ]);\n            else\n                ps.push([\n                    points[i].x,\n                    points[i].y\n                ]);\n        }\n        return ps;\n    }\n    ;\n    function QuadraticEaseIn(p) {\n        return $bm_mul(p, p);\n    }\n    function QuadraticEaseOut(p) {\n        return $bm_neg($bm_mul(p, $bm_sub(p, 2)));\n    }\n    function QuadraticEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul($bm_mul(2, p), p);\n        } else {\n            return $bm_sub($bm_sum($bm_mul($bm_mul(-2, p), p), $bm_mul(4, p)), 1);\n        }\n    }\n    function CubicEaseIn(p) {\n        return $bm_mul($bm_mul(p, p), p);\n    }\n    function CubicEaseOut(p) {\n        var f = $bm_sub(p, 1);\n        return $bm_sum($bm_mul($bm_mul(f, f), f), 1);\n    }\n    function CubicEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul($bm_mul($bm_mul(4, p), p), p);\n        } else {\n            var f = $bm_sub($bm_mul(2, p), 2);\n            return $bm_sum($bm_mul($bm_mul($bm_mul(0.5, f), f), f), 1);\n        }\n    }\n    function QuarticEaseIn(p) {\n        return $bm_mul($bm_mul($bm_mul(p, p), p), p);\n    }\n    function QuarticEaseOut(p) {\n        var f = $bm_sub(p, 1);\n        return $bm_sum($bm_mul($bm_mul($bm_mul(f, f), f), $bm_sub(1, p)), 1);\n    }\n    function QuarticEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul($bm_mul($bm_mul($bm_mul(8, p), p), p), p);\n        } else {\n            var f = $bm_sub(p, 1);\n            return $bm_sum($bm_mul($bm_mul($bm_mul($bm_mul(-8, f), f), f), f), 1);\n        }\n    }\n    function QuinticEaseIn(p) {\n        return $bm_mul($bm_mul($bm_mul($bm_mul(p, p), p), p), p);\n    }\n    function QuinticEaseOut(p) {\n        var f = $bm_sub(p, 1);\n        return $bm_sum($bm_mul($bm_mul($bm_mul($bm_mul(f, f), f), f), f), 1);\n    }\n    function QuinticEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul($bm_mul($bm_mul($bm_mul($bm_mul(16, p), p), p), p), p);\n        } else {\n            var f = $bm_sub($bm_mul(2, p), 2);\n            return $bm_sum($bm_mul($bm_mul($bm_mul($bm_mul($bm_mul(0.5, f), f), f), f), f), 1);\n        }\n    }\n    function SineEaseIn(p) {\n        return $bm_sum(Math.sin($bm_mul($bm_sub(p, 1), $bm_div(Math.PI, 2))), 1);\n    }\n    function SineEaseOut(p) {\n        return Math.sin($bm_mul(p, $bm_div(Math.PI, 2)));\n    }\n    function SineEaseInOut(p) {\n        return $bm_mul(0.5, $bm_sub(1, Math.cos($bm_mul(p, Math.PI))));\n    }\n    function CircularEaseIn(p) {\n        return $bm_sub(1, Math.sqrt($bm_sub(1, $bm_mul(p, p))));\n    }\n    function CircularEaseOut(p) {\n        return Math.sqrt($bm_mul($bm_sub(2, p), p));\n    }\n    function CircularEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul(0.5, $bm_sub(1, Math.sqrt($bm_sub(1, $bm_mul(4, $bm_mul(p, p))))));\n        } else {\n            return $bm_mul(0.5, $bm_sum(Math.sqrt($bm_mul($bm_neg($bm_sub($bm_mul(2, p), 3)), $bm_sub($bm_mul(2, p), 1))), 1));\n        }\n    }\n    function ExponentialEaseIn(p) {\n        return p == 0 ? p : Math.pow(2, 10 * (p - 1));\n    }\n    function ExponentialEaseOut(p) {\n        return p == 1 ? p : 1 - Math.pow(2, -10 * p);\n    }\n    function ExponentialEaseInOut(p) {\n        if (p == 0 || p == 1)\n            return p;\n        if (p < 0.5) {\n            return $bm_mul(0.5, Math.pow(2, $bm_sub($bm_mul(20, p), 10)));\n        } else {\n            return $bm_sum($bm_mul(-0.5, Math.pow(2, $bm_sum($bm_mul(-20, p), 10))), 1);\n        }\n    }\n    function ElasticEaseIn(p) {\n        return $bm_mul(Math.sin($bm_mul($bm_mul(13, $bm_div(Math.PI, 2)), p)), Math.pow(2, $bm_mul(10, $bm_sub(p, 1))));\n    }\n    function ElasticEaseOut(p) {\n        return $bm_sum($bm_mul(Math.sin($bm_mul($bm_mul(-13, $bm_div(Math.PI, 2)), $bm_sum(p, 1))), Math.pow(2, $bm_mul(-10, p))), 1);\n    }\n    function ElasticEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul($bm_mul(0.5, Math.sin($bm_mul($bm_mul(13, $bm_div(Math.PI, 2)), $bm_mul(2, p)))), Math.pow(2, $bm_mul(10, $bm_sub($bm_mul(2, p), 1))));\n        } else {\n            return $bm_mul(0.5, $bm_sum($bm_mul(Math.sin($bm_mul($bm_mul(-13, $bm_div(Math.PI, 2)), $bm_sum($bm_sub($bm_mul(2, p), 1), 1))), Math.pow(2, $bm_mul(-10, $bm_sub($bm_mul(2, p), 1)))), 2));\n        }\n    }\n    function BackEaseIn(p) {\n        return $bm_sub($bm_mul($bm_mul(p, p), p), $bm_mul(p, Math.sin($bm_mul(p, Math.PI))));\n    }\n    function BackEaseOut(p) {\n        var f = $bm_sub(1, p);\n        return $bm_sub(1, $bm_sub($bm_mul($bm_mul(f, f), f), $bm_mul(f, Math.sin($bm_mul(f, Math.PI)))));\n    }\n    function BackEaseInOut(p) {\n        if (p < 0.5) {\n            var f = $bm_mul(2, p);\n            return $bm_mul(0.5, $bm_sub($bm_mul($bm_mul(f, f), f), $bm_mul(f, Math.sin($bm_mul(f, Math.PI)))));\n        } else {\n            var f = $bm_sub(1, $bm_sub($bm_mul(2, p), 1));\n            return $bm_sum($bm_mul(0.5, $bm_sub(1, $bm_sub($bm_mul($bm_mul(f, f), f), $bm_mul(f, Math.sin($bm_mul(f, Math.PI)))))), 0.5);\n        }\n    }\n    function BounceEaseIn(p) {\n        return $bm_sub(1, BounceEaseOut($bm_sub(1, p)));\n    }\n    function BounceEaseOut(p) {\n        if (p < 4 / 11) {\n            return $bm_div($bm_mul($bm_mul(121, p), p), 16);\n        } else if (p < 8 / 11) {\n            return $bm_sum($bm_sub($bm_mul($bm_mul(363 / 40, p), p), $bm_mul(99 / 10, p)), 17 / 5);\n        } else if (p < 9 / 10) {\n            return $bm_sum($bm_sub($bm_mul($bm_mul(4356 / 361, p), p), $bm_mul(35442 / 1805, p)), 16061 / 1805);\n        } else {\n            return $bm_sum($bm_sub($bm_mul($bm_mul(54 / 5, p), p), $bm_mul(513 / 25, p)), 268 / 25);\n        }\n    }\n    function BounceEaseInOut(p) {\n        if (p < 0.5) {\n            return $bm_mul(0.5, BounceEaseIn($bm_mul(p, 2)));\n        } else {\n            return $bm_sum($bm_mul(0.5, BounceEaseOut($bm_sub($bm_mul(p, 2), 1))), 0.5);\n        }\n    }\n    function getPennerSegmentPoints(p1, p2) {\n        var vId;\n        var ps = [];\n        var startPointX = p1[0];\n        var startPointY = p1[1];\n        var endPointX = p2[0];\n        var endPointY = p2[1];\n        for (vId = 0; vId <= precision; vId++) {\n            var lambda = $bm_div(vId, precision);\n            var x = $bm_sum(startPointX, $bm_mul($bm_sub(endPointX, startPointX), lambda));\n            var y = $bm_sum(startPointY, $bm_mul($bm_sub(endPointY, startPointY), lambda));\n            switch (curveId) {\n            case curviness.IN_BACK: {\n                    y = startPointY + (endPointY - startPointY) * BackEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_BACK: {\n                    y = startPointY + (endPointY - startPointY) * BackEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_BACK: {\n                    y = startPointY + (endPointY - startPointY) * BackEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_BOUNCE: {\n                    y = startPointY + (endPointY - startPointY) * BounceEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_BOUNCE: {\n                    y = startPointY + (endPointY - startPointY) * BounceEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_BOUNCE: {\n                    y = startPointY + (endPointY - startPointY) * BounceEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_CIRCULAR: {\n                    y = startPointY + (endPointY - startPointY) * CircularEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_CIRCULAR: {\n                    y = startPointY + (endPointY - startPointY) * CircularEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_CIRCULAR: {\n                    y = startPointY + (endPointY - startPointY) * CircularEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_CUBIC: {\n                    y = startPointY + (endPointY - startPointY) * CubicEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_CUBIC: {\n                    y = startPointY + (endPointY - startPointY) * CubicEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_CUBIC: {\n                    y = startPointY + (endPointY - startPointY) * CubicEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_ELASTIC: {\n                    y = startPointY + (endPointY - startPointY) * ElasticEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_ELASTIC: {\n                    y = startPointY + (endPointY - startPointY) * ElasticEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_ELASTIC: {\n                    y = startPointY + (endPointY - startPointY) * ElasticEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_EXPONENTIAL: {\n                    y = startPointY + (endPointY - startPointY) * ExponentialEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_EXPONENTIAL: {\n                    y = startPointY + (endPointY - startPointY) * ExponentialEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_EXPONENTIAL: {\n                    y = startPointY + (endPointY - startPointY) * ExponentialEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_QUADRATIC: {\n                    y = startPointY + (endPointY - startPointY) * QuadraticEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_QUADRATIC: {\n                    y = startPointY + (endPointY - startPointY) * QuadraticEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_QUADRATIC: {\n                    y = startPointY + (endPointY - startPointY) * QuadraticEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_QUARTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuarticEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_QUARTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuarticEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_QUARTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuarticEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_QUINTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuinticEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_QUINTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuinticEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_QUINTIC: {\n                    y = startPointY + (endPointY - startPointY) * QuinticEaseInOut(lambda);\n                    break;\n                }\n            case curviness.IN_SINE: {\n                    y = startPointY + (endPointY - startPointY) * SineEaseIn(lambda);\n                    break;\n                }\n            case curviness.OUT_SINE: {\n                    y = startPointY + (endPointY - startPointY) * SineEaseOut(lambda);\n                    break;\n                }\n            case curviness.IN_OUT_SINE: {\n                    y = startPointY + (endPointY - startPointY) * SineEaseInOut(lambda);\n                    break;\n                }\n            default:\n                break;\n            }\n            ps.push([\n                x,\n                y\n            ]);\n        }\n        return ps;\n    }\n    ;\n    var ps = [];\n    var numSegs = $bm_sub(Ls.length, 1);\n    for (var segId = 0; segId < numSegs; segId++) {\n        var L1 = Ls[segId];\n        var L2 = Ls[segId + 1];\n        var p1 = is3dB ? fromWorld(L1.toWorld(L1.anchorPoint)) : L1.toComp(L1.anchorPoint);\n        if (p1.length == 3)\n            p1.pop();\n        var p2 = is3dB ? fromWorld(L2.toWorld(L2.anchorPoint)) : L2.toComp(L2.anchorPoint);\n        if (p2.length == 3)\n            p2.pop();\n        var M = $bm_div($bm_sum(p1, p2), 2);\n        var A, B;\n        if (curveEnabB && curveId == curviness.STEP) {\n            A = flipDirB ? [\n                p1[0],\n                M[1]\n            ] : [\n                M[0],\n                p1[1]\n            ];\n            B = flipDirB ? [\n                p2[0],\n                M[1]\n            ] : [\n                M[0],\n                p2[1]\n            ];\n            ps.push(p1);\n            ps.push(A);\n            ps.push(B);\n            ps.push(p2);\n        } else if (curveEnabB && curveId == curviness.STEP_AFTER) {\n            A = [\n                p2[0],\n                p1[1]\n            ];\n            ps.push(p1);\n            ps.push(A);\n            ps.push(p2);\n        } else if (curveEnabB && curveId == curviness.STEP_BEFORE) {\n            A = [\n                p1[0],\n                p2[1]\n            ];\n            ps.push(p1);\n            ps.push(A);\n            ps.push(p2);\n        } else if (curveEnabB && curveId == curviness.DYNAMIC_VERLET) {\n            ps.push.apply(ps, getVerletSegmentPoints(L1, L2));\n            if (numSegs > 1 && segId < numSegs - 1)\n                ps.pop();\n        } else if (curveEnabB && curveId >= curviness.IN_SINE) {\n            ps.push.apply(ps, getPennerSegmentPoints(p1, p2));\n        } else {\n            if (segId == 0) {\n                ps.push(p1);\n                ps.push(p2);\n            } else\n                ps.push(p2);\n        }\n    }\n    return ps;\n}\nfunction getTangents() {\n    function getRotoBezierTangents(tensFactor) {\n        var is = [];\n        var os = [];\n        if (!closedB) {\n            is.push([\n                0,\n                0\n            ]);\n            os.push([\n                0,\n                0\n            ]);\n        } else {\n            if (curveId == curviness.DYNAMIC_VERLET || curveId >= curviness.IN_SINE) {\n                is.push([\n                    0,\n                    0\n                ]);\n                os.push([\n                    0,\n                    0\n                ]);\n            } else {\n                var u = $bm_sub(pts[1], pts[$bm_sub(pts.length, 2)]);\n                if (length(u) != 0)\n                    u = normalize(u);\n                var lNext = length($bm_sub(pts[1], pts[0]));\n                var lOut = $bm_mul(tensFactor, lNext);\n                is.push([\n                    0,\n                    0\n                ]);\n                os.push($bm_mul(lOut, u));\n            }\n        }\n        for (var j = 1; j < pts.length - 1; j++) {\n            var u = $bm_sub(pts[$bm_sum(j, 1)], pts[$bm_sub(j, 1)]);\n            if (length(u) != 0)\n                u = normalize(u);\n            if (curveId == curviness.DYNAMIC_VERLET && j % subsegments == 0 || curveId >= curviness.IN_SINE && j % precision == 0)\n                u = [\n                    0,\n                    0\n                ];\n            var lPrev = length($bm_sub(pts[j], pts[$bm_sub(j, 1)]));\n            var lNext = length($bm_sub(pts[$bm_sum(j, 1)], pts[j]));\n            var lIn = $bm_mul(tensFactor, lPrev);\n            var lOut = $bm_mul(tensFactor, lNext);\n            is.push($bm_mul($bm_neg(lIn), u));\n            os.push($bm_mul(lOut, u));\n        }\n        if (!closedB) {\n            is.push([\n                0,\n                0\n            ]);\n            os.push([\n                0,\n                0\n            ]);\n        } else {\n            if (curveId == curviness.DYNAMIC_VERLET || curveId >= curviness.IN_SINE) {\n                is.push([\n                    0,\n                    0\n                ]);\n                os.push([\n                    0,\n                    0\n                ]);\n            } else {\n                var u = $bm_sub(pts[1], pts[$bm_sub(pts.length, 2)]);\n                if (length(u) != 0)\n                    u = normalize(u);\n                var lPrev = length($bm_sub(pts[$bm_sub(pts.length, 2)], pts[$bm_sub(pts.length, 1)]));\n                var lIn = $bm_mul(tensFactor, lPrev);\n                is.push($bm_mul($bm_neg(lIn), u));\n                os.push([\n                    0,\n                    0\n                ]);\n            }\n        }\n        if (!closedB) {\n            var PIn1 = $bm_sum(pts[1], is[1]);\n            var P0 = pts[0];\n            var dirOut0 = $bm_sub(PIn1, P0);\n            if (length(dirOut0) != 0)\n                dirOut0 = normalize(dirOut0);\n            var lOut0 = $bm_mul(tensFactor, length($bm_sub(PIn1, P0)));\n            var out0 = $bm_mul(lOut0, dirOut0);\n            var POut0 = $bm_sum(pts[$bm_sub(pts.length, 2)], os[$bm_sub(pts.length, 2)]);\n            var Pn = pts[pts.length - 1];\n            var dirInN = $bm_sub(POut0, Pn);\n            if (length(dirInN) != 0)\n                dirInN = normalize(dirInN);\n            var lInN = $bm_mul(tensFactor, length($bm_sub(POut0, Pn)));\n            var inN = $bm_mul(lInN, dirInN);\n            os[0] = out0;\n            is[is.length - 1] = inN;\n        }\n        return [\n            is,\n            os\n        ];\n    }\n    ;\n    function getDynamicBezierSegmentTangents(L1, L2) {\n        var targetP1, targetP2;\n        var out0 = [\n            0,\n            0\n        ];\n        var in1 = [\n            0,\n            0\n        ];\n        var vel1 = [\n            0,\n            0\n        ];\n        var vel2 = [\n            0,\n            0\n        ];\n        var P1, P2;\n        for (var t = dynamicsStartTime; t <= time + 0.001; t += thisComp.frameDuration) {\n            var p1 = is3dB ? fromWorld(L1.toWorld(L1.anchorPoint, t)) : L1.toComp(L1.anchorPoint, t);\n            if (p1.length == 3)\n                p1.pop();\n            var p2 = is3dB ? fromWorld(L2.toWorld(L2.anchorPoint, t)) : L2.toComp(L2.anchorPoint, t);\n            if (p2.length == 3)\n                p2.pop();\n            var u1 = $bm_sub(p2, p1);\n            var u2 = $bm_sub(p1, p2);\n            if (t == dynamicsStartTime) {\n                if (curveId == curviness.DYNAMIC_BEZIER) {\n                    P1 = $bm_sum(p1, $bm_mul(maxTanLen, u1));\n                    P2 = $bm_sum(p2, $bm_mul(maxTanLen, u2));\n                } else if (curveId == curviness.DYNAMIC_CUSTOM_BEZIER) {\n                    P1 = $bm_sum(p1, uOutTan);\n                    P2 = $bm_sum(p2, uInTan);\n                }\n            }\n            if (curveId == curviness.DYNAMIC_BEZIER) {\n                targetP1 = $bm_sum(p1, $bm_mul(maxTanLen, u1));\n                targetP2 = $bm_sum(p2, $bm_mul(maxTanLen, u2));\n            } else if (curveId == curviness.DYNAMIC_CUSTOM_BEZIER) {\n                targetP1 = $bm_sum(p1, uOutTan);\n                targetP2 = $bm_sum(p2, uInTan);\n            }\n            vel1 = $bm_sum($bm_mul(stiffness, $bm_sub(targetP1, P1)), $bm_mul(damping, vel1));\n            vel2 = $bm_sum($bm_mul(stiffness, $bm_sub(targetP2, P2)), $bm_mul(damping, vel2));\n            P1 = $bm_sum(P1, vel1);\n            P2 = $bm_sum(P2, vel2);\n            out0 = $bm_sub(P1, p1);\n            in1 = $bm_sub(P2, p2);\n        }\n        return [\n            out0,\n            in1\n        ];\n    }\n    ;\n    var ins = [];\n    var outs = [];\n    if (curveEnabB) {\n        var numSegs = $bm_sub(Ls.length, 1);\n        if (curveId == curviness.AUTO_BEZIER || curveId == curviness.DYNAMIC_VERLET || curveId >= curviness.IN_SINE) {\n            var tans = getRotoBezierTangents(1 / 3);\n            ins = tans[0];\n            outs = tans[1];\n        } else if (curveId == curviness.CUSTOM_TENSION) {\n            var tans = getRotoBezierTangents(tension);\n            ins = tans[0];\n            outs = tans[1];\n        } else {\n            for (var segId = 0; segId < numSegs; segId++) {\n                var L1 = Ls[segId];\n                var L2 = Ls[segId + 1];\n                switch (curveId) {\n                case curviness.DYNAMIC_BEZIER:\n                case curviness.DYNAMIC_CUSTOM_BEZIER: {\n                        var tans = getDynamicBezierSegmentTangents(L1, L2);\n                        var out0 = tans[0];\n                        var in1 = tans[1];\n                        if (segId == 0)\n                            ins.push([\n                                0,\n                                0\n                            ]);\n                        outs.push(out0);\n                        ins.push(in1);\n                        if (segId == numSegs - 1)\n                            outs.push([\n                                0,\n                                0\n                            ]);\n                        break;\n                    }\n                case curviness.ARC: {\n                        var p1 = is3dB ? fromWorld(L1.toWorld(L1.anchorPoint)) : L1.toComp(L1.anchorPoint);\n                        var p2 = is3dB ? fromWorld(L2.toWorld(L2.anchorPoint)) : L2.toComp(L2.anchorPoint);\n                        var u = p2 - p1;\n                        var d = length(u);\n                        var u = d == 0 ? [\n                            0,\n                            0\n                        ] : normalize(u);\n                        var n = [\n                            u[1],\n                            -u[0]\n                        ];\n                        if (flipDirB)\n                            n *= -1;\n                        var out0 = 2 / 3 * d * n;\n                        var in1 = out0;\n                        if (segId == 0)\n                            ins.push([\n                                0,\n                                0\n                            ]);\n                        outs.push(out0);\n                        ins.push(in1);\n                        if (segId == numSegs - 1)\n                            outs.push([\n                                0,\n                                0\n                            ]);\n                        break;\n                    }\n                default:\n                    break;\n                }\n            }\n        }\n    }\n    return [\n        ins,\n        outs\n    ];\n}\nLs = [\n    thisComp.layer('bout1'),\n    thisComp.layer('milieu1'),\n    thisComp.layer('debut1')\n];\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\nprecision = 15;\nflipDirB = false;\ntension = 1 / 3;\npresetId = 1;\nstiffness = 1;\ndamping = 0.5;\nmaxTanLen = 1 / 3;\niterations = 5;\nsubsegments = 10;\ngrav = 0;\nuOutTan = [\n    0,\n    0\n];\nuInTan = [\n    0,\n    0\n];\ndynamicsStartTime = 0;\nclosedB = Ls[0]._name == Ls[Ls.length - 1]._name;\nreversePathB = fx('Reverse Path').value > 0;\ncurveEnabB = fx('Curviness').value > 0;\nif (curveEnabB) {\n    curveId = fx('Function').value;\n    curviness = {\n        LINEAR: 1,\n        SEP1: 2,\n        ARC: 3,\n        STEP: 4,\n        STEP_AFTER: 5,\n        STEP_BEFORE: 6,\n        SEP2: 7,\n        AUTO_BEZIER: 8,\n        CUSTOM_TENSION: 9,\n        SEP3: 10,\n        DYNAMIC_BEZIER: 11,\n        DYNAMIC_CUSTOM_BEZIER: 12,\n        DYNAMIC_VERLET: 13,\n        SEP4: 14,\n        IN_SINE: 15,\n        OUT_SINE: 16,\n        IN_OUT_SINE: 17,\n        IN_QUADRATIC: 18,\n        OUT_QUADRATIC: 19,\n        IN_OUT_QUADRATIC: 20,\n        IN_CUBIC: 21,\n        OUT_CUBIC: 22,\n        IN_OUT_CUBIC: 23,\n        IN_QUARTIC: 24,\n        OUT_QUARTIC: 25,\n        IN_OUT_QUARTIC: 26,\n        IN_QUINTIC: 27,\n        OUT_QUINTIC: 28,\n        IN_OUT_QUINTIC: 29,\n        IN_EXPONENTIAL: 30,\n        OUT_EXPONENTIAL: 31,\n        IN_OUT_EXPONENTIAL: 32,\n        IN_CIRCULAR: 33,\n        OUT_CIRCULAR: 34,\n        IN_OUT_CIRCULAR: 35,\n        SEP11: 36,\n        IN_BACK: 37,\n        OUT_BACK: 38,\n        IN_OUT_BACK: 39,\n        IN_ELASTIC: 40,\n        OUT_ELASTIC: 41,\n        IN_OUT_ELASTIC: 42,\n        IN_BOUNCE: 43,\n        OUT_BOUNCE: 44,\n        IN_OUT_BOUNCE: 45\n    };\n    if (curveId == curviness.DYNAMIC_BEZIER || curveId == curviness.DYNAMIC_CUSTOM_BEZIER || curveId == curviness.DYNAMIC_VERLET) {\n        try {\n            dynamicsStartTime = $bm_mul(fx('Dynamics Start Frame').value, thisComp.frameDuration);\n            if (time < dynamicsStartTime)\n                curveId = curviness.LINEAR;\n        } catch (e) {\n        }\n    }\n    if (curveId == curviness.ARC || curveId == curviness.STEP) {\n        try {\n            flipDirB = fx('Flip Direction').value > 0;\n        } catch (e) {\n        }\n    } else if (curveId == curviness.CUSTOM_TENSION) {\n        try {\n            tension = $bm_div(fx('Tension').value, 100);\n        } catch (e) {\n        }\n    } else if (curveId == curviness.DYNAMIC_BEZIER || curveId == curviness.DYNAMIC_CUSTOM_BEZIER) {\n        try {\n            presetId = fx('MB ConnectLayersProStyles-0074').value;\n            stiffness = $bm_div(fx('MB ConnectLayersProStyles-0076').value, 100);\n            damping = $bm_div(fx('MB ConnectLayersProStyles-0077').value, 100);\n            maxTanLen = $bm_div(fx('MB ConnectLayersProStyles-0078').value, 100);\n        } catch (e) {\n        }\n        if (curveId == curviness.DYNAMIC_CUSTOM_BEZIER) {\n            try {\n                uOutTan = [\n                    fx('Start Tangent X').value,\n                    fx('Start Tangent Y').value\n                ];\n                uInTan = [\n                    fx('End Tangent X').value,\n                    fx('End Tangent Y').value\n                ];\n            } catch (e) {\n            }\n        }\n    } else if (curveId == curviness.DYNAMIC_VERLET) {\n        try {\n            stiffness = $bm_div(fx('MB ConnectLayersProStyles-0083').value, 100);\n            iterations = Math.round(fx('Solver Steps').value);\n            subsegments = Math.round(fx('Subsegments').value);\n            grav = $bm_div(fx('Gravity').value, 10);\n        } catch (e) {\n        }\n    } else if (curveId >= curviness.IN_SINE) {\n        try {\n            precision = Math.round(fx('Precision').value);\n        } catch (e) {\n        }\n    }\n}\npts = getPoints();\ntans = getTangents();\nintans = tans[0];\nouttans = tans[1];\nif (reversePathB) {\n    pts.reverse();\n    intans = tans[1].reverse();\n    outtans = tans[0].reverse();\n}\n$bm_rt = createPath(pts, intans, outtans, closedB);"},"nm":"Path","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"st","c":{"a":0,"k":[1,1,1,1],"ix":3,"x":"var $bm_rt;\nvar is3dB, fx;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\n$bm_rt = fx('MB ConnectLayersProStyles-0002');"},"o":{"a":0,"k":100,"ix":4,"x":"var $bm_rt;\nvar is3dB, fx, gradEnabB, res, res, opaDistB, near, far, reverseB, path, pts, d, res, res, res, res;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\ngradEnabB = fx('MB ConnectLayersProStyles-0012').value > 0;\nif (gradEnabB)\n    res = 0;\nelse {\n    res = fx('MB ConnectLayersProStyles-0003').value;\n    opaDistB = fx('MB ConnectLayersProStyles-0004').value > 0;\n    if (opaDistB) {\n        near = fx('MB ConnectLayersProStyles-0005').value;\n        far = fx('MB ConnectLayersProStyles-0006').value;\n        reverseB = fx('MB ConnectLayersProStyles-0007').value > 0;\n        path = content('Chain 1').content('Paths').content('Path 1').content('Path').path;\n        pts = path.points();\n        d = path.isClosed() ? length($bm_sub(pts[1], pts[0])) : length($bm_sub(pts[$bm_sub(pts.length, 1)], pts[0]));\n        if (d <= near)\n            res = 100;\n        else if (d >= far)\n            res = 0;\n        else\n            res *= ease(d, near, far, 1, 0);\n        if (reverseB)\n            res = $bm_sub(100, res);\n    }\n}\n$bm_rt = res;"},"w":{"a":0,"k":2,"ix":5,"x":"var $bm_rt;\nvar is3dB, fx;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\n$bm_rt = fx('MB ConnectLayersProStyles-0008');"},"lc":1,"lj":1,"ml":4,"bm":0,"nm":"Stroke","mn":"ADBE Vector Graphic - Stroke","hd":false},{"ty":"gs","o":{"a":0,"k":100,"ix":9,"x":"var $bm_rt;\nvar is3dB, fx, gradEnabB, res, opaDistB, near, far, reverseB, path, pts, d, res, res, res, res, res;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\ngradEnabB = fx('MB ConnectLayersProStyles-0012').value > 0;\nif (gradEnabB) {\n    res = fx('MB ConnectLayersProStyles-0003').value;\n    opaDistB = fx('MB ConnectLayersProStyles-0004').value > 0;\n    if (opaDistB) {\n        near = fx('MB ConnectLayersProStyles-0005').value;\n        far = fx('MB ConnectLayersProStyles-0006').value;\n        reverseB = fx('MB ConnectLayersProStyles-0007').value > 0;\n        path = content('Chain 1').content('Paths').content('Path 1').content('Path').path;\n        pts = path.points();\n        d = path.isClosed() ? length($bm_sub(pts[1], pts[0])) : length($bm_sub(pts[$bm_sub(pts.length, 1)], pts[0]));\n        if (d <= near)\n            res = 100;\n        else if (d >= far)\n            res = 0;\n        else\n            res *= ease(d, near, far, 1, 0);\n        if (reverseB)\n            res = $bm_sub(100, res);\n    }\n} else\n    res = 0;\n$bm_rt = res;"},"w":{"a":0,"k":2,"ix":10,"x":"var $bm_rt;\nvar is3dB, fx;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\n$bm_rt = fx('MB ConnectLayersProStyles-0008');"},"g":{"p":2,"k":{"a":0,"k":[0,1,1,1,1,0,0,0],"ix":8}},"s":{"a":0,"k":[0,0],"ix":4,"x":"var $bm_rt;\nvar is3dB, fx, path, type, gradEnabB, gradScale, curveEnabB, pts, ptsAt0, lastIdx, startPt, startPtAt0, i, startPt, startPtAt0, startPt, startPtAt0, startPt, startPtAt0, isPennerB, curviness, curveId, isPennerB, precision, lastIdx, farthestId, maxD, i, d, maxD, farthestId, endPt, endPt, midPt, u, v, startPt, endPt, v, endPt;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\npath = content('Chain 1').content('Paths').content('Path 1').content('Path').path;\ntype = thisProperty.propertyGroup().type;\n$bm_rt = gradEnabB = fx('MB ConnectLayersProStyles-0012').value > 0;\nif (gradEnabB) {\n    gradScale = $bm_div(fx('MB ConnectLayersProStyles-0017').value, 100);\n    curveEnabB = fx('Curviness').value > 0;\n    pts = path.points();\n    ptsAt0 = path.points(0);\n    lastIdx = path.isClosed() ? $bm_sub(pts.length, 2) : $bm_sub(pts.length, 1);\n    startPt = [\n        0,\n        0\n    ];\n    startPtAt0 = [\n        0,\n        0\n    ];\n    if (type == 2) {\n        for (i = 0; i < pts.length; i++) {\n            startPt = $bm_sum(startPt, pts[i]);\n            startPtAt0 = $bm_sum(startPtAt0, ptsAt0[i]);\n        }\n        startPt /= pts.length;\n        startPtAt0 /= ptsAt0.length;\n    } else {\n        startPt = pts[0];\n        startPtAt0 = ptsAt0[0];\n    }\n    isPennerB = false;\n    if (curveEnabB) {\n        curviness = {\n            LINEAR: 1,\n            SEP1: 2,\n            ARC: 3,\n            STEP: 4,\n            STEP_AFTER: 5,\n            STEP_BEFORE: 6,\n            SEP2: 7,\n            AUTO_BEZIER: 8,\n            CUSTOM_TENSION: 9,\n            SEP3: 10,\n            DYNAMIC_BEZIER: 11,\n            DYNAMIC_CUSTOM_BEZIER: 12,\n            DYNAMIC_VERLET: 13,\n            SEP4: 14,\n            IN_SINE: 15,\n            OUT_SINE: 16,\n            IN_OUT_SINE: 17,\n            IN_QUADRATIC: 18,\n            OUT_QUADRATIC: 19,\n            IN_OUT_QUADRATIC: 20,\n            IN_CUBIC: 21,\n            OUT_CUBIC: 22,\n            IN_OUT_CUBIC: 23,\n            IN_QUARTIC: 24,\n            OUT_QUARTIC: 25,\n            IN_OUT_QUARTIC: 26,\n            IN_QUINTIC: 27,\n            OUT_QUINTIC: 28,\n            IN_OUT_QUINTIC: 29,\n            IN_EXPONENTIAL: 30,\n            OUT_EXPONENTIAL: 31,\n            IN_OUT_EXPONENTIAL: 32,\n            IN_CIRCULAR: 33,\n            OUT_CIRCULAR: 34,\n            IN_OUT_CIRCULAR: 35,\n            SEP11: 36,\n            IN_BACK: 37,\n            OUT_BACK: 38,\n            IN_OUT_BACK: 39,\n            IN_ELASTIC: 40,\n            OUT_ELASTIC: 41,\n            IN_OUT_ELASTIC: 42,\n            IN_BOUNCE: 43,\n            OUT_BOUNCE: 44,\n            IN_OUT_BOUNCE: 45\n        };\n        curveId = fx('Function').value;\n        isPennerB = curveId >= curviness.IN_SINE;\n        if (isPennerB) {\n            precision = Math.round(fx('Precision').value);\n            if (path.isClosed())\n                lastIdx = $bm_sub(lastIdx, precision);\n        }\n    }\n    if (type == 2 || path.isClosed()) {\n        farthestId = 0;\n        maxD = 0;\n        for (i = 0; i < ptsAt0.length; i++) {\n            d = length($bm_sub(ptsAt0[i], startPtAt0));\n            if (d > maxD) {\n                maxD = d;\n                farthestId = i;\n            }\n        }\n        endPt = pts[farthestId];\n    } else {\n        endPt = pts[lastIdx];\n    }\n    if (gradScale != 1) {\n        if (type == 1) {\n            midPt = $bm_mul(0.5, $bm_sum(startPt, endPt));\n            u = $bm_sub(startPt, midPt);\n            v = $bm_sub(endPt, midPt);\n            startPt = $bm_sum(midPt, $bm_mul(gradScale, u));\n            endPt = $bm_sum(midPt, $bm_mul(gradScale, v));\n        } else {\n            v = $bm_sub(endPt, startPt);\n            endPt = $bm_sum(startPt, $bm_mul(gradScale, v));\n        }\n    }\n    $bm_rt = startPt;\n} else\n    $bm_rt = value;"},"e":{"a":0,"k":[100,0],"ix":5,"x":"var $bm_rt;\nvar is3dB, fx, path, type, gradEnabB, gradScale, curveEnabB, pts, ptsAt0, lastIdx, startPt, startPtAt0, i, startPt, startPtAt0, startPt, startPtAt0, startPt, startPtAt0, isPennerB, curviness, curveId, isPennerB, precision, lastIdx, farthestId, maxD, i, d, maxD, farthestId, endPt, endPt, midPt, u, v, startPt, endPt, v, endPt;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\npath = content('Chain 1').content('Paths').content('Path 1').content('Path').path;\ntype = thisProperty.propertyGroup().type;\n$bm_rt = gradEnabB = fx('MB ConnectLayersProStyles-0012').value > 0;\nif (gradEnabB) {\n    gradScale = $bm_div(fx('MB ConnectLayersProStyles-0017').value, 100);\n    curveEnabB = fx('Curviness').value > 0;\n    pts = path.points();\n    ptsAt0 = path.points(0);\n    lastIdx = path.isClosed() ? $bm_sub(pts.length, 2) : $bm_sub(pts.length, 1);\n    startPt = [\n        0,\n        0\n    ];\n    startPtAt0 = [\n        0,\n        0\n    ];\n    if (type == 2) {\n        for (i = 0; i < pts.length; i++) {\n            startPt = $bm_sum(startPt, pts[i]);\n            startPtAt0 = $bm_sum(startPtAt0, ptsAt0[i]);\n        }\n        startPt /= pts.length;\n        startPtAt0 /= ptsAt0.length;\n    } else {\n        startPt = pts[0];\n        startPtAt0 = ptsAt0[0];\n    }\n    isPennerB = false;\n    if (curveEnabB) {\n        curviness = {\n            LINEAR: 1,\n            SEP1: 2,\n            ARC: 3,\n            STEP: 4,\n            STEP_AFTER: 5,\n            STEP_BEFORE: 6,\n            SEP2: 7,\n            AUTO_BEZIER: 8,\n            CUSTOM_TENSION: 9,\n            SEP3: 10,\n            DYNAMIC_BEZIER: 11,\n            DYNAMIC_CUSTOM_BEZIER: 12,\n            DYNAMIC_VERLET: 13,\n            SEP4: 14,\n            IN_SINE: 15,\n            OUT_SINE: 16,\n            IN_OUT_SINE: 17,\n            IN_QUADRATIC: 18,\n            OUT_QUADRATIC: 19,\n            IN_OUT_QUADRATIC: 20,\n            IN_CUBIC: 21,\n            OUT_CUBIC: 22,\n            IN_OUT_CUBIC: 23,\n            IN_QUARTIC: 24,\n            OUT_QUARTIC: 25,\n            IN_OUT_QUARTIC: 26,\n            IN_QUINTIC: 27,\n            OUT_QUINTIC: 28,\n            IN_OUT_QUINTIC: 29,\n            IN_EXPONENTIAL: 30,\n            OUT_EXPONENTIAL: 31,\n            IN_OUT_EXPONENTIAL: 32,\n            IN_CIRCULAR: 33,\n            OUT_CIRCULAR: 34,\n            IN_OUT_CIRCULAR: 35,\n            SEP11: 36,\n            IN_BACK: 37,\n            OUT_BACK: 38,\n            IN_OUT_BACK: 39,\n            IN_ELASTIC: 40,\n            OUT_ELASTIC: 41,\n            IN_OUT_ELASTIC: 42,\n            IN_BOUNCE: 43,\n            OUT_BOUNCE: 44,\n            IN_OUT_BOUNCE: 45\n        };\n        curveId = fx('Function').value;\n        isPennerB = curveId >= curviness.IN_SINE;\n        if (isPennerB) {\n            precision = Math.round(fx('Precision').value);\n            if (path.isClosed())\n                lastIdx = $bm_sub(lastIdx, precision);\n        }\n    }\n    if (type == 2 || path.isClosed()) {\n        farthestId = 0;\n        maxD = 0;\n        for (i = 0; i < ptsAt0.length; i++) {\n            d = length($bm_sub(ptsAt0[i], startPtAt0));\n            if (d > maxD) {\n                maxD = d;\n                farthestId = i;\n            }\n        }\n        endPt = pts[farthestId];\n    } else {\n        endPt = pts[lastIdx];\n    }\n    if (gradScale != 1) {\n        if (type == 1) {\n            midPt = $bm_mul(0.5, $bm_sum(startPt, endPt));\n            u = $bm_sub(startPt, midPt);\n            v = $bm_sub(endPt, midPt);\n            startPt = $bm_sum(midPt, $bm_mul(gradScale, u));\n            endPt = $bm_sum(midPt, $bm_mul(gradScale, v));\n        } else {\n            v = $bm_sub(endPt, startPt);\n            endPt = $bm_sum(startPt, $bm_mul(gradScale, v));\n        }\n    }\n    $bm_rt = endPt;\n} else\n    $bm_rt = value;"},"t":1,"lc":1,"lj":1,"ml":4,"ml2":{"a":0,"k":4,"ix":13},"bm":0,"nm":"Gradient Stroke","mn":"ADBE Vector Graphic - G-Stroke","hd":false},{"ty":"fl","c":{"a":0,"k":[1,0,0,1],"ix":4,"x":"var $bm_rt;\nvar is3dB, fx, fillEnabB, res, paletteId, paletteId, pathId, numPaths, sat, sat, luma, seed, seed, cVal, res;\nfunction HueToRgb(p, q, t) {\n    if (t < 0)\n        t++;\n    if (t > 1)\n        t--;\n    if (t < 1 / 6)\n        return $bm_sum(p, $bm_mul($bm_mul($bm_sub(q, p), 6), t));\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return $bm_sum(p, $bm_mul($bm_mul($bm_sub(q, p), 6), $bm_sub(2 / 3, t)));\n    return p;\n}\nfunction HslToRgb(h, s, l) {\n    var c = {\n        alphaF: 0,\n        redF: 0,\n        greenF: 0,\n        blueF: 0\n    };\n    if (s == 0) {\n        c.alphaF = 1;\n        c.redF = c.greenF = c.blueF = 1;\n    } else {\n        var q = l < 0.5 ? $bm_mul(l, $bm_sum(1, s)) : $bm_sub($bm_sum(l, s), $bm_mul(l, s));\n        var p = $bm_sub($bm_mul(2, l), q);\n        c.alphaF = 1;\n        c.redF = HueToRgb(p, q, $bm_sum(h, 1 / 3));\n        c.greenF = HueToRgb(p, q, h);\n        c.blueF = HueToRgb(p, q, $bm_sub(h, 1 / 3));\n    }\n    return c;\n}\nfunction GetColorFromKulerScheme(colors, idx, total) {\n    var colorVal = {\n        alphaF: 0,\n        redF: 0,\n        greenF: 0,\n        blueF: 0\n    };\n    var incr = $bm_div(5, total);\n    var frac = $bm_mul(incr, $bm_sub(idx, 1));\n    var low = Math.max(0, Math.floor(frac));\n    var high = Math.min(4, Math.ceil(frac));\n    if (low != high) {\n        colorVal.alphaF = 1;\n        colorVal.redF = $bm_div($bm_div($bm_sum(colors[low][0], colors[high][0]), 2), 255);\n        colorVal.greenF = $bm_div($bm_div($bm_sum(colors[low][1], colors[high][1]), 2), 255);\n        colorVal.blueF = $bm_div($bm_div($bm_sum(colors[low][2], colors[high][2]), 2), 255);\n    } else {\n        colorVal.alphaF = 1;\n        colorVal.redF = $bm_div(colors[low][0], 255);\n        colorVal.greenF = $bm_div(colors[low][1], 255);\n        colorVal.blueF = $bm_div(colors[low][2], 255);\n    }\n    return colorVal;\n}\nfunction GetPathColor(paletteId, pathId, numPaths) {\n    var firstScratch, secondScratch, L, pts, pt;\n    var colorVal = {\n        alphaF: 0,\n        redF: 0,\n        greenF: 0,\n        blueF: 0\n    };\n    switch (paletteId) {\n    case 1: {\n            firstScratch = [\n                0,\n                0,\n                0\n            ];\n            try {\n                firstScratch = fx('MB ConnectLayersProStyles-0023').value;\n            } catch (e) {\n            }\n            colorVal.alphaF = 1;\n            colorVal.redF = firstScratch[0];\n            colorVal.greenF = firstScratch[1];\n            colorVal.blueF = firstScratch[2];\n            break;\n        }\n    case 2: {\n            firstScratch = secondScratch = [\n                0,\n                0,\n                0\n            ];\n            try {\n                firstScratch = fx('MB ConnectLayersProStyles-0023').value;\n                secondScratch = fx('End Color').value;\n            } catch (e) {\n            }\n            colorVal.alphaF = 1;\n            colorVal.redF = linear(pathId, 1, numPaths, firstScratch[0], secondScratch[0]);\n            colorVal.greenF = linear(pathId, 1, numPaths, firstScratch[1], secondScratch[1]);\n            colorVal.blueF = linear(pathId, 1, numPaths, firstScratch[2], secondScratch[2]);\n            break;\n        }\n    case 3: {\n            var c = HslToRgb(pathId / numPaths, sat, luma);\n            colorVal.alphaF = 1;\n            colorVal.redF = c.redF;\n            colorVal.greenF = c.greenF;\n            colorVal.blueF = c.blueF;\n            break;\n        }\n    case 4: {\n            colorVal.alphaF = 1;\n            colorVal.redF = random();\n            colorVal.greenF = random();\n            colorVal.blueF = random();\n            break;\n        }\n    case 5: {\n            try {\n                L = fx('Color Layer');\n                pts = content('Chain 1').content('Paths').content('Path 1').content('Path').path.points();\n                pt = [\n                    0,\n                    0\n                ];\n                for (var i = 0; i < pts.length; i++) {\n                    pt += toComp(pts[i]);\n                }\n                pt /= pts.length;\n                if (pt.length == 3)\n                    pt.pop();\n                pt = L.fromCompToSurface(pt);\n                c = L.sampleImage(pt);\n                colorVal.alphaF = c[3];\n                colorVal.redF = c[0];\n                colorVal.greenF = c[1];\n                colorVal.blueF = c[2];\n            } catch (e) {\n                colorVal.alphaF = colorVal.redF = colorVal.greenF = colorVal.blueF = 0;\n            }\n            break;\n        }\n    case 6: {\n            break;\n        }\n    case 7: {\n            var colors = [\n                [\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    38,\n                    50,\n                    72\n                ],\n                [\n                    126,\n                    138,\n                    162\n                ],\n                [\n                    255,\n                    255,\n                    255\n                ],\n                [\n                    255,\n                    152,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 8: {\n            var colors = [\n                [\n                    207,\n                    194,\n                    145\n                ],\n                [\n                    255,\n                    246,\n                    197\n                ],\n                [\n                    161,\n                    232,\n                    217\n                ],\n                [\n                    255,\n                    113,\n                    44\n                ],\n                [\n                    105,\n                    93,\n                    70\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 9: {\n            var colors = [\n                [\n                    194,\n                    71,\n                    4\n                ],\n                [\n                    217,\n                    204,\n                    60\n                ],\n                [\n                    255,\n                    235,\n                    121\n                ],\n                [\n                    160,\n                    224,\n                    169\n                ],\n                [\n                    0,\n                    173,\n                    167\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 10: {\n            var colors = [\n                [\n                    43,\n                    58,\n                    66\n                ],\n                [\n                    63,\n                    87,\n                    101\n                ],\n                [\n                    189,\n                    212,\n                    222\n                ],\n                [\n                    239,\n                    239,\n                    239\n                ],\n                [\n                    255,\n                    83,\n                    13\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 11: {\n            var colors = [\n                [\n                    185,\n                    18,\n                    27\n                ],\n                [\n                    76,\n                    27,\n                    27\n                ],\n                [\n                    246,\n                    228,\n                    151\n                ],\n                [\n                    252,\n                    250,\n                    225\n                ],\n                [\n                    189,\n                    141,\n                    70\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 12: {\n            var colors = [\n                [\n                    0,\n                    88,\n                    95\n                ],\n                [\n                    0,\n                    147,\n                    147\n                ],\n                [\n                    255,\n                    255,\n                    196\n                ],\n                [\n                    240,\n                    237,\n                    187\n                ],\n                [\n                    255,\n                    56,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 13: {\n            var colors = [\n                [\n                    70,\n                    137,\n                    102\n                ],\n                [\n                    255,\n                    240,\n                    165\n                ],\n                [\n                    255,\n                    176,\n                    59\n                ],\n                [\n                    182,\n                    73,\n                    38\n                ],\n                [\n                    142,\n                    40,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 14: {\n            var colors = [\n                [\n                    47,\n                    41,\n                    51\n                ],\n                [\n                    1,\n                    162,\n                    166\n                ],\n                [\n                    41,\n                    217,\n                    194\n                ],\n                [\n                    189,\n                    242,\n                    113\n                ],\n                [\n                    255,\n                    255,\n                    166\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 15: {\n            var colors = [\n                [\n                    150,\n                    45,\n                    62\n                ],\n                [\n                    52,\n                    54,\n                    66\n                ],\n                [\n                    151,\n                    156,\n                    156\n                ],\n                [\n                    242,\n                    235,\n                    199\n                ],\n                [\n                    52,\n                    136,\n                    153\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 16: {\n            var colors = [\n                [\n                    133,\n                    219,\n                    24\n                ],\n                [\n                    205,\n                    232,\n                    85\n                ],\n                [\n                    245,\n                    246,\n                    212\n                ],\n                [\n                    167,\n                    197,\n                    32\n                ],\n                [\n                    73,\n                    63,\n                    11\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 17: {\n            var colors = [\n                [\n                    213,\n                    251,\n                    255\n                ],\n                [\n                    159,\n                    188,\n                    191\n                ],\n                [\n                    100,\n                    118,\n                    120\n                ],\n                [\n                    47,\n                    55,\n                    56\n                ],\n                [\n                    89,\n                    216,\n                    230\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 18: {\n            var colors = [\n                [\n                    90,\n                    31,\n                    0\n                ],\n                [\n                    209,\n                    87,\n                    13\n                ],\n                [\n                    253,\n                    231,\n                    146\n                ],\n                [\n                    71,\n                    119,\n                    37\n                ],\n                [\n                    169,\n                    204,\n                    102\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 19: {\n            var colors = [\n                [\n                    16,\n                    91,\n                    99\n                ],\n                [\n                    255,\n                    250,\n                    213\n                ],\n                [\n                    255,\n                    211,\n                    78\n                ],\n                [\n                    219,\n                    158,\n                    54\n                ],\n                [\n                    189,\n                    73,\n                    50\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 20: {\n            var colors = [\n                [\n                    216,\n                    202,\n                    168\n                ],\n                [\n                    92,\n                    131,\n                    47\n                ],\n                [\n                    40,\n                    73,\n                    7\n                ],\n                [\n                    56,\n                    37,\n                    19\n                ],\n                [\n                    54,\n                    57,\n                    66\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 21: {\n            var colors = [\n                [\n                    252,\n                    255,\n                    245\n                ],\n                [\n                    209,\n                    219,\n                    189\n                ],\n                [\n                    145,\n                    170,\n                    157\n                ],\n                [\n                    62,\n                    96,\n                    111\n                ],\n                [\n                    25,\n                    52,\n                    65\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 22: {\n            var colors = [\n                [\n                    64,\n                    89,\n                    82\n                ],\n                [\n                    156,\n                    155,\n                    122\n                ],\n                [\n                    255,\n                    211,\n                    147\n                ],\n                [\n                    255,\n                    151,\n                    79\n                ],\n                [\n                    245,\n                    79,\n                    41\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 23: {\n            var colors = [\n                [\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    51,\n                    51,\n                    51\n                ],\n                [\n                    255,\n                    53,\n                    139\n                ],\n                [\n                    1,\n                    176,\n                    240\n                ],\n                [\n                    174,\n                    238,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 24: {\n            var colors = [\n                [\n                    108,\n                    110,\n                    88\n                ],\n                [\n                    62,\n                    66,\n                    58\n                ],\n                [\n                    65,\n                    115,\n                    120\n                ],\n                [\n                    164,\n                    207,\n                    190\n                ],\n                [\n                    244,\n                    247,\n                    217\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 25: {\n            var colors = [\n                [\n                    255,\n                    248,\n                    227\n                ],\n                [\n                    204,\n                    204,\n                    159\n                ],\n                [\n                    51,\n                    51,\n                    45\n                ],\n                [\n                    159,\n                    180,\n                    204\n                ],\n                [\n                    219,\n                    65,\n                    5\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 26: {\n            var colors = [\n                [\n                    180,\n                    175,\n                    145\n                ],\n                [\n                    120,\n                    119,\n                    70\n                ],\n                [\n                    64,\n                    65,\n                    30\n                ],\n                [\n                    50,\n                    51,\n                    29\n                ],\n                [\n                    192,\n                    48,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 27: {\n            var colors = [\n                [\n                    4,\n                    191,\n                    191\n                ],\n                [\n                    202,\n                    252,\n                    216\n                ],\n                [\n                    247,\n                    233,\n                    103\n                ],\n                [\n                    169,\n                    207,\n                    84\n                ],\n                [\n                    88,\n                    143,\n                    39\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 28: {\n            var colors = [\n                [\n                    255,\n                    97,\n                    56\n                ],\n                [\n                    255,\n                    255,\n                    157\n                ],\n                [\n                    190,\n                    235,\n                    159\n                ],\n                [\n                    121,\n                    189,\n                    143\n                ],\n                [\n                    0,\n                    163,\n                    136\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 29: {\n            var colors = [\n                [\n                    176,\n                    204,\n                    153\n                ],\n                [\n                    103,\n                    126,\n                    82\n                ],\n                [\n                    183,\n                    202,\n                    121\n                ],\n                [\n                    246,\n                    232,\n                    177\n                ],\n                [\n                    137,\n                    114,\n                    91\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 30: {\n            var colors = [\n                [\n                    62,\n                    69,\n                    76\n                ],\n                [\n                    33,\n                    133,\n                    197\n                ],\n                [\n                    126,\n                    206,\n                    253\n                ],\n                [\n                    255,\n                    246,\n                    229\n                ],\n                [\n                    255,\n                    127,\n                    102\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 31: {\n            var colors = [\n                [\n                    230,\n                    226,\n                    175\n                ],\n                [\n                    167,\n                    163,\n                    126\n                ],\n                [\n                    239,\n                    236,\n                    202\n                ],\n                [\n                    4,\n                    99,\n                    128\n                ],\n                [\n                    0,\n                    47,\n                    47\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 32: {\n            var colors = [\n                [\n                    220,\n                    53,\n                    34\n                ],\n                [\n                    217,\n                    203,\n                    158\n                ],\n                [\n                    55,\n                    65,\n                    64\n                ],\n                [\n                    42,\n                    44,\n                    43\n                ],\n                [\n                    30,\n                    30,\n                    32\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 33: {\n            var colors = [\n                [\n                    89,\n                    82,\n                    65\n                ],\n                [\n                    184,\n                    174,\n                    156\n                ],\n                [\n                    255,\n                    255,\n                    255\n                ],\n                [\n                    172,\n                    207,\n                    204\n                ],\n                [\n                    138,\n                    9,\n                    23\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 34: {\n            var colors = [\n                [\n                    0,\n                    67,\n                    88\n                ],\n                [\n                    31,\n                    138,\n                    112\n                ],\n                [\n                    190,\n                    219,\n                    57\n                ],\n                [\n                    255,\n                    225,\n                    26\n                ],\n                [\n                    253,\n                    116,\n                    0\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 35: {\n            var colors = [\n                [\n                    125,\n                    138,\n                    46\n                ],\n                [\n                    201,\n                    215,\n                    135\n                ],\n                [\n                    255,\n                    255,\n                    255\n                ],\n                [\n                    255,\n                    192,\n                    169\n                ],\n                [\n                    255,\n                    133,\n                    152\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    case 36: {\n            var colors = [\n                [\n                    16,\n                    34,\n                    13\n                ],\n                [\n                    149,\n                    171,\n                    99\n                ],\n                [\n                    189,\n                    214,\n                    132\n                ],\n                [\n                    226,\n                    240,\n                    214\n                ],\n                [\n                    246,\n                    255,\n                    224\n                ]\n            ];\n            colorVal = GetColorFromKulerScheme(colors, pathId, numPaths);\n            break;\n        }\n    default:\n        break;\n    }\n    return colorVal;\n}\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\nfillEnabB = fx('Enable Fill').value > 0;\nres = value;\nif (fillEnabB) {\n    paletteId = 1;\n    try {\n        paletteId = fx('Fill Palette').value;\n    } catch (e) {\n    }\n    pathId = 1;\n    numPaths = 1;\n    if (paletteId == 3) {\n        sat = luma = 0.5;\n        try {\n            sat = $bm_div(fx('Saturation').value, 100);\n            luma = $bm_div(fx('Luminance').value, 100);\n        } catch (e) {\n        }\n    } else if (paletteId == 4) {\n        seed = 1;\n        try {\n            seed = fx('Random Seed').value;\n        } catch (e) {\n        }\n        seedRandom(seed, true);\n    }\n    cVal = GetPathColor(paletteId, pathId, numPaths);\n    res = [\n        cVal.redF,\n        cVal.greenF,\n        cVal.blueF,\n        cVal.alphaF\n    ];\n}\n$bm_rt = res;"},"o":{"a":0,"k":100,"ix":5,"x":"var $bm_rt;\nvar is3dB, fx, res, fillEnabB, res, opaDistB, near, far, reverseB, path, pts, d, res, res, res, res, paletteId, paletteId, L, L, L, pts, pt, pt, pt, pt, c, res, res, res;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\nif (fx('MB ConnectLayersProStyles-0034').value > 0)\n    res = 0;\nelse {\n    fillEnabB = fx('Enable Fill').value > 0;\n    if (fillEnabB) {\n        res = fx('MB ConnectLayersProStyles-0029').value;\n        opaDistB = fx('MB ConnectLayersProStyles-0030').value > 0;\n        if (opaDistB) {\n            near = fx('MB ConnectLayersProStyles-0031').value;\n            far = fx('MB ConnectLayersProStyles-0032').value;\n            reverseB = fx('MB ConnectLayersProStyles-0033').value > 0;\n            path = content('Chain 1').content('Paths').content('Path 1').content('Path').path;\n            pts = path.points();\n            d = path.isClosed() ? length($bm_sub(pts[1], pts[0])) : length($bm_sub(pts[$bm_sub(pts.length, 1)], pts[0]));\n            if (d <= near)\n                res = 100;\n            else if (d >= far)\n                res = 0;\n            else\n                res *= ease(d, near, far, 1, 0);\n            if (reverseB)\n                res = $bm_sub(100, res);\n        }\n        paletteId = 1;\n        try {\n            paletteId = fx('Fill Palette').value;\n        } catch (e) {\n        }\n        if (paletteId == 5) {\n            L = null;\n            try {\n                L = fx('Color Layer');\n            } catch (e) {\n                L = null;\n            }\n            if (L) {\n                pts = content('Chain 1').content('Paths').content('Path 1').content('Path').path.points();\n                pt = [\n                    0,\n                    0\n                ];\n                for (var i = 0; i < pts.length; i++) {\n                    pt = $bm_sum(pt, toComp(pts[i]));\n                }\n                pt /= pts.length;\n                if (pt.length == 3)\n                    pt.pop();\n                pt = L.fromCompToSurface(pt);\n                c = L.sampleImage(pt);\n                res *= c[3];\n            } else\n                res = 0;\n        }\n    } else\n        res = 0;\n}\n$bm_rt = res;"},"r":1,"bm":0,"nm":"Fill","mn":"ADBE Vector Graphic - Fill","hd":false},{"ty":"gf","o":{"a":0,"k":100,"ix":10,"x":"var $bm_rt;\nvar is3dB, fx, gradEnabB, res, opaDistB, near, far, reverseB, path, pts, d, res, res, res, res, res;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\ngradEnabB = fx('MB ConnectLayersProStyles-0034').value > 0;\nif (gradEnabB) {\n    res = fx('MB ConnectLayersProStyles-0029').value;\n    opaDistB = fx('MB ConnectLayersProStyles-0030').value > 0;\n    if (opaDistB) {\n        near = fx('MB ConnectLayersProStyles-0031').value;\n        far = fx('MB ConnectLayersProStyles-0032').value;\n        reverseB = fx('MB ConnectLayersProStyles-0033').value > 0;\n        path = content('Chain 1').content('Paths').content('Path 1').content('Path').path;\n        pts = path.points();\n        d = path.isClosed() ? length($bm_sub(pts[1], pts[0])) : length($bm_sub(pts[$bm_sub(pts.length, 1)], pts[0]));\n        if (d <= near)\n            res = 100;\n        else if (d >= far)\n            res = 0;\n        else\n            res *= ease(d, near, far, 1, 0);\n        if (reverseB)\n            res = $bm_sub(100, res);\n    }\n} else\n    res = 0;\n$bm_rt = res;"},"r":1,"bm":0,"g":{"p":2,"k":{"a":0,"k":[0,1,1,1,1,0,0,0],"ix":9}},"s":{"a":0,"k":[0,0],"ix":5,"x":"var $bm_rt;\nvar is3dB, fx, path, type, gradEnabB, gradScale, curveEnabB, pts, ptsAt0, lastIdx, startPt, startPtAt0, i, startPt, startPtAt0, startPt, startPtAt0, startPt, startPtAt0, isPennerB, curviness, curveId, isPennerB, precision, lastIdx, farthestId, maxD, i, d, maxD, farthestId, endPt, endPt, midPt, u, v, startPt, endPt, v, endPt;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\npath = content('Chain 1').content('Paths').content('Path 1').content('Path').path;\ntype = thisProperty.propertyGroup().type;\n$bm_rt = gradEnabB = fx('MB ConnectLayersProStyles-0034').value > 0;\nif (gradEnabB) {\n    gradScale = $bm_div(fx('MB ConnectLayersProStyles-0039').value, 100);\n    curveEnabB = fx('Curviness').value > 0;\n    pts = path.points();\n    ptsAt0 = path.points(0);\n    lastIdx = path.isClosed() ? $bm_sub(pts.length, 2) : $bm_sub(pts.length, 1);\n    startPt = [\n        0,\n        0\n    ];\n    startPtAt0 = [\n        0,\n        0\n    ];\n    if (type == 2) {\n        for (i = 0; i < pts.length; i++) {\n            startPt = $bm_sum(startPt, pts[i]);\n            startPtAt0 = $bm_sum(startPtAt0, ptsAt0[i]);\n        }\n        startPt /= pts.length;\n        startPtAt0 /= ptsAt0.length;\n    } else {\n        startPt = pts[0];\n        startPtAt0 = ptsAt0[0];\n    }\n    isPennerB = false;\n    if (curveEnabB) {\n        curviness = {\n            LINEAR: 1,\n            SEP1: 2,\n            ARC: 3,\n            STEP: 4,\n            STEP_AFTER: 5,\n            STEP_BEFORE: 6,\n            SEP2: 7,\n            AUTO_BEZIER: 8,\n            CUSTOM_TENSION: 9,\n            SEP3: 10,\n            DYNAMIC_BEZIER: 11,\n            DYNAMIC_CUSTOM_BEZIER: 12,\n            DYNAMIC_VERLET: 13,\n            SEP4: 14,\n            IN_SINE: 15,\n            OUT_SINE: 16,\n            IN_OUT_SINE: 17,\n            IN_QUADRATIC: 18,\n            OUT_QUADRATIC: 19,\n            IN_OUT_QUADRATIC: 20,\n            IN_CUBIC: 21,\n            OUT_CUBIC: 22,\n            IN_OUT_CUBIC: 23,\n            IN_QUARTIC: 24,\n            OUT_QUARTIC: 25,\n            IN_OUT_QUARTIC: 26,\n            IN_QUINTIC: 27,\n            OUT_QUINTIC: 28,\n            IN_OUT_QUINTIC: 29,\n            IN_EXPONENTIAL: 30,\n            OUT_EXPONENTIAL: 31,\n            IN_OUT_EXPONENTIAL: 32,\n            IN_CIRCULAR: 33,\n            OUT_CIRCULAR: 34,\n            IN_OUT_CIRCULAR: 35,\n            SEP11: 36,\n            IN_BACK: 37,\n            OUT_BACK: 38,\n            IN_OUT_BACK: 39,\n            IN_ELASTIC: 40,\n            OUT_ELASTIC: 41,\n            IN_OUT_ELASTIC: 42,\n            IN_BOUNCE: 43,\n            OUT_BOUNCE: 44,\n            IN_OUT_BOUNCE: 45\n        };\n        curveId = fx('Function').value;\n        isPennerB = curveId >= curviness.IN_SINE;\n        if (isPennerB) {\n            precision = Math.round(fx('Precision').value);\n            if (path.isClosed())\n                lastIdx = $bm_sub(lastIdx, precision);\n        }\n    }\n    if (type == 2 || path.isClosed()) {\n        farthestId = 0;\n        maxD = 0;\n        for (i = 0; i < ptsAt0.length; i++) {\n            d = length($bm_sub(ptsAt0[i], startPtAt0));\n            if (d > maxD) {\n                maxD = d;\n                farthestId = i;\n            }\n        }\n        endPt = pts[farthestId];\n    } else {\n        endPt = pts[lastIdx];\n    }\n    if (gradScale != 1) {\n        if (type == 1) {\n            midPt = $bm_mul(0.5, $bm_sum(startPt, endPt));\n            u = $bm_sub(startPt, midPt);\n            v = $bm_sub(endPt, midPt);\n            startPt = $bm_sum(midPt, $bm_mul(gradScale, u));\n            endPt = $bm_sum(midPt, $bm_mul(gradScale, v));\n        } else {\n            v = $bm_sub(endPt, startPt);\n            endPt = $bm_sum(startPt, $bm_mul(gradScale, v));\n        }\n    }\n    $bm_rt = startPt;\n} else\n    $bm_rt = value;"},"e":{"a":0,"k":[100,0],"ix":6,"x":"var $bm_rt;\nvar is3dB, fx, path, type, gradEnabB, gradScale, curveEnabB, pts, ptsAt0, lastIdx, startPt, startPtAt0, i, startPt, startPtAt0, startPt, startPtAt0, startPt, startPtAt0, isPennerB, curviness, curveId, isPennerB, precision, lastIdx, farthestId, maxD, i, d, maxD, farthestId, endPt, endPt, midPt, u, v, startPt, endPt, v, endPt;\nis3dB = false;\nfx = is3dB ? effect('Controller Layer')(1).effect('MB ConnectLayersProStyles') : effect('MB ConnectLayersProStyles');\npath = content('Chain 1').content('Paths').content('Path 1').content('Path').path;\ntype = thisProperty.propertyGroup().type;\n$bm_rt = gradEnabB = fx('MB ConnectLayersProStyles-0034').value > 0;\nif (gradEnabB) {\n    gradScale = $bm_div(fx('MB ConnectLayersProStyles-0039').value, 100);\n    curveEnabB = fx('Curviness').value > 0;\n    pts = path.points();\n    ptsAt0 = path.points(0);\n    lastIdx = path.isClosed() ? $bm_sub(pts.length, 2) : $bm_sub(pts.length, 1);\n    startPt = [\n        0,\n        0\n    ];\n    startPtAt0 = [\n        0,\n        0\n    ];\n    if (type == 2) {\n        for (i = 0; i < pts.length; i++) {\n            startPt = $bm_sum(startPt, pts[i]);\n            startPtAt0 = $bm_sum(startPtAt0, ptsAt0[i]);\n        }\n        startPt /= pts.length;\n        startPtAt0 /= ptsAt0.length;\n    } else {\n        startPt = pts[0];\n        startPtAt0 = ptsAt0[0];\n    }\n    isPennerB = false;\n    if (curveEnabB) {\n        curviness = {\n            LINEAR: 1,\n            SEP1: 2,\n            ARC: 3,\n            STEP: 4,\n            STEP_AFTER: 5,\n            STEP_BEFORE: 6,\n            SEP2: 7,\n            AUTO_BEZIER: 8,\n            CUSTOM_TENSION: 9,\n            SEP3: 10,\n            DYNAMIC_BEZIER: 11,\n            DYNAMIC_CUSTOM_BEZIER: 12,\n            DYNAMIC_VERLET: 13,\n            SEP4: 14,\n            IN_SINE: 15,\n            OUT_SINE: 16,\n            IN_OUT_SINE: 17,\n            IN_QUADRATIC: 18,\n            OUT_QUADRATIC: 19,\n            IN_OUT_QUADRATIC: 20,\n            IN_CUBIC: 21,\n            OUT_CUBIC: 22,\n            IN_OUT_CUBIC: 23,\n            IN_QUARTIC: 24,\n            OUT_QUARTIC: 25,\n            IN_OUT_QUARTIC: 26,\n            IN_QUINTIC: 27,\n            OUT_QUINTIC: 28,\n            IN_OUT_QUINTIC: 29,\n            IN_EXPONENTIAL: 30,\n            OUT_EXPONENTIAL: 31,\n            IN_OUT_EXPONENTIAL: 32,\n            IN_CIRCULAR: 33,\n            OUT_CIRCULAR: 34,\n            IN_OUT_CIRCULAR: 35,\n            SEP11: 36,\n            IN_BACK: 37,\n            OUT_BACK: 38,\n            IN_OUT_BACK: 39,\n            IN_ELASTIC: 40,\n            OUT_ELASTIC: 41,\n            IN_OUT_ELASTIC: 42,\n            IN_BOUNCE: 43,\n            OUT_BOUNCE: 44,\n            IN_OUT_BOUNCE: 45\n        };\n        curveId = fx('Function').value;\n        isPennerB = curveId >= curviness.IN_SINE;\n        if (isPennerB) {\n            precision = Math.round(fx('Precision').value);\n            if (path.isClosed())\n                lastIdx = $bm_sub(lastIdx, precision);\n        }\n    }\n    if (type == 2 || path.isClosed()) {\n        farthestId = 0;\n        maxD = 0;\n        for (i = 0; i < ptsAt0.length; i++) {\n            d = length($bm_sub(ptsAt0[i], startPtAt0));\n            if (d > maxD) {\n                maxD = d;\n                farthestId = i;\n            }\n        }\n        endPt = pts[farthestId];\n    } else {\n        endPt = pts[lastIdx];\n    }\n    if (gradScale != 1) {\n        if (type == 1) {\n            midPt = $bm_mul(0.5, $bm_sum(startPt, endPt));\n            u = $bm_sub(startPt, midPt);\n            v = $bm_sub(endPt, midPt);\n            startPt = $bm_sum(midPt, $bm_mul(gradScale, u));\n            endPt = $bm_sum(midPt, $bm_mul(gradScale, v));\n        } else {\n            v = $bm_sub(endPt, startPt);\n            endPt = $bm_sum(startPt, $bm_mul(gradScale, v));\n        }\n    }\n    $bm_rt = endPt;\n} else\n    $bm_rt = value;"},"t":1,"nm":"Gradient Fill","mn":"ADBE Vector Graphic - G-Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Path 1","np":7,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Paths","np":6,"cix":2,"bm":0,"ix":2,"mn":"ADBE Vector Group","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Chain 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":2000,"st":0,"ct":1,"bm":0}],"markers":[{"tm":30,"cm":"anim","dr":157}],"props":{}}